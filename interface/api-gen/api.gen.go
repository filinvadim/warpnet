// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/dWighter/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// GetV1ApiTweetsTimelineUserIdParams defines parameters for GetV1ApiTweetsTimelineUserId.
type GetV1ApiTweetsTimelineUserIdParams struct {
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostV1ApiAuthLoginJSONRequestBody defines body for PostV1ApiAuthLogin for application/json ContentType.
type PostV1ApiAuthLoginJSONRequestBody = externalRef0.AuthRequest

// PostV1ApiTweetsJSONRequestBody defines body for PostV1ApiTweets for application/json ContentType.
type PostV1ApiTweetsJSONRequestBody = externalRef0.Tweet

// PostV1ApiUsersJSONRequestBody defines body for PostV1ApiUsers for application/json ContentType.
type PostV1ApiUsersJSONRequestBody = externalRef0.User

// PostV1ApiUsersFollowJSONRequestBody defines body for PostV1ApiUsersFollow for application/json ContentType.
type PostV1ApiUsersFollowJSONRequestBody = externalRef0.FollowRequest

// PostV1ApiUsersUnfollowJSONRequestBody defines body for PostV1ApiUsersUnfollow for application/json ContentType.
type PostV1ApiUsersUnfollowJSONRequestBody = externalRef0.UnfollowRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve the main index.html page
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Store credentials
	// (POST /v1/api/auth/login)
	PostV1ApiAuthLogin(ctx echo.Context) error
	// Close service
	// (POST /v1/api/auth/logout)
	PostV1ApiAuthLogout(ctx echo.Context) error
	// Publish a new tweet
	// (POST /v1/api/tweets)
	PostV1ApiTweets(ctx echo.Context) error
	// Get user's tweet timeline
	// (GET /v1/api/tweets/timeline/{user_id})
	GetV1ApiTweetsTimelineUserId(ctx echo.Context, userId string, params GetV1ApiTweetsTimelineUserIdParams) error
	// Get user's tweets
	// (GET /v1/api/tweets/{user_id})
	GetV1ApiTweetsUserId(ctx echo.Context, userId string) error
	// Get a certain tweet
	// (GET /v1/api/tweets/{user_id}/{tweet_id})
	GetV1ApiTweetsUserIdTweetId(ctx echo.Context, userId string, tweetId string) error
	// Create a new user
	// (POST /v1/api/users)
	PostV1ApiUsers(ctx echo.Context) error
	// Follow another user
	// (POST /v1/api/users/follow)
	PostV1ApiUsersFollow(ctx echo.Context) error
	// Unfollow a user
	// (POST /v1/api/users/unfollow)
	PostV1ApiUsersUnfollow(ctx echo.Context) error
	// Get user information
	// (GET /v1/api/users/{user_id})
	GetV1ApiUsersUserId(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// PostV1ApiAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogin(ctx)
	return err
}

// PostV1ApiAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogout(ctx)
	return err
}

// PostV1ApiTweets converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiTweets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiTweets(ctx)
	return err
}

// GetV1ApiTweetsTimelineUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsTimelineUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsTimelineUserIdParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsTimelineUserId(ctx, userId, params)
	return err
}

// GetV1ApiTweetsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserId(ctx, userId)
	return err
}

// GetV1ApiTweetsUserIdTweetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserIdTweetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "tweet_id" -------------
	var tweetId string

	err = runtime.BindStyledParameterWithOptions("simple", "tweet_id", ctx.Param("tweet_id"), &tweetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tweet_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserIdTweetId(ctx, userId, tweetId)
	return err
}

// PostV1ApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsers(ctx)
	return err
}

// PostV1ApiUsersFollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersFollow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersFollow(ctx)
	return err
}

// PostV1ApiUsersUnfollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersUnfollow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersUnfollow(ctx)
	return err
}

// GetV1ApiUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiUsersUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.POST(baseURL+"/v1/api/auth/login", wrapper.PostV1ApiAuthLogin)
	router.POST(baseURL+"/v1/api/auth/logout", wrapper.PostV1ApiAuthLogout)
	router.POST(baseURL+"/v1/api/tweets", wrapper.PostV1ApiTweets)
	router.GET(baseURL+"/v1/api/tweets/timeline/:user_id", wrapper.GetV1ApiTweetsTimelineUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id", wrapper.GetV1ApiTweetsUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id/:tweet_id", wrapper.GetV1ApiTweetsUserIdTweetId)
	router.POST(baseURL+"/v1/api/users", wrapper.PostV1ApiUsers)
	router.POST(baseURL+"/v1/api/users/follow", wrapper.PostV1ApiUsersFollow)
	router.POST(baseURL+"/v1/api/users/unfollow", wrapper.PostV1ApiUsersUnfollow)
	router.GET(baseURL+"/v1/api/users/:user_id", wrapper.GetV1ApiUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYW2/bNhT+KwQ3YBvgRE5vQP3WdV0XIAOKLt0euiBgxCOLLUWq5GESI/B/H0hK1tWJ",
	"7NZd+xIo5uHhp+87N/GOprootQKFli7uqE1zKFh4fOEwfwufHFj0/5ZGl2BQQFgsmbU32nD/jKsS6IJa",
	"NEIt6XpGnQWjWAEji+sZNfDJCQOcLt43lrPG48Ws3qSvPkCK3uPvWkp9sxWNAcbBXIoApxDqDNQSc7o4",
	"mQ3B3RiB02x7WJtD2k7G0J6JjzAEiTcAOA2jp2UPhPW2WXPWGLy3EJa/YYTn4/hSrRAUToCXGmAI/JIF",
	"40ybwj9RzhCOUIR4G+yR4mM8RiAU4eFHAxld0B+SJkeSKkGSoPF644YZw1YbL5epdqp7tFD47AmdeeCi",
	"cAVdzDd7hUJYgqGBq8DLdBi1liNIal97g7E+3VQKe2w9QCTtWlZimNUhszXK7FuwpVZ2JGFTZ6w2oxVu",
	"R5XOxzXqoa7O23gfw/xOZd9VKXxnwQxBXgmDuU/G6dm5T0ZzsKkRJQqtRlWMVALv6DjUupdX9a5L5cN/",
	"JDWG6VBtMXavk4zd4Sgp1MeOqTNytNrplG0lplhdGsjAGCZ3hKw0hyqgGgQuVvz+3ngE8Mur1dYxovJ1",
	"by3YtQFVA0cNdRi2fpNQmfbOOzFEX92iAcUkefHmlGTaEEa48EddOQROzm8EIpgj3wQIK0spKpJnFAVK",
	"f8ZvQ3PvjM7oNRgbTzk5nh/P/VvqEhQrBV3Qx+EnPyVhHpRI/J9l7JJdjOe5sAQUL7VQSCyYa7AEcyAF",
	"E4pkJlRETkq2BKKzsNKCSn4WisPtcY6F/OWYBgwmrJxyuqCvAU/9OvW0xsIZ4Dyaz3sdGuEWE++lGSv9",
	"E9yyogxM/Ovm88eptwhPUP0PjLf/D7zFH2q6XkqtqtWktVz90ndwpfkq/v8PyFQXQFCTMVeNYe1pA20Y",
	"vet+eaHnNcN/nP95to1dL+rTAVUtg+SDjTnZMNafgTh0eHw6H+3ABVjLll1TeqrQh78kf/moMOSVMbHh",
	"DHJmJCO6r1t5gODBL1tXFMys6qUm4pp4CqwE4+T6JGGlSJjDPJF6KcI7lzp2tG7IvdEW/z55UQr/QXIW",
	"bGNOg8VfNV/tROZ9Xbr9wbPuFg40DtYPhvz+R4c2OcKy/51wQCak9ao+mZ8ME97jJhkTEngrvro2G+Xt",
	"PbqhNkBSAxwUCl/6ZxTZ0vq66c+gF2PSaYfTtfPG4zT2osulKVj7Wa/zUmoLwUCkcO+rNNPcA28RJ8YD",
	"hV81JH7dwGsd2itnfoHYqEPmpFyRagSLcTgqyjWTghOhSoc9Md64KylsThhRcEPiN0sjSUQxokniRzsp",
	"FCR31TSwbvW9QWtqiXRebfQZdMpD5zSsAAxD2Ps76itO6KZ+EgiDROurocv/rMXloFJWnj45MKvG1WaU",
	"33mnFIXAzkYOGXMS6eLRsNDP6O3RUh9Vv7o4Fq7XF4eOmOaraUvR+slGkUktYIyaJ8OoCSVOm40hURpJ",
	"pp3ivRB6DUjcqOspgbRr/Bw4bv5fhc6ERT+dtOm0DysUzCbrY3fTJbmrLw12kyg8f4UM73raXHB8AdEf",
	"LLwZYJrvWXi9KoykYNDPYhMKr+doSi98F+wO0wqbcegbGcG+WB98GfZWbdBT3RIjIBhqkcRrgKmSxKvy",
	"AwnTvYefpNDJ1umuCu7qOiV8MARG9uE1AiNMaczBTGXWqd24rW/fDhX2vcu96RlwD7/1O34uwzU4wqay",
	"O73lRnK/3447/fNtW3t9qKkSoeJ9WnWb1KM+3Nb7L6FIWa/b65RJwuEapC4LqC+FvITOSLqgOWK5SBLp",
	"7XJtcfHs+bPndH2x/i8AAP//74wkkB4cAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
