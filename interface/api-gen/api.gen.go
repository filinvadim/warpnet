// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/warpnet/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// PostV1ApiAuthLogoutParams defines parameters for PostV1ApiAuthLogout.
type PostV1ApiAuthLogoutParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// ListChatsParams defines parameters for ListChats.
type ListChatsParams struct {
	UserId        string  `form:"user_id" json:"user_id"`
	Cursor        *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	XSESSIONTOKEN string  `json:"X-SESSION-TOKEN"`
}

// PostV1ApiChatParams defines parameters for PostV1ApiChat.
type PostV1ApiChatParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiChatWsParams defines parameters for GetV1ApiChatWs.
type GetV1ApiChatWsParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiChatChatIdParams defines parameters for GetV1ApiChatChatId.
type GetV1ApiChatChatIdParams struct {
	UserId        string `form:"user_id" json:"user_id"`
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// ListMessagesParams defines parameters for ListMessages.
type ListMessagesParams struct {
	UserId        string  `form:"user_id" json:"user_id"`
	Cursor        *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	XSESSIONTOKEN string  `json:"X-SESSION-TOKEN"`
}

// PostV1ApiChatChatIdMessageParams defines parameters for PostV1ApiChatChatIdMessage.
type PostV1ApiChatChatIdMessageParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// DeleteV1ApiChatChatIdMessageMessageIdParams defines parameters for DeleteV1ApiChatChatIdMessageMessageId.
type DeleteV1ApiChatChatIdMessageMessageIdParams struct {
	UserId        string `form:"user_id" json:"user_id"`
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiChatChatIdMessageMessageIdParams defines parameters for GetV1ApiChatChatIdMessageMessageId.
type GetV1ApiChatChatIdMessageMessageIdParams struct {
	UserId        string `form:"user_id" json:"user_id"`
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiNodesSettingsParams defines parameters for GetV1ApiNodesSettings.
type GetV1ApiNodesSettingsParams struct {
	Cursor        *string                      `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64                      `form:"limit,omitempty" json:"limit,omitempty"`
	Name          externalRef0.SettingNameEnum `form:"name" json:"name"`
	XSESSIONTOKEN string                       `json:"X-SESSION-TOKEN"`
}

// PostV1ApiNodesSettingsParams defines parameters for PostV1ApiNodesSettings.
type PostV1ApiNodesSettingsParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiTweetsParams defines parameters for PostV1ApiTweets.
type PostV1ApiTweetsParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// AddReplyParams defines parameters for AddReply.
type AddReplyParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetAllRepliesParams defines parameters for GetAllReplies.
type GetAllRepliesParams struct {
	Cursor        *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	XSESSIONTOKEN string  `json:"X-SESSION-TOKEN"`
}

// GetSingleReplyParams defines parameters for GetSingleReply.
type GetSingleReplyParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiTweetsTimelineUserIdParams defines parameters for GetV1ApiTweetsTimelineUserId.
type GetV1ApiTweetsTimelineUserIdParams struct {
	Cursor        *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	XSESSIONTOKEN string  `json:"X-SESSION-TOKEN"`
}

// GetV1ApiTweetsUserIdParams defines parameters for GetV1ApiTweetsUserId.
type GetV1ApiTweetsUserIdParams struct {
	Cursor        *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	XSESSIONTOKEN string  `json:"X-SESSION-TOKEN"`
}

// GetV1ApiTweetsUserIdTweetIdParams defines parameters for GetV1ApiTweetsUserIdTweetId.
type GetV1ApiTweetsUserIdTweetIdParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiUsersParams defines parameters for GetV1ApiUsers.
type GetV1ApiUsersParams struct {
	Cursor        *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	XSESSIONTOKEN string  `json:"X-SESSION-TOKEN"`
}

// PostV1ApiUsersParams defines parameters for PostV1ApiUsers.
type PostV1ApiUsersParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiUsersFollowParams defines parameters for PostV1ApiUsersFollow.
type PostV1ApiUsersFollowParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiUsersUnfollowParams defines parameters for PostV1ApiUsersUnfollow.
type PostV1ApiUsersUnfollowParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiUsersUserIdParams defines parameters for GetV1ApiUsersUserId.
type GetV1ApiUsersUserIdParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiAuthLoginJSONRequestBody defines body for PostV1ApiAuthLogin for application/json ContentType.
type PostV1ApiAuthLoginJSONRequestBody = externalRef0.AuthRequest

// PostV1ApiChatJSONRequestBody defines body for PostV1ApiChat for application/json ContentType.
type PostV1ApiChatJSONRequestBody = externalRef0.CreateChatRequest

// PostV1ApiChatChatIdMessageJSONRequestBody defines body for PostV1ApiChatChatIdMessage for application/json ContentType.
type PostV1ApiChatChatIdMessageJSONRequestBody = externalRef0.CreateChatRequest

// PostV1ApiNodesSettingsJSONRequestBody defines body for PostV1ApiNodesSettings for application/json ContentType.
type PostV1ApiNodesSettingsJSONRequestBody = externalRef0.AddSettingRequest

// PostV1ApiTweetsJSONRequestBody defines body for PostV1ApiTweets for application/json ContentType.
type PostV1ApiTweetsJSONRequestBody = externalRef0.Tweet

// AddReplyJSONRequestBody defines body for AddReply for application/json ContentType.
type AddReplyJSONRequestBody = externalRef0.Tweet

// PostV1ApiUsersJSONRequestBody defines body for PostV1ApiUsers for application/json ContentType.
type PostV1ApiUsersJSONRequestBody = externalRef0.User

// PostV1ApiUsersFollowJSONRequestBody defines body for PostV1ApiUsersFollow for application/json ContentType.
type PostV1ApiUsersFollowJSONRequestBody = externalRef0.FollowRequest

// PostV1ApiUsersUnfollowJSONRequestBody defines body for PostV1ApiUsersUnfollow for application/json ContentType.
type PostV1ApiUsersUnfollowJSONRequestBody = externalRef0.UnfollowRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetIndex request
	GetIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStaticFile request
	GetStaticFile(ctx context.Context, file string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ApiAuthLoginWithBody request with any body
	PostV1ApiAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ApiAuthLogin(ctx context.Context, body PostV1ApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ApiAuthLogout request
	PostV1ApiAuthLogout(ctx context.Context, params *PostV1ApiAuthLogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListChats request
	ListChats(ctx context.Context, params *ListChatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ApiChatWithBody request with any body
	PostV1ApiChatWithBody(ctx context.Context, params *PostV1ApiChatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ApiChat(ctx context.Context, params *PostV1ApiChatParams, body PostV1ApiChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ApiChatWs request
	GetV1ApiChatWs(ctx context.Context, params *GetV1ApiChatWsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ApiChatChatId request
	GetV1ApiChatChatId(ctx context.Context, chatId string, params *GetV1ApiChatChatIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMessages request
	ListMessages(ctx context.Context, chatId string, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ApiChatChatIdMessageWithBody request with any body
	PostV1ApiChatChatIdMessageWithBody(ctx context.Context, chatId string, params *PostV1ApiChatChatIdMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ApiChatChatIdMessage(ctx context.Context, chatId string, params *PostV1ApiChatChatIdMessageParams, body PostV1ApiChatChatIdMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteV1ApiChatChatIdMessageMessageId request
	DeleteV1ApiChatChatIdMessageMessageId(ctx context.Context, chatId string, messageId string, params *DeleteV1ApiChatChatIdMessageMessageIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ApiChatChatIdMessageMessageId request
	GetV1ApiChatChatIdMessageMessageId(ctx context.Context, chatId string, messageId string, params *GetV1ApiChatChatIdMessageMessageIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ApiNodesSettings request
	GetV1ApiNodesSettings(ctx context.Context, params *GetV1ApiNodesSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ApiNodesSettingsWithBody request with any body
	PostV1ApiNodesSettingsWithBody(ctx context.Context, params *PostV1ApiNodesSettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ApiNodesSettings(ctx context.Context, params *PostV1ApiNodesSettingsParams, body PostV1ApiNodesSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ApiTweetsWithBody request with any body
	PostV1ApiTweetsWithBody(ctx context.Context, params *PostV1ApiTweetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ApiTweets(ctx context.Context, params *PostV1ApiTweetsParams, body PostV1ApiTweetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddReplyWithBody request with any body
	AddReplyWithBody(ctx context.Context, params *AddReplyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddReply(ctx context.Context, params *AddReplyParams, body AddReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllReplies request
	GetAllReplies(ctx context.Context, rootTweetId string, parentReplyId string, params *GetAllRepliesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSingleReply request
	GetSingleReply(ctx context.Context, rootTweetId string, parentReplyId string, replyId string, params *GetSingleReplyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ApiTweetsTimelineUserId request
	GetV1ApiTweetsTimelineUserId(ctx context.Context, userId string, params *GetV1ApiTweetsTimelineUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ApiTweetsUserId request
	GetV1ApiTweetsUserId(ctx context.Context, userId string, params *GetV1ApiTweetsUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ApiTweetsUserIdTweetId request
	GetV1ApiTweetsUserIdTweetId(ctx context.Context, userId string, tweetId string, params *GetV1ApiTweetsUserIdTweetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ApiUsers request
	GetV1ApiUsers(ctx context.Context, params *GetV1ApiUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ApiUsersWithBody request with any body
	PostV1ApiUsersWithBody(ctx context.Context, params *PostV1ApiUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ApiUsers(ctx context.Context, params *PostV1ApiUsersParams, body PostV1ApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ApiUsersFollowWithBody request with any body
	PostV1ApiUsersFollowWithBody(ctx context.Context, params *PostV1ApiUsersFollowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ApiUsersFollow(ctx context.Context, params *PostV1ApiUsersFollowParams, body PostV1ApiUsersFollowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostV1ApiUsersUnfollowWithBody request with any body
	PostV1ApiUsersUnfollowWithBody(ctx context.Context, params *PostV1ApiUsersUnfollowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostV1ApiUsersUnfollow(ctx context.Context, params *PostV1ApiUsersUnfollowParams, body PostV1ApiUsersUnfollowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1ApiUsersUserId request
	GetV1ApiUsersUserId(ctx context.Context, userId string, params *GetV1ApiUsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetIndex(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndexRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStaticFile(ctx context.Context, file string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStaticFileRequest(c.Server, file)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiAuthLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiAuthLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiAuthLogin(ctx context.Context, body PostV1ApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiAuthLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiAuthLogout(ctx context.Context, params *PostV1ApiAuthLogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiAuthLogoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListChats(ctx context.Context, params *ListChatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListChatsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiChatWithBody(ctx context.Context, params *PostV1ApiChatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiChatRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiChat(ctx context.Context, params *PostV1ApiChatParams, body PostV1ApiChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiChatRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ApiChatWs(ctx context.Context, params *GetV1ApiChatWsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ApiChatWsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ApiChatChatId(ctx context.Context, chatId string, params *GetV1ApiChatChatIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ApiChatChatIdRequest(c.Server, chatId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMessages(ctx context.Context, chatId string, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMessagesRequest(c.Server, chatId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiChatChatIdMessageWithBody(ctx context.Context, chatId string, params *PostV1ApiChatChatIdMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiChatChatIdMessageRequestWithBody(c.Server, chatId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiChatChatIdMessage(ctx context.Context, chatId string, params *PostV1ApiChatChatIdMessageParams, body PostV1ApiChatChatIdMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiChatChatIdMessageRequest(c.Server, chatId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteV1ApiChatChatIdMessageMessageId(ctx context.Context, chatId string, messageId string, params *DeleteV1ApiChatChatIdMessageMessageIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteV1ApiChatChatIdMessageMessageIdRequest(c.Server, chatId, messageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ApiChatChatIdMessageMessageId(ctx context.Context, chatId string, messageId string, params *GetV1ApiChatChatIdMessageMessageIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ApiChatChatIdMessageMessageIdRequest(c.Server, chatId, messageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ApiNodesSettings(ctx context.Context, params *GetV1ApiNodesSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ApiNodesSettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiNodesSettingsWithBody(ctx context.Context, params *PostV1ApiNodesSettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiNodesSettingsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiNodesSettings(ctx context.Context, params *PostV1ApiNodesSettingsParams, body PostV1ApiNodesSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiNodesSettingsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiTweetsWithBody(ctx context.Context, params *PostV1ApiTweetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiTweetsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiTweets(ctx context.Context, params *PostV1ApiTweetsParams, body PostV1ApiTweetsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiTweetsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddReplyWithBody(ctx context.Context, params *AddReplyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddReplyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddReply(ctx context.Context, params *AddReplyParams, body AddReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddReplyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllReplies(ctx context.Context, rootTweetId string, parentReplyId string, params *GetAllRepliesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllRepliesRequest(c.Server, rootTweetId, parentReplyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSingleReply(ctx context.Context, rootTweetId string, parentReplyId string, replyId string, params *GetSingleReplyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSingleReplyRequest(c.Server, rootTweetId, parentReplyId, replyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ApiTweetsTimelineUserId(ctx context.Context, userId string, params *GetV1ApiTweetsTimelineUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ApiTweetsTimelineUserIdRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ApiTweetsUserId(ctx context.Context, userId string, params *GetV1ApiTweetsUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ApiTweetsUserIdRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ApiTweetsUserIdTweetId(ctx context.Context, userId string, tweetId string, params *GetV1ApiTweetsUserIdTweetIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ApiTweetsUserIdTweetIdRequest(c.Server, userId, tweetId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ApiUsers(ctx context.Context, params *GetV1ApiUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ApiUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiUsersWithBody(ctx context.Context, params *PostV1ApiUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiUsersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiUsers(ctx context.Context, params *PostV1ApiUsersParams, body PostV1ApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiUsersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiUsersFollowWithBody(ctx context.Context, params *PostV1ApiUsersFollowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiUsersFollowRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiUsersFollow(ctx context.Context, params *PostV1ApiUsersFollowParams, body PostV1ApiUsersFollowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiUsersFollowRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiUsersUnfollowWithBody(ctx context.Context, params *PostV1ApiUsersUnfollowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiUsersUnfollowRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostV1ApiUsersUnfollow(ctx context.Context, params *PostV1ApiUsersUnfollowParams, body PostV1ApiUsersUnfollowJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostV1ApiUsersUnfollowRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1ApiUsersUserId(ctx context.Context, userId string, params *GetV1ApiUsersUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1ApiUsersUserIdRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetIndexRequest generates requests for GetIndex
func NewGetIndexRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStaticFileRequest generates requests for GetStaticFile
func NewGetStaticFileRequest(server string, file string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "file", runtime.ParamLocationPath, file)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/static/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostV1ApiAuthLoginRequest calls the generic PostV1ApiAuthLogin builder with application/json body
func NewPostV1ApiAuthLoginRequest(server string, body PostV1ApiAuthLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ApiAuthLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPostV1ApiAuthLoginRequestWithBody generates requests for PostV1ApiAuthLogin with any type of body
func NewPostV1ApiAuthLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostV1ApiAuthLogoutRequest generates requests for PostV1ApiAuthLogout
func NewPostV1ApiAuthLogoutRequest(server string, params *PostV1ApiAuthLogoutParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/auth/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewListChatsRequest generates requests for ListChats
func NewListChatsRequest(server string, params *ListChatsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/chat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewPostV1ApiChatRequest calls the generic PostV1ApiChat builder with application/json body
func NewPostV1ApiChatRequest(server string, params *PostV1ApiChatParams, body PostV1ApiChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ApiChatRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1ApiChatRequestWithBody generates requests for PostV1ApiChat with any type of body
func NewPostV1ApiChatRequestWithBody(server string, params *PostV1ApiChatParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/chat")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetV1ApiChatWsRequest generates requests for GetV1ApiChatWs
func NewGetV1ApiChatWsRequest(server string, params *GetV1ApiChatWsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/chat/ws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetV1ApiChatChatIdRequest generates requests for GetV1ApiChatChatId
func NewGetV1ApiChatChatIdRequest(server string, chatId string, params *GetV1ApiChatChatIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "chat_id", runtime.ParamLocationPath, chatId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/chat/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewListMessagesRequest generates requests for ListMessages
func NewListMessagesRequest(server string, chatId string, params *ListMessagesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "chat_id", runtime.ParamLocationPath, chatId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/chat/%s/message", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewPostV1ApiChatChatIdMessageRequest calls the generic PostV1ApiChatChatIdMessage builder with application/json body
func NewPostV1ApiChatChatIdMessageRequest(server string, chatId string, params *PostV1ApiChatChatIdMessageParams, body PostV1ApiChatChatIdMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ApiChatChatIdMessageRequestWithBody(server, chatId, params, "application/json", bodyReader)
}

// NewPostV1ApiChatChatIdMessageRequestWithBody generates requests for PostV1ApiChatChatIdMessage with any type of body
func NewPostV1ApiChatChatIdMessageRequestWithBody(server string, chatId string, params *PostV1ApiChatChatIdMessageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "chat_id", runtime.ParamLocationPath, chatId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/chat/%s/message", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewDeleteV1ApiChatChatIdMessageMessageIdRequest generates requests for DeleteV1ApiChatChatIdMessageMessageId
func NewDeleteV1ApiChatChatIdMessageMessageIdRequest(server string, chatId string, messageId string, params *DeleteV1ApiChatChatIdMessageMessageIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "chat_id", runtime.ParamLocationPath, chatId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "message_id", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/chat/%s/message/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetV1ApiChatChatIdMessageMessageIdRequest generates requests for GetV1ApiChatChatIdMessageMessageId
func NewGetV1ApiChatChatIdMessageMessageIdRequest(server string, chatId string, messageId string, params *GetV1ApiChatChatIdMessageMessageIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "chat_id", runtime.ParamLocationPath, chatId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "message_id", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/chat/%s/message/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetV1ApiNodesSettingsRequest generates requests for GetV1ApiNodesSettings
func NewGetV1ApiNodesSettingsRequest(server string, params *GetV1ApiNodesSettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/nodes/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewPostV1ApiNodesSettingsRequest calls the generic PostV1ApiNodesSettings builder with application/json body
func NewPostV1ApiNodesSettingsRequest(server string, params *PostV1ApiNodesSettingsParams, body PostV1ApiNodesSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ApiNodesSettingsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1ApiNodesSettingsRequestWithBody generates requests for PostV1ApiNodesSettings with any type of body
func NewPostV1ApiNodesSettingsRequestWithBody(server string, params *PostV1ApiNodesSettingsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/nodes/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewPostV1ApiTweetsRequest calls the generic PostV1ApiTweets builder with application/json body
func NewPostV1ApiTweetsRequest(server string, params *PostV1ApiTweetsParams, body PostV1ApiTweetsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ApiTweetsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1ApiTweetsRequestWithBody generates requests for PostV1ApiTweets with any type of body
func NewPostV1ApiTweetsRequestWithBody(server string, params *PostV1ApiTweetsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/tweets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewAddReplyRequest calls the generic AddReply builder with application/json body
func NewAddReplyRequest(server string, params *AddReplyParams, body AddReplyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddReplyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddReplyRequestWithBody generates requests for AddReply with any type of body
func NewAddReplyRequestWithBody(server string, params *AddReplyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/tweets/replies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetAllRepliesRequest generates requests for GetAllReplies
func NewGetAllRepliesRequest(server string, rootTweetId string, parentReplyId string, params *GetAllRepliesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "root_tweet_id", runtime.ParamLocationPath, rootTweetId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parent_reply_id", runtime.ParamLocationPath, parentReplyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/tweets/replies/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetSingleReplyRequest generates requests for GetSingleReply
func NewGetSingleReplyRequest(server string, rootTweetId string, parentReplyId string, replyId string, params *GetSingleReplyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "root_tweet_id", runtime.ParamLocationPath, rootTweetId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "parent_reply_id", runtime.ParamLocationPath, parentReplyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "reply_id", runtime.ParamLocationPath, replyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/tweets/replies/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetV1ApiTweetsTimelineUserIdRequest generates requests for GetV1ApiTweetsTimelineUserId
func NewGetV1ApiTweetsTimelineUserIdRequest(server string, userId string, params *GetV1ApiTweetsTimelineUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/tweets/timeline/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetV1ApiTweetsUserIdRequest generates requests for GetV1ApiTweetsUserId
func NewGetV1ApiTweetsUserIdRequest(server string, userId string, params *GetV1ApiTweetsUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/tweets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetV1ApiTweetsUserIdTweetIdRequest generates requests for GetV1ApiTweetsUserIdTweetId
func NewGetV1ApiTweetsUserIdTweetIdRequest(server string, userId string, tweetId string, params *GetV1ApiTweetsUserIdTweetIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tweet_id", runtime.ParamLocationPath, tweetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/tweets/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetV1ApiUsersRequest generates requests for GetV1ApiUsers
func NewGetV1ApiUsersRequest(server string, params *GetV1ApiUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewPostV1ApiUsersRequest calls the generic PostV1ApiUsers builder with application/json body
func NewPostV1ApiUsersRequest(server string, params *PostV1ApiUsersParams, body PostV1ApiUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ApiUsersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1ApiUsersRequestWithBody generates requests for PostV1ApiUsers with any type of body
func NewPostV1ApiUsersRequestWithBody(server string, params *PostV1ApiUsersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewPostV1ApiUsersFollowRequest calls the generic PostV1ApiUsersFollow builder with application/json body
func NewPostV1ApiUsersFollowRequest(server string, params *PostV1ApiUsersFollowParams, body PostV1ApiUsersFollowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ApiUsersFollowRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1ApiUsersFollowRequestWithBody generates requests for PostV1ApiUsersFollow with any type of body
func NewPostV1ApiUsersFollowRequestWithBody(server string, params *PostV1ApiUsersFollowParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/users/follow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewPostV1ApiUsersUnfollowRequest calls the generic PostV1ApiUsersUnfollow builder with application/json body
func NewPostV1ApiUsersUnfollowRequest(server string, params *PostV1ApiUsersUnfollowParams, body PostV1ApiUsersUnfollowJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostV1ApiUsersUnfollowRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostV1ApiUsersUnfollowRequestWithBody generates requests for PostV1ApiUsersUnfollow with any type of body
func NewPostV1ApiUsersUnfollowRequestWithBody(server string, params *PostV1ApiUsersUnfollowParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/users/unfollow")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

// NewGetV1ApiUsersUserIdRequest generates requests for GetV1ApiUsersUserId
func NewGetV1ApiUsersUserIdRequest(server string, userId string, params *GetV1ApiUsersUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/api/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-SESSION-TOKEN", runtime.ParamLocationHeader, params.XSESSIONTOKEN)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-SESSION-TOKEN", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetIndexWithResponse request
	GetIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndexResponse, error)

	// GetStaticFileWithResponse request
	GetStaticFileWithResponse(ctx context.Context, file string, reqEditors ...RequestEditorFn) (*GetStaticFileResponse, error)

	// PostV1ApiAuthLoginWithBodyWithResponse request with any body
	PostV1ApiAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiAuthLoginResponse, error)

	PostV1ApiAuthLoginWithResponse(ctx context.Context, body PostV1ApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiAuthLoginResponse, error)

	// PostV1ApiAuthLogoutWithResponse request
	PostV1ApiAuthLogoutWithResponse(ctx context.Context, params *PostV1ApiAuthLogoutParams, reqEditors ...RequestEditorFn) (*PostV1ApiAuthLogoutResponse, error)

	// ListChatsWithResponse request
	ListChatsWithResponse(ctx context.Context, params *ListChatsParams, reqEditors ...RequestEditorFn) (*ListChatsResponse, error)

	// PostV1ApiChatWithBodyWithResponse request with any body
	PostV1ApiChatWithBodyWithResponse(ctx context.Context, params *PostV1ApiChatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiChatResponse, error)

	PostV1ApiChatWithResponse(ctx context.Context, params *PostV1ApiChatParams, body PostV1ApiChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiChatResponse, error)

	// GetV1ApiChatWsWithResponse request
	GetV1ApiChatWsWithResponse(ctx context.Context, params *GetV1ApiChatWsParams, reqEditors ...RequestEditorFn) (*GetV1ApiChatWsResponse, error)

	// GetV1ApiChatChatIdWithResponse request
	GetV1ApiChatChatIdWithResponse(ctx context.Context, chatId string, params *GetV1ApiChatChatIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiChatChatIdResponse, error)

	// ListMessagesWithResponse request
	ListMessagesWithResponse(ctx context.Context, chatId string, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*ListMessagesResponse, error)

	// PostV1ApiChatChatIdMessageWithBodyWithResponse request with any body
	PostV1ApiChatChatIdMessageWithBodyWithResponse(ctx context.Context, chatId string, params *PostV1ApiChatChatIdMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiChatChatIdMessageResponse, error)

	PostV1ApiChatChatIdMessageWithResponse(ctx context.Context, chatId string, params *PostV1ApiChatChatIdMessageParams, body PostV1ApiChatChatIdMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiChatChatIdMessageResponse, error)

	// DeleteV1ApiChatChatIdMessageMessageIdWithResponse request
	DeleteV1ApiChatChatIdMessageMessageIdWithResponse(ctx context.Context, chatId string, messageId string, params *DeleteV1ApiChatChatIdMessageMessageIdParams, reqEditors ...RequestEditorFn) (*DeleteV1ApiChatChatIdMessageMessageIdResponse, error)

	// GetV1ApiChatChatIdMessageMessageIdWithResponse request
	GetV1ApiChatChatIdMessageMessageIdWithResponse(ctx context.Context, chatId string, messageId string, params *GetV1ApiChatChatIdMessageMessageIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiChatChatIdMessageMessageIdResponse, error)

	// GetV1ApiNodesSettingsWithResponse request
	GetV1ApiNodesSettingsWithResponse(ctx context.Context, params *GetV1ApiNodesSettingsParams, reqEditors ...RequestEditorFn) (*GetV1ApiNodesSettingsResponse, error)

	// PostV1ApiNodesSettingsWithBodyWithResponse request with any body
	PostV1ApiNodesSettingsWithBodyWithResponse(ctx context.Context, params *PostV1ApiNodesSettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiNodesSettingsResponse, error)

	PostV1ApiNodesSettingsWithResponse(ctx context.Context, params *PostV1ApiNodesSettingsParams, body PostV1ApiNodesSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiNodesSettingsResponse, error)

	// PostV1ApiTweetsWithBodyWithResponse request with any body
	PostV1ApiTweetsWithBodyWithResponse(ctx context.Context, params *PostV1ApiTweetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiTweetsResponse, error)

	PostV1ApiTweetsWithResponse(ctx context.Context, params *PostV1ApiTweetsParams, body PostV1ApiTweetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiTweetsResponse, error)

	// AddReplyWithBodyWithResponse request with any body
	AddReplyWithBodyWithResponse(ctx context.Context, params *AddReplyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddReplyResponse, error)

	AddReplyWithResponse(ctx context.Context, params *AddReplyParams, body AddReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddReplyResponse, error)

	// GetAllRepliesWithResponse request
	GetAllRepliesWithResponse(ctx context.Context, rootTweetId string, parentReplyId string, params *GetAllRepliesParams, reqEditors ...RequestEditorFn) (*GetAllRepliesResponse, error)

	// GetSingleReplyWithResponse request
	GetSingleReplyWithResponse(ctx context.Context, rootTweetId string, parentReplyId string, replyId string, params *GetSingleReplyParams, reqEditors ...RequestEditorFn) (*GetSingleReplyResponse, error)

	// GetV1ApiTweetsTimelineUserIdWithResponse request
	GetV1ApiTweetsTimelineUserIdWithResponse(ctx context.Context, userId string, params *GetV1ApiTweetsTimelineUserIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiTweetsTimelineUserIdResponse, error)

	// GetV1ApiTweetsUserIdWithResponse request
	GetV1ApiTweetsUserIdWithResponse(ctx context.Context, userId string, params *GetV1ApiTweetsUserIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiTweetsUserIdResponse, error)

	// GetV1ApiTweetsUserIdTweetIdWithResponse request
	GetV1ApiTweetsUserIdTweetIdWithResponse(ctx context.Context, userId string, tweetId string, params *GetV1ApiTweetsUserIdTweetIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiTweetsUserIdTweetIdResponse, error)

	// GetV1ApiUsersWithResponse request
	GetV1ApiUsersWithResponse(ctx context.Context, params *GetV1ApiUsersParams, reqEditors ...RequestEditorFn) (*GetV1ApiUsersResponse, error)

	// PostV1ApiUsersWithBodyWithResponse request with any body
	PostV1ApiUsersWithBodyWithResponse(ctx context.Context, params *PostV1ApiUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiUsersResponse, error)

	PostV1ApiUsersWithResponse(ctx context.Context, params *PostV1ApiUsersParams, body PostV1ApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiUsersResponse, error)

	// PostV1ApiUsersFollowWithBodyWithResponse request with any body
	PostV1ApiUsersFollowWithBodyWithResponse(ctx context.Context, params *PostV1ApiUsersFollowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiUsersFollowResponse, error)

	PostV1ApiUsersFollowWithResponse(ctx context.Context, params *PostV1ApiUsersFollowParams, body PostV1ApiUsersFollowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiUsersFollowResponse, error)

	// PostV1ApiUsersUnfollowWithBodyWithResponse request with any body
	PostV1ApiUsersUnfollowWithBodyWithResponse(ctx context.Context, params *PostV1ApiUsersUnfollowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiUsersUnfollowResponse, error)

	PostV1ApiUsersUnfollowWithResponse(ctx context.Context, params *PostV1ApiUsersUnfollowParams, body PostV1ApiUsersUnfollowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiUsersUnfollowResponse, error)

	// GetV1ApiUsersUserIdWithResponse request
	GetV1ApiUsersUserIdWithResponse(ctx context.Context, userId string, params *GetV1ApiUsersUserIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiUsersUserIdResponse, error)
}

type GetIndexResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetIndexResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndexResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStaticFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetStaticFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStaticFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ApiAuthLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.User
}

// Status returns HTTPResponse.Status
func (r PostV1ApiAuthLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ApiAuthLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ApiAuthLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1ApiAuthLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ApiAuthLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListChatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ChatsResponse
}

// Status returns HTTPResponse.Status
func (r ListChatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListChatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ApiChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1ApiChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ApiChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ApiChatWsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1ApiChatWsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ApiChatWsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ApiChatChatIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Chat
}

// Status returns HTTPResponse.Status
func (r GetV1ApiChatChatIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ApiChatChatIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.MessagesResponse
}

// Status returns HTTPResponse.Status
func (r ListMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ApiChatChatIdMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1ApiChatChatIdMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ApiChatChatIdMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteV1ApiChatChatIdMessageMessageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteV1ApiChatChatIdMessageMessageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteV1ApiChatChatIdMessageMessageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ApiChatChatIdMessageMessageIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.ChatMessage
}

// Status returns HTTPResponse.Status
func (r GetV1ApiChatChatIdMessageMessageIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ApiChatChatIdMessageMessageIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ApiNodesSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1ApiNodesSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ApiNodesSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ApiNodesSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1ApiNodesSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ApiNodesSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ApiTweetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Tweet
}

// Status returns HTTPResponse.Status
func (r PostV1ApiTweetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ApiTweetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddReplyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.Tweet
}

// Status returns HTTPResponse.Status
func (r AddReplyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddReplyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllRepliesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetAllRepliesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllRepliesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSingleReplyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSingleReplyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSingleReplyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ApiTweetsTimelineUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.TweetsResponse
}

// Status returns HTTPResponse.Status
func (r GetV1ApiTweetsTimelineUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ApiTweetsTimelineUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ApiTweetsUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.TweetsResponse
}

// Status returns HTTPResponse.Status
func (r GetV1ApiTweetsUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ApiTweetsUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ApiTweetsUserIdTweetIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetV1ApiTweetsUserIdTweetIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ApiTweetsUserIdTweetIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ApiUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.UsersResponse
}

// Status returns HTTPResponse.Status
func (r GetV1ApiUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ApiUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ApiUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.User
}

// Status returns HTTPResponse.Status
func (r PostV1ApiUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ApiUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ApiUsersFollowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1ApiUsersFollowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ApiUsersFollowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostV1ApiUsersUnfollowResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostV1ApiUsersUnfollowResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostV1ApiUsersUnfollowResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1ApiUsersUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.User
}

// Status returns HTTPResponse.Status
func (r GetV1ApiUsersUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1ApiUsersUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetIndexWithResponse request returning *GetIndexResponse
func (c *ClientWithResponses) GetIndexWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndexResponse, error) {
	rsp, err := c.GetIndex(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndexResponse(rsp)
}

// GetStaticFileWithResponse request returning *GetStaticFileResponse
func (c *ClientWithResponses) GetStaticFileWithResponse(ctx context.Context, file string, reqEditors ...RequestEditorFn) (*GetStaticFileResponse, error) {
	rsp, err := c.GetStaticFile(ctx, file, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStaticFileResponse(rsp)
}

// PostV1ApiAuthLoginWithBodyWithResponse request with arbitrary body returning *PostV1ApiAuthLoginResponse
func (c *ClientWithResponses) PostV1ApiAuthLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiAuthLoginResponse, error) {
	rsp, err := c.PostV1ApiAuthLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiAuthLoginResponse(rsp)
}

func (c *ClientWithResponses) PostV1ApiAuthLoginWithResponse(ctx context.Context, body PostV1ApiAuthLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiAuthLoginResponse, error) {
	rsp, err := c.PostV1ApiAuthLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiAuthLoginResponse(rsp)
}

// PostV1ApiAuthLogoutWithResponse request returning *PostV1ApiAuthLogoutResponse
func (c *ClientWithResponses) PostV1ApiAuthLogoutWithResponse(ctx context.Context, params *PostV1ApiAuthLogoutParams, reqEditors ...RequestEditorFn) (*PostV1ApiAuthLogoutResponse, error) {
	rsp, err := c.PostV1ApiAuthLogout(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiAuthLogoutResponse(rsp)
}

// ListChatsWithResponse request returning *ListChatsResponse
func (c *ClientWithResponses) ListChatsWithResponse(ctx context.Context, params *ListChatsParams, reqEditors ...RequestEditorFn) (*ListChatsResponse, error) {
	rsp, err := c.ListChats(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListChatsResponse(rsp)
}

// PostV1ApiChatWithBodyWithResponse request with arbitrary body returning *PostV1ApiChatResponse
func (c *ClientWithResponses) PostV1ApiChatWithBodyWithResponse(ctx context.Context, params *PostV1ApiChatParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiChatResponse, error) {
	rsp, err := c.PostV1ApiChatWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiChatResponse(rsp)
}

func (c *ClientWithResponses) PostV1ApiChatWithResponse(ctx context.Context, params *PostV1ApiChatParams, body PostV1ApiChatJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiChatResponse, error) {
	rsp, err := c.PostV1ApiChat(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiChatResponse(rsp)
}

// GetV1ApiChatWsWithResponse request returning *GetV1ApiChatWsResponse
func (c *ClientWithResponses) GetV1ApiChatWsWithResponse(ctx context.Context, params *GetV1ApiChatWsParams, reqEditors ...RequestEditorFn) (*GetV1ApiChatWsResponse, error) {
	rsp, err := c.GetV1ApiChatWs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ApiChatWsResponse(rsp)
}

// GetV1ApiChatChatIdWithResponse request returning *GetV1ApiChatChatIdResponse
func (c *ClientWithResponses) GetV1ApiChatChatIdWithResponse(ctx context.Context, chatId string, params *GetV1ApiChatChatIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiChatChatIdResponse, error) {
	rsp, err := c.GetV1ApiChatChatId(ctx, chatId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ApiChatChatIdResponse(rsp)
}

// ListMessagesWithResponse request returning *ListMessagesResponse
func (c *ClientWithResponses) ListMessagesWithResponse(ctx context.Context, chatId string, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*ListMessagesResponse, error) {
	rsp, err := c.ListMessages(ctx, chatId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMessagesResponse(rsp)
}

// PostV1ApiChatChatIdMessageWithBodyWithResponse request with arbitrary body returning *PostV1ApiChatChatIdMessageResponse
func (c *ClientWithResponses) PostV1ApiChatChatIdMessageWithBodyWithResponse(ctx context.Context, chatId string, params *PostV1ApiChatChatIdMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiChatChatIdMessageResponse, error) {
	rsp, err := c.PostV1ApiChatChatIdMessageWithBody(ctx, chatId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiChatChatIdMessageResponse(rsp)
}

func (c *ClientWithResponses) PostV1ApiChatChatIdMessageWithResponse(ctx context.Context, chatId string, params *PostV1ApiChatChatIdMessageParams, body PostV1ApiChatChatIdMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiChatChatIdMessageResponse, error) {
	rsp, err := c.PostV1ApiChatChatIdMessage(ctx, chatId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiChatChatIdMessageResponse(rsp)
}

// DeleteV1ApiChatChatIdMessageMessageIdWithResponse request returning *DeleteV1ApiChatChatIdMessageMessageIdResponse
func (c *ClientWithResponses) DeleteV1ApiChatChatIdMessageMessageIdWithResponse(ctx context.Context, chatId string, messageId string, params *DeleteV1ApiChatChatIdMessageMessageIdParams, reqEditors ...RequestEditorFn) (*DeleteV1ApiChatChatIdMessageMessageIdResponse, error) {
	rsp, err := c.DeleteV1ApiChatChatIdMessageMessageId(ctx, chatId, messageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteV1ApiChatChatIdMessageMessageIdResponse(rsp)
}

// GetV1ApiChatChatIdMessageMessageIdWithResponse request returning *GetV1ApiChatChatIdMessageMessageIdResponse
func (c *ClientWithResponses) GetV1ApiChatChatIdMessageMessageIdWithResponse(ctx context.Context, chatId string, messageId string, params *GetV1ApiChatChatIdMessageMessageIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiChatChatIdMessageMessageIdResponse, error) {
	rsp, err := c.GetV1ApiChatChatIdMessageMessageId(ctx, chatId, messageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ApiChatChatIdMessageMessageIdResponse(rsp)
}

// GetV1ApiNodesSettingsWithResponse request returning *GetV1ApiNodesSettingsResponse
func (c *ClientWithResponses) GetV1ApiNodesSettingsWithResponse(ctx context.Context, params *GetV1ApiNodesSettingsParams, reqEditors ...RequestEditorFn) (*GetV1ApiNodesSettingsResponse, error) {
	rsp, err := c.GetV1ApiNodesSettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ApiNodesSettingsResponse(rsp)
}

// PostV1ApiNodesSettingsWithBodyWithResponse request with arbitrary body returning *PostV1ApiNodesSettingsResponse
func (c *ClientWithResponses) PostV1ApiNodesSettingsWithBodyWithResponse(ctx context.Context, params *PostV1ApiNodesSettingsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiNodesSettingsResponse, error) {
	rsp, err := c.PostV1ApiNodesSettingsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiNodesSettingsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ApiNodesSettingsWithResponse(ctx context.Context, params *PostV1ApiNodesSettingsParams, body PostV1ApiNodesSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiNodesSettingsResponse, error) {
	rsp, err := c.PostV1ApiNodesSettings(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiNodesSettingsResponse(rsp)
}

// PostV1ApiTweetsWithBodyWithResponse request with arbitrary body returning *PostV1ApiTweetsResponse
func (c *ClientWithResponses) PostV1ApiTweetsWithBodyWithResponse(ctx context.Context, params *PostV1ApiTweetsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiTweetsResponse, error) {
	rsp, err := c.PostV1ApiTweetsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiTweetsResponse(rsp)
}

func (c *ClientWithResponses) PostV1ApiTweetsWithResponse(ctx context.Context, params *PostV1ApiTweetsParams, body PostV1ApiTweetsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiTweetsResponse, error) {
	rsp, err := c.PostV1ApiTweets(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiTweetsResponse(rsp)
}

// AddReplyWithBodyWithResponse request with arbitrary body returning *AddReplyResponse
func (c *ClientWithResponses) AddReplyWithBodyWithResponse(ctx context.Context, params *AddReplyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddReplyResponse, error) {
	rsp, err := c.AddReplyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddReplyResponse(rsp)
}

func (c *ClientWithResponses) AddReplyWithResponse(ctx context.Context, params *AddReplyParams, body AddReplyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddReplyResponse, error) {
	rsp, err := c.AddReply(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddReplyResponse(rsp)
}

// GetAllRepliesWithResponse request returning *GetAllRepliesResponse
func (c *ClientWithResponses) GetAllRepliesWithResponse(ctx context.Context, rootTweetId string, parentReplyId string, params *GetAllRepliesParams, reqEditors ...RequestEditorFn) (*GetAllRepliesResponse, error) {
	rsp, err := c.GetAllReplies(ctx, rootTweetId, parentReplyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllRepliesResponse(rsp)
}

// GetSingleReplyWithResponse request returning *GetSingleReplyResponse
func (c *ClientWithResponses) GetSingleReplyWithResponse(ctx context.Context, rootTweetId string, parentReplyId string, replyId string, params *GetSingleReplyParams, reqEditors ...RequestEditorFn) (*GetSingleReplyResponse, error) {
	rsp, err := c.GetSingleReply(ctx, rootTweetId, parentReplyId, replyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSingleReplyResponse(rsp)
}

// GetV1ApiTweetsTimelineUserIdWithResponse request returning *GetV1ApiTweetsTimelineUserIdResponse
func (c *ClientWithResponses) GetV1ApiTweetsTimelineUserIdWithResponse(ctx context.Context, userId string, params *GetV1ApiTweetsTimelineUserIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiTweetsTimelineUserIdResponse, error) {
	rsp, err := c.GetV1ApiTweetsTimelineUserId(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ApiTweetsTimelineUserIdResponse(rsp)
}

// GetV1ApiTweetsUserIdWithResponse request returning *GetV1ApiTweetsUserIdResponse
func (c *ClientWithResponses) GetV1ApiTweetsUserIdWithResponse(ctx context.Context, userId string, params *GetV1ApiTweetsUserIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiTweetsUserIdResponse, error) {
	rsp, err := c.GetV1ApiTweetsUserId(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ApiTweetsUserIdResponse(rsp)
}

// GetV1ApiTweetsUserIdTweetIdWithResponse request returning *GetV1ApiTweetsUserIdTweetIdResponse
func (c *ClientWithResponses) GetV1ApiTweetsUserIdTweetIdWithResponse(ctx context.Context, userId string, tweetId string, params *GetV1ApiTweetsUserIdTweetIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiTweetsUserIdTweetIdResponse, error) {
	rsp, err := c.GetV1ApiTweetsUserIdTweetId(ctx, userId, tweetId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ApiTweetsUserIdTweetIdResponse(rsp)
}

// GetV1ApiUsersWithResponse request returning *GetV1ApiUsersResponse
func (c *ClientWithResponses) GetV1ApiUsersWithResponse(ctx context.Context, params *GetV1ApiUsersParams, reqEditors ...RequestEditorFn) (*GetV1ApiUsersResponse, error) {
	rsp, err := c.GetV1ApiUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ApiUsersResponse(rsp)
}

// PostV1ApiUsersWithBodyWithResponse request with arbitrary body returning *PostV1ApiUsersResponse
func (c *ClientWithResponses) PostV1ApiUsersWithBodyWithResponse(ctx context.Context, params *PostV1ApiUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiUsersResponse, error) {
	rsp, err := c.PostV1ApiUsersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiUsersResponse(rsp)
}

func (c *ClientWithResponses) PostV1ApiUsersWithResponse(ctx context.Context, params *PostV1ApiUsersParams, body PostV1ApiUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiUsersResponse, error) {
	rsp, err := c.PostV1ApiUsers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiUsersResponse(rsp)
}

// PostV1ApiUsersFollowWithBodyWithResponse request with arbitrary body returning *PostV1ApiUsersFollowResponse
func (c *ClientWithResponses) PostV1ApiUsersFollowWithBodyWithResponse(ctx context.Context, params *PostV1ApiUsersFollowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiUsersFollowResponse, error) {
	rsp, err := c.PostV1ApiUsersFollowWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiUsersFollowResponse(rsp)
}

func (c *ClientWithResponses) PostV1ApiUsersFollowWithResponse(ctx context.Context, params *PostV1ApiUsersFollowParams, body PostV1ApiUsersFollowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiUsersFollowResponse, error) {
	rsp, err := c.PostV1ApiUsersFollow(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiUsersFollowResponse(rsp)
}

// PostV1ApiUsersUnfollowWithBodyWithResponse request with arbitrary body returning *PostV1ApiUsersUnfollowResponse
func (c *ClientWithResponses) PostV1ApiUsersUnfollowWithBodyWithResponse(ctx context.Context, params *PostV1ApiUsersUnfollowParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1ApiUsersUnfollowResponse, error) {
	rsp, err := c.PostV1ApiUsersUnfollowWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiUsersUnfollowResponse(rsp)
}

func (c *ClientWithResponses) PostV1ApiUsersUnfollowWithResponse(ctx context.Context, params *PostV1ApiUsersUnfollowParams, body PostV1ApiUsersUnfollowJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1ApiUsersUnfollowResponse, error) {
	rsp, err := c.PostV1ApiUsersUnfollow(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostV1ApiUsersUnfollowResponse(rsp)
}

// GetV1ApiUsersUserIdWithResponse request returning *GetV1ApiUsersUserIdResponse
func (c *ClientWithResponses) GetV1ApiUsersUserIdWithResponse(ctx context.Context, userId string, params *GetV1ApiUsersUserIdParams, reqEditors ...RequestEditorFn) (*GetV1ApiUsersUserIdResponse, error) {
	rsp, err := c.GetV1ApiUsersUserId(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1ApiUsersUserIdResponse(rsp)
}

// ParseGetIndexResponse parses an HTTP response from a GetIndexWithResponse call
func ParseGetIndexResponse(rsp *http.Response) (*GetIndexResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndexResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetStaticFileResponse parses an HTTP response from a GetStaticFileWithResponse call
func ParseGetStaticFileResponse(rsp *http.Response) (*GetStaticFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStaticFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1ApiAuthLoginResponse parses an HTTP response from a PostV1ApiAuthLoginWithResponse call
func ParsePostV1ApiAuthLoginResponse(rsp *http.Response) (*PostV1ApiAuthLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ApiAuthLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ApiAuthLogoutResponse parses an HTTP response from a PostV1ApiAuthLogoutWithResponse call
func ParsePostV1ApiAuthLogoutResponse(rsp *http.Response) (*PostV1ApiAuthLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ApiAuthLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListChatsResponse parses an HTTP response from a ListChatsWithResponse call
func ParseListChatsResponse(rsp *http.Response) (*ListChatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListChatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ChatsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ApiChatResponse parses an HTTP response from a PostV1ApiChatWithResponse call
func ParsePostV1ApiChatResponse(rsp *http.Response) (*PostV1ApiChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ApiChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ApiChatWsResponse parses an HTTP response from a GetV1ApiChatWsWithResponse call
func ParseGetV1ApiChatWsResponse(rsp *http.Response) (*GetV1ApiChatWsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ApiChatWsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ApiChatChatIdResponse parses an HTTP response from a GetV1ApiChatChatIdWithResponse call
func ParseGetV1ApiChatChatIdResponse(rsp *http.Response) (*GetV1ApiChatChatIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ApiChatChatIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Chat
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMessagesResponse parses an HTTP response from a ListMessagesWithResponse call
func ParseListMessagesResponse(rsp *http.Response) (*ListMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.MessagesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ApiChatChatIdMessageResponse parses an HTTP response from a PostV1ApiChatChatIdMessageWithResponse call
func ParsePostV1ApiChatChatIdMessageResponse(rsp *http.Response) (*PostV1ApiChatChatIdMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ApiChatChatIdMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteV1ApiChatChatIdMessageMessageIdResponse parses an HTTP response from a DeleteV1ApiChatChatIdMessageMessageIdWithResponse call
func ParseDeleteV1ApiChatChatIdMessageMessageIdResponse(rsp *http.Response) (*DeleteV1ApiChatChatIdMessageMessageIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteV1ApiChatChatIdMessageMessageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ApiChatChatIdMessageMessageIdResponse parses an HTTP response from a GetV1ApiChatChatIdMessageMessageIdWithResponse call
func ParseGetV1ApiChatChatIdMessageMessageIdResponse(rsp *http.Response) (*GetV1ApiChatChatIdMessageMessageIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ApiChatChatIdMessageMessageIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.ChatMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ApiNodesSettingsResponse parses an HTTP response from a GetV1ApiNodesSettingsWithResponse call
func ParseGetV1ApiNodesSettingsResponse(rsp *http.Response) (*GetV1ApiNodesSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ApiNodesSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1ApiNodesSettingsResponse parses an HTTP response from a PostV1ApiNodesSettingsWithResponse call
func ParsePostV1ApiNodesSettingsResponse(rsp *http.Response) (*PostV1ApiNodesSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ApiNodesSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1ApiTweetsResponse parses an HTTP response from a PostV1ApiTweetsWithResponse call
func ParsePostV1ApiTweetsResponse(rsp *http.Response) (*PostV1ApiTweetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ApiTweetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Tweet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAddReplyResponse parses an HTTP response from a AddReplyWithResponse call
func ParseAddReplyResponse(rsp *http.Response) (*AddReplyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddReplyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.Tweet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAllRepliesResponse parses an HTTP response from a GetAllRepliesWithResponse call
func ParseGetAllRepliesResponse(rsp *http.Response) (*GetAllRepliesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllRepliesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSingleReplyResponse parses an HTTP response from a GetSingleReplyWithResponse call
func ParseGetSingleReplyResponse(rsp *http.Response) (*GetSingleReplyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSingleReplyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ApiTweetsTimelineUserIdResponse parses an HTTP response from a GetV1ApiTweetsTimelineUserIdWithResponse call
func ParseGetV1ApiTweetsTimelineUserIdResponse(rsp *http.Response) (*GetV1ApiTweetsTimelineUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ApiTweetsTimelineUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.TweetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ApiTweetsUserIdResponse parses an HTTP response from a GetV1ApiTweetsUserIdWithResponse call
func ParseGetV1ApiTweetsUserIdResponse(rsp *http.Response) (*GetV1ApiTweetsUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ApiTweetsUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.TweetsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetV1ApiTweetsUserIdTweetIdResponse parses an HTTP response from a GetV1ApiTweetsUserIdTweetIdWithResponse call
func ParseGetV1ApiTweetsUserIdTweetIdResponse(rsp *http.Response) (*GetV1ApiTweetsUserIdTweetIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ApiTweetsUserIdTweetIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ApiUsersResponse parses an HTTP response from a GetV1ApiUsersWithResponse call
func ParseGetV1ApiUsersResponse(rsp *http.Response) (*GetV1ApiUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ApiUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.UsersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ApiUsersResponse parses an HTTP response from a PostV1ApiUsersWithResponse call
func ParsePostV1ApiUsersResponse(rsp *http.Response) (*PostV1ApiUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ApiUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostV1ApiUsersFollowResponse parses an HTTP response from a PostV1ApiUsersFollowWithResponse call
func ParsePostV1ApiUsersFollowResponse(rsp *http.Response) (*PostV1ApiUsersFollowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ApiUsersFollowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostV1ApiUsersUnfollowResponse parses an HTTP response from a PostV1ApiUsersUnfollowWithResponse call
func ParsePostV1ApiUsersUnfollowResponse(rsp *http.Response) (*PostV1ApiUsersUnfollowResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostV1ApiUsersUnfollowResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetV1ApiUsersUserIdResponse parses an HTTP response from a GetV1ApiUsersUserIdWithResponse call
func ParseGetV1ApiUsersUserIdResponse(rsp *http.Response) (*GetV1ApiUsersUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1ApiUsersUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve static files
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Serve static files
	// (GET /static/{file*})
	GetStaticFile(ctx echo.Context, file string) error
	// Store credentials
	// (POST /v1/api/auth/login)
	PostV1ApiAuthLogin(ctx echo.Context) error
	// Close service
	// (POST /v1/api/auth/logout)
	PostV1ApiAuthLogout(ctx echo.Context, params PostV1ApiAuthLogoutParams) error
	// Get user chats
	// (GET /v1/api/chat)
	ListChats(ctx echo.Context, params ListChatsParams) error
	// Create chat
	// (POST /v1/api/chat)
	PostV1ApiChat(ctx echo.Context, params PostV1ApiChatParams) error
	// Chat Websocket connection
	// (GET /v1/api/chat/ws)
	GetV1ApiChatWs(ctx echo.Context, params GetV1ApiChatWsParams) error
	// Get user's specific chat
	// (GET /v1/api/chat/{chat_id})
	GetV1ApiChatChatId(ctx echo.Context, chatId string, params GetV1ApiChatChatIdParams) error
	// Get user messages
	// (GET /v1/api/chat/{chat_id}/message)
	ListMessages(ctx echo.Context, chatId string, params ListMessagesParams) error
	// Create message
	// (POST /v1/api/chat/{chat_id}/message)
	PostV1ApiChatChatIdMessage(ctx echo.Context, chatId string, params PostV1ApiChatChatIdMessageParams) error
	// Delete user message
	// (DELETE /v1/api/chat/{chat_id}/message/{message_id})
	DeleteV1ApiChatChatIdMessageMessageId(ctx echo.Context, chatId string, messageId string, params DeleteV1ApiChatChatIdMessageMessageIdParams) error
	// Get user message
	// (GET /v1/api/chat/{chat_id}/message/{message_id})
	GetV1ApiChatChatIdMessageMessageId(ctx echo.Context, chatId string, messageId string, params GetV1ApiChatChatIdMessageMessageIdParams) error
	// Add setting
	// (GET /v1/api/nodes/settings)
	GetV1ApiNodesSettings(ctx echo.Context, params GetV1ApiNodesSettingsParams) error
	// Add setting
	// (POST /v1/api/nodes/settings)
	PostV1ApiNodesSettings(ctx echo.Context, params PostV1ApiNodesSettingsParams) error
	// Publish a new tweet
	// (POST /v1/api/tweets)
	PostV1ApiTweets(ctx echo.Context, params PostV1ApiTweetsParams) error
	// Publish a new reply to tweet
	// (POST /v1/api/tweets/replies)
	AddReply(ctx echo.Context, params AddReplyParams) error
	// Get all tweet's replies
	// (GET /v1/api/tweets/replies/{root_tweet_id}/{parent_reply_id})
	GetAllReplies(ctx echo.Context, rootTweetId string, parentReplyId string, params GetAllRepliesParams) error
	// Get single reply
	// (GET /v1/api/tweets/replies/{root_tweet_id}/{parent_reply_id}/{reply_id})
	GetSingleReply(ctx echo.Context, rootTweetId string, parentReplyId string, replyId string, params GetSingleReplyParams) error
	// Get user's tweet timeline
	// (GET /v1/api/tweets/timeline/{user_id})
	GetV1ApiTweetsTimelineUserId(ctx echo.Context, userId string, params GetV1ApiTweetsTimelineUserIdParams) error
	// Get user's tweets
	// (GET /v1/api/tweets/{user_id})
	GetV1ApiTweetsUserId(ctx echo.Context, userId string, params GetV1ApiTweetsUserIdParams) error
	// Get a certain tweet
	// (GET /v1/api/tweets/{user_id}/{tweet_id})
	GetV1ApiTweetsUserIdTweetId(ctx echo.Context, userId string, tweetId string, params GetV1ApiTweetsUserIdTweetIdParams) error
	// Get users list
	// (GET /v1/api/users)
	GetV1ApiUsers(ctx echo.Context, params GetV1ApiUsersParams) error
	// Create a new user
	// (POST /v1/api/users)
	PostV1ApiUsers(ctx echo.Context, params PostV1ApiUsersParams) error
	// Follow another user
	// (POST /v1/api/users/follow)
	PostV1ApiUsersFollow(ctx echo.Context, params PostV1ApiUsersFollowParams) error
	// Unfollow a user
	// (POST /v1/api/users/unfollow)
	PostV1ApiUsersUnfollow(ctx echo.Context, params PostV1ApiUsersUnfollowParams) error
	// Get user information
	// (GET /v1/api/users/{user_id})
	GetV1ApiUsersUserId(ctx echo.Context, userId string, params GetV1ApiUsersUserIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// GetStaticFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetStaticFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "file" -------------
	var file string

	err = runtime.BindStyledParameterWithOptions("simple", "file", ctx.Param("file"), &file, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStaticFile(ctx, file)
	return err
}

// PostV1ApiAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogin(ctx)
	return err
}

// PostV1ApiAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiAuthLogoutParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogout(ctx, params)
	return err
}

// ListChats converts echo context to params.
func (w *ServerInterfaceWrapper) ListChats(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListChatsParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListChats(ctx, params)
	return err
}

// PostV1ApiChat converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiChat(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiChatParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiChat(ctx, params)
	return err
}

// GetV1ApiChatWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiChatWs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiChatWsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiChatWs(ctx, params)
	return err
}

// GetV1ApiChatChatId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiChatChatId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "chat_id" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", ctx.Param("chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter chat_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiChatChatIdParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiChatChatId(ctx, chatId, params)
	return err
}

// ListMessages converts echo context to params.
func (w *ServerInterfaceWrapper) ListMessages(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "chat_id" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", ctx.Param("chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter chat_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessagesParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMessages(ctx, chatId, params)
	return err
}

// PostV1ApiChatChatIdMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiChatChatIdMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "chat_id" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", ctx.Param("chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter chat_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiChatChatIdMessageParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiChatChatIdMessage(ctx, chatId, params)
	return err
}

// DeleteV1ApiChatChatIdMessageMessageId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteV1ApiChatChatIdMessageMessageId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "chat_id" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", ctx.Param("chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter chat_id: %s", err))
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", ctx.Param("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteV1ApiChatChatIdMessageMessageIdParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteV1ApiChatChatIdMessageMessageId(ctx, chatId, messageId, params)
	return err
}

// GetV1ApiChatChatIdMessageMessageId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiChatChatIdMessageMessageId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "chat_id" -------------
	var chatId string

	err = runtime.BindStyledParameterWithOptions("simple", "chat_id", ctx.Param("chat_id"), &chatId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter chat_id: %s", err))
	}

	// ------------- Path parameter "message_id" -------------
	var messageId string

	err = runtime.BindStyledParameterWithOptions("simple", "message_id", ctx.Param("message_id"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter message_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiChatChatIdMessageMessageIdParams
	// ------------- Required query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "user_id", ctx.QueryParams(), &params.UserId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiChatChatIdMessageMessageId(ctx, chatId, messageId, params)
	return err
}

// GetV1ApiNodesSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiNodesSettings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiNodesSettingsParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiNodesSettings(ctx, params)
	return err
}

// PostV1ApiNodesSettings converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiNodesSettings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiNodesSettingsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiNodesSettings(ctx, params)
	return err
}

// PostV1ApiTweets converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiTweets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiTweetsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiTweets(ctx, params)
	return err
}

// AddReply converts echo context to params.
func (w *ServerInterfaceWrapper) AddReply(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AddReplyParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddReply(ctx, params)
	return err
}

// GetAllReplies converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllReplies(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "root_tweet_id" -------------
	var rootTweetId string

	err = runtime.BindStyledParameterWithOptions("simple", "root_tweet_id", ctx.Param("root_tweet_id"), &rootTweetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter root_tweet_id: %s", err))
	}

	// ------------- Path parameter "parent_reply_id" -------------
	var parentReplyId string

	err = runtime.BindStyledParameterWithOptions("simple", "parent_reply_id", ctx.Param("parent_reply_id"), &parentReplyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent_reply_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllRepliesParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllReplies(ctx, rootTweetId, parentReplyId, params)
	return err
}

// GetSingleReply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSingleReply(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "root_tweet_id" -------------
	var rootTweetId string

	err = runtime.BindStyledParameterWithOptions("simple", "root_tweet_id", ctx.Param("root_tweet_id"), &rootTweetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter root_tweet_id: %s", err))
	}

	// ------------- Path parameter "parent_reply_id" -------------
	var parentReplyId string

	err = runtime.BindStyledParameterWithOptions("simple", "parent_reply_id", ctx.Param("parent_reply_id"), &parentReplyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent_reply_id: %s", err))
	}

	// ------------- Path parameter "reply_id" -------------
	var replyId string

	err = runtime.BindStyledParameterWithOptions("simple", "reply_id", ctx.Param("reply_id"), &replyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter reply_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSingleReplyParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSingleReply(ctx, rootTweetId, parentReplyId, replyId, params)
	return err
}

// GetV1ApiTweetsTimelineUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsTimelineUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsTimelineUserIdParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsTimelineUserId(ctx, userId, params)
	return err
}

// GetV1ApiTweetsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsUserIdParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserId(ctx, userId, params)
	return err
}

// GetV1ApiTweetsUserIdTweetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserIdTweetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "tweet_id" -------------
	var tweetId string

	err = runtime.BindStyledParameterWithOptions("simple", "tweet_id", ctx.Param("tweet_id"), &tweetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tweet_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsUserIdTweetIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserIdTweetId(ctx, userId, tweetId, params)
	return err
}

// GetV1ApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiUsersParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiUsers(ctx, params)
	return err
}

// PostV1ApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiUsersParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsers(ctx, params)
	return err
}

// PostV1ApiUsersFollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersFollow(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiUsersFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersFollow(ctx, params)
	return err
}

// PostV1ApiUsersUnfollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersUnfollow(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiUsersUnfollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersUnfollow(ctx, params)
	return err
}

// GetV1ApiUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiUsersUserIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiUsersUserId(ctx, userId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.GET(baseURL+"/static/:file", wrapper.GetStaticFile)
	router.POST(baseURL+"/v1/api/auth/login", wrapper.PostV1ApiAuthLogin)
	router.POST(baseURL+"/v1/api/auth/logout", wrapper.PostV1ApiAuthLogout)
	router.GET(baseURL+"/v1/api/chat", wrapper.ListChats)
	router.POST(baseURL+"/v1/api/chat", wrapper.PostV1ApiChat)
	router.GET(baseURL+"/v1/api/chat/ws", wrapper.GetV1ApiChatWs)
	router.GET(baseURL+"/v1/api/chat/:chat_id", wrapper.GetV1ApiChatChatId)
	router.GET(baseURL+"/v1/api/chat/:chat_id/message", wrapper.ListMessages)
	router.POST(baseURL+"/v1/api/chat/:chat_id/message", wrapper.PostV1ApiChatChatIdMessage)
	router.DELETE(baseURL+"/v1/api/chat/:chat_id/message/:message_id", wrapper.DeleteV1ApiChatChatIdMessageMessageId)
	router.GET(baseURL+"/v1/api/chat/:chat_id/message/:message_id", wrapper.GetV1ApiChatChatIdMessageMessageId)
	router.GET(baseURL+"/v1/api/nodes/settings", wrapper.GetV1ApiNodesSettings)
	router.POST(baseURL+"/v1/api/nodes/settings", wrapper.PostV1ApiNodesSettings)
	router.POST(baseURL+"/v1/api/tweets", wrapper.PostV1ApiTweets)
	router.POST(baseURL+"/v1/api/tweets/replies", wrapper.AddReply)
	router.GET(baseURL+"/v1/api/tweets/replies/:root_tweet_id/:parent_reply_id", wrapper.GetAllReplies)
	router.GET(baseURL+"/v1/api/tweets/replies/:root_tweet_id/:parent_reply_id/:reply_id", wrapper.GetSingleReply)
	router.GET(baseURL+"/v1/api/tweets/timeline/:user_id", wrapper.GetV1ApiTweetsTimelineUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id", wrapper.GetV1ApiTweetsUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id/:tweet_id", wrapper.GetV1ApiTweetsUserIdTweetId)
	router.GET(baseURL+"/v1/api/users", wrapper.GetV1ApiUsers)
	router.POST(baseURL+"/v1/api/users", wrapper.PostV1ApiUsers)
	router.POST(baseURL+"/v1/api/users/follow", wrapper.PostV1ApiUsersFollow)
	router.POST(baseURL+"/v1/api/users/unfollow", wrapper.PostV1ApiUsersUnfollow)
	router.GET(baseURL+"/v1/api/users/:user_id", wrapper.GetV1ApiUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb627bOBZ+FYK7QIGFMkpmuwXG/7IznUEw2bZIMjsLFEHASMc2pxSpklRSw/C7L3iR",
	"rfstcRKj+dHGkHg5PN93Ljyk1jgSSSo4cK3wbI1VtISE2J+xSAjlN6dxfAlaU764gK8ZKG3epVKkIDUF",
	"2zKSQDTEN8S+mwuZmF84JhqONE0AB1ivUsAzrLSkfIE3AeYkAdP67xLmeIb/Fu7kCL0QoZfAT/+BJPCe",
	"Z4npfUdYZrtXxt0EWMLXjEqI8eyzmyRvfb2VQtz+BZE24+RrzPSydXUpUepeyLhhugBnCmS+lG5Zti2D",
	"3YgdIv28JI+k6bkUyY2Z/YY2r6HlsRadvbI0HilKRSE0xhXhSnMGxcWWpuvR2n9AKbKABuUtiW5bTSS4",
	"Bm6XklB+Dnyhl3h20qDOKRDQdvJ4gXomHUczrz6/3MBpOl9hUGRiYTE9WlUXoFLBVYte7Q+qIVEDjdry",
	"e7Odk0hJVla9mVRC9qmrWwd+jMBL1rUyu34jS6v5V82nB6my1XQ2rkjdbgodC/hVMCbuW4WXQOKhkt9L",
	"qicJvpukOEiH0Of0SwON9D2AHm4OEwQtKDefq0NK70e6iN/O1cR3nmIWuQNrsI7xJrAVpGOlF2D18fIh",
	"qWYCJkuBOcmY8cBcxHBD4liCUqBwgME2+Vx9cd0gvR//qlkNzxIcGP0ynj7Wshp4Ywe7iUTGy4JRrt+9",
	"NSyhnCZGW8fbvpRrWIA0vVMigbeGTunYM1rWnHUN4uZDTpZYCtEq736jbiXW7lS3E2pCBLbEnOaJpoFz",
	"1QbNeA/kBehY3R98fohh7A8Fsi7rLZV6aQx+uAeY4jViUJGkqaaCN8LuNApxCfg6OSro5r1uvHetmV3d",
	"1HwXqSbNJNWIqVo9Jf9SGiGTrEllTESkVV/J6kbCHKQkbORKbHhxou0kyFxMq/tKMwXEN7er3u3kGO5W",
	"vUqRHaUXubAVqKt4FPhTRHiouzKWMc1bGVFHOytriDVk2vyRm6IuvelA+Vy4rKJgXfj9Ny2BE4ZOP52h",
	"uZCIoJgamW8zDTG6uqdagzwyQRaRNGXU8yzAmmpm5vil3twMhgN8B1K5WU5+OP7h2CxDpMBJSvEM/9M+",
	"MlFEL60yQvPfwuUoRqN2nrMYz/BvoM94DN9MnPGKtz1+PD6uL+jj71Y9KksSIld4hi9B3gFSmmgaoTll",
	"oGyD0D0J1+bRPzaFycvjXYDOJFeI8FVxEGS2NEgvAeUDoZhKiLSQKxzUF3BpG/1KmSuSSJKAtnT4vMbU",
	"zGP0gPPaEZ67hjuQtcwg8CWspgB13aybQnpXQC8UkQZ9pLQEkuxKYyUzv6Wc2KVUZ6o6aHxZ0Ioyyo6R",
	"yqIIlJpnjFk/8vb4bV2zRhmIC43mIuPxQNTuTkKS0pBkehkysaDW46VCNdDmk1D6vyenKT3N9PLctnUa",
	"BaX/LeJVh37+Us6V7vQywFSLlbZN2UQNeptRCE2SwDmLOkLmOYpBE8qUg+OkDocRH80JZRCbNv9qMq4z",
	"ro27ZQ5niUBKIavIaSEBRRJi4JqakBNgTRaG6nYOfN0EpMj0cCRN42YrWtpEZ2dH/zu6fH95efbxw9HV",
	"x9/ff3gMk6qQ3zH9QRr7mQnlTIdG0KmtyFdOG93kOVXalrNadPM1A2vQXjW7vH64SoI9qDloFm8b00b3",
	"ZDShutRxu5H+sb6jCvC3o4U48k8zl6GN9aeTrLVcemwx2zcKuUqfNdtGgt0RRmNEeZrpCrF+A40MzH6I",
	"HbNshfLabH+77c22eyJL25tfrhdCh3vnVmMfjYWTwiJRB6Ji4uG96kqGttD8qZ7BDZ40BY8HaWZJNPoT",
	"bpWIvoBGkeAcojzJ7NbT2h8EbAapy/w7i/fvHcup3O6s4nn97BN5tCZHlh+INKaBNjkRzke1poO5J3uj",
	"kEohonMaVU3JlXU6OBImu9Oz1gCaV8YHZekPgfY1Gr+saFw7EtlrQE52NMv5mx+NDAzLzpnlnfbN1tdo",
	"PynaJ1t46ij3+qlw7X/kAS4GBq72WubFL/Z5MzP8n9awV6bIbsJnDnwv1DteD61ATaCMQ7HkHlq8w8BE",
	"55UBh5tFbc/JnyAI9XknLmJQoXLn0/0bkw+m+WXeev/7k5eZsbSM7Y8q2lc35c7g6ErVaMqcxjHyBCiw",
	"xQsyJGN5alLsN8eo3xt9jhyjD5SCCe8OyntwcofxBw+QP+J/liJ8Ye4ylvZF6WgE+SPHSfB/ym4ZVUtE",
	"EId75O6bdO6GHQlCCSnLr/82kuE0ji8gZatXFuyDBVa1+2KBtINrUaODA7SDDuHaXuHJb6ptwrW/3mOH",
	"7CuxnTJ24Wk1qLr2QoJzOVutLPgR8t+SSg9j8+JhLBN0DjpaTiSoyTYJY46RbxSSW548IjfD9SCaXlK+",
	"YNDl3Cr4PR4VXsnV7PseSi1lIXWObxCnNE2AUQ7h2m8p+88OXFJ05Tua/dfAzfRDNq0v02Me2Fa6cre0",
	"fTdtyYFybvSeVeQNh5xXVIYekqKNpWYnJQ8h9H5H1Z1+Sp5TpZGYl/ij+ilpmw0mpBpHxHC9jb6jOGl/",
	"P4G3LI90WFGxYV/44IQLRSA1oXzIvnB7L7UTVXvv9bst510/zeW93lBVvsXX5g76nIBCjKoiK+zFwQFl",
	"vKciwX7rArtrki/rhuajFQX86aOrCRjA61BX7T90N+EHlAgtB9y3mQfPhPInpoMo0X75ybtu/3GBvRue",
	"+dv7oxF0giHChV6CHIphxsehmH+cdPgWXfnK6oHleIdkrs2HYpkLh8hQHIfn/w7Gp9mRHliiPfwy/NQw",
	"iih3n0uU7yrmqJo+9tK3Q6OS5IuIMBTDHTCRJsC1vyCOA/uJ1wwvtU5nYchMu6VQevbup3c/4c315v8B",
	"AAD//wwzOg/XRAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
