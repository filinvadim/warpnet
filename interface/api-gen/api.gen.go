// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/dWighter/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// PostV1ApiAuthLogoutParams defines parameters for PostV1ApiAuthLogout.
type PostV1ApiAuthLogoutParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiNodesSettingsParams defines parameters for GetV1ApiNodesSettings.
type GetV1ApiNodesSettingsParams struct {
	Cursor        *string                      `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64                      `form:"limit,omitempty" json:"limit,omitempty"`
	Name          externalRef0.SettingNameEnum `form:"name" json:"name"`
	XSESSIONTOKEN string                       `json:"X-SESSION-TOKEN"`
}

// PostV1ApiNodesSettingsParams defines parameters for PostV1ApiNodesSettings.
type PostV1ApiNodesSettingsParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiTweetsParams defines parameters for PostV1ApiTweets.
type PostV1ApiTweetsParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiTweetsTimelineUserIdParams defines parameters for GetV1ApiTweetsTimelineUserId.
type GetV1ApiTweetsTimelineUserIdParams struct {
	Cursor        *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	XSESSIONTOKEN string  `json:"X-SESSION-TOKEN"`
}

// GetV1ApiTweetsUserIdParams defines parameters for GetV1ApiTweetsUserId.
type GetV1ApiTweetsUserIdParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiTweetsUserIdTweetIdParams defines parameters for GetV1ApiTweetsUserIdTweetId.
type GetV1ApiTweetsUserIdTweetIdParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiUsersParams defines parameters for GetV1ApiUsers.
type GetV1ApiUsersParams struct {
	Cursor        *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	XSESSIONTOKEN string  `json:"X-SESSION-TOKEN"`
}

// PostV1ApiUsersParams defines parameters for PostV1ApiUsers.
type PostV1ApiUsersParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiUsersFollowParams defines parameters for PostV1ApiUsersFollow.
type PostV1ApiUsersFollowParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiUsersUnfollowParams defines parameters for PostV1ApiUsersUnfollow.
type PostV1ApiUsersUnfollowParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiUsersUserIdParams defines parameters for GetV1ApiUsersUserId.
type GetV1ApiUsersUserIdParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiAuthLoginJSONRequestBody defines body for PostV1ApiAuthLogin for application/json ContentType.
type PostV1ApiAuthLoginJSONRequestBody = externalRef0.AuthRequest

// PostV1ApiNodesSettingsJSONRequestBody defines body for PostV1ApiNodesSettings for application/json ContentType.
type PostV1ApiNodesSettingsJSONRequestBody = externalRef0.AddSettingRequest

// PostV1ApiTweetsJSONRequestBody defines body for PostV1ApiTweets for application/json ContentType.
type PostV1ApiTweetsJSONRequestBody = externalRef0.Tweet

// PostV1ApiUsersJSONRequestBody defines body for PostV1ApiUsers for application/json ContentType.
type PostV1ApiUsersJSONRequestBody = externalRef0.User

// PostV1ApiUsersFollowJSONRequestBody defines body for PostV1ApiUsersFollow for application/json ContentType.
type PostV1ApiUsersFollowJSONRequestBody = externalRef0.FollowRequest

// PostV1ApiUsersUnfollowJSONRequestBody defines body for PostV1ApiUsersUnfollow for application/json ContentType.
type PostV1ApiUsersUnfollowJSONRequestBody = externalRef0.UnfollowRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve the main index.html page
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Store credentials
	// (POST /v1/api/auth/login)
	PostV1ApiAuthLogin(ctx echo.Context) error
	// Close service
	// (POST /v1/api/auth/logout)
	PostV1ApiAuthLogout(ctx echo.Context, params PostV1ApiAuthLogoutParams) error
	// Add setting
	// (GET /v1/api/nodes/settings)
	GetV1ApiNodesSettings(ctx echo.Context, params GetV1ApiNodesSettingsParams) error
	// Add setting
	// (POST /v1/api/nodes/settings)
	PostV1ApiNodesSettings(ctx echo.Context, params PostV1ApiNodesSettingsParams) error
	// Publish a new tweet
	// (POST /v1/api/tweets)
	PostV1ApiTweets(ctx echo.Context, params PostV1ApiTweetsParams) error
	// Get user's tweet timeline
	// (GET /v1/api/tweets/timeline/{user_id})
	GetV1ApiTweetsTimelineUserId(ctx echo.Context, userId string, params GetV1ApiTweetsTimelineUserIdParams) error
	// Get user's tweets
	// (GET /v1/api/tweets/{user_id})
	GetV1ApiTweetsUserId(ctx echo.Context, userId string, params GetV1ApiTweetsUserIdParams) error
	// Get a certain tweet
	// (GET /v1/api/tweets/{user_id}/{tweet_id})
	GetV1ApiTweetsUserIdTweetId(ctx echo.Context, userId string, tweetId string, params GetV1ApiTweetsUserIdTweetIdParams) error
	// Get users list
	// (GET /v1/api/users)
	GetV1ApiUsers(ctx echo.Context, params GetV1ApiUsersParams) error
	// Create a new user
	// (POST /v1/api/users)
	PostV1ApiUsers(ctx echo.Context, params PostV1ApiUsersParams) error
	// Follow another user
	// (POST /v1/api/users/follow)
	PostV1ApiUsersFollow(ctx echo.Context, params PostV1ApiUsersFollowParams) error
	// Unfollow a user
	// (POST /v1/api/users/unfollow)
	PostV1ApiUsersUnfollow(ctx echo.Context, params PostV1ApiUsersUnfollowParams) error
	// Get user information
	// (GET /v1/api/users/{user_id})
	GetV1ApiUsersUserId(ctx echo.Context, userId string, params GetV1ApiUsersUserIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// PostV1ApiAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogin(ctx)
	return err
}

// PostV1ApiAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiAuthLogoutParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogout(ctx, params)
	return err
}

// GetV1ApiNodesSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiNodesSettings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiNodesSettingsParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiNodesSettings(ctx, params)
	return err
}

// PostV1ApiNodesSettings converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiNodesSettings(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiNodesSettingsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiNodesSettings(ctx, params)
	return err
}

// PostV1ApiTweets converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiTweets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiTweetsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiTweets(ctx, params)
	return err
}

// GetV1ApiTweetsTimelineUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsTimelineUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsTimelineUserIdParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsTimelineUserId(ctx, userId, params)
	return err
}

// GetV1ApiTweetsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsUserIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserId(ctx, userId, params)
	return err
}

// GetV1ApiTweetsUserIdTweetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserIdTweetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "tweet_id" -------------
	var tweetId string

	err = runtime.BindStyledParameterWithOptions("simple", "tweet_id", ctx.Param("tweet_id"), &tweetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tweet_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsUserIdTweetIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserIdTweetId(ctx, userId, tweetId, params)
	return err
}

// GetV1ApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiUsersParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiUsers(ctx, params)
	return err
}

// PostV1ApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiUsersParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsers(ctx, params)
	return err
}

// PostV1ApiUsersFollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersFollow(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiUsersFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersFollow(ctx, params)
	return err
}

// PostV1ApiUsersUnfollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersUnfollow(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiUsersUnfollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersUnfollow(ctx, params)
	return err
}

// GetV1ApiUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiUsersUserIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiUsersUserId(ctx, userId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.POST(baseURL+"/v1/api/auth/login", wrapper.PostV1ApiAuthLogin)
	router.POST(baseURL+"/v1/api/auth/logout", wrapper.PostV1ApiAuthLogout)
	router.GET(baseURL+"/v1/api/nodes/settings", wrapper.GetV1ApiNodesSettings)
	router.POST(baseURL+"/v1/api/nodes/settings", wrapper.PostV1ApiNodesSettings)
	router.POST(baseURL+"/v1/api/tweets", wrapper.PostV1ApiTweets)
	router.GET(baseURL+"/v1/api/tweets/timeline/:user_id", wrapper.GetV1ApiTweetsTimelineUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id", wrapper.GetV1ApiTweetsUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id/:tweet_id", wrapper.GetV1ApiTweetsUserIdTweetId)
	router.GET(baseURL+"/v1/api/users", wrapper.GetV1ApiUsers)
	router.POST(baseURL+"/v1/api/users", wrapper.PostV1ApiUsers)
	router.POST(baseURL+"/v1/api/users/follow", wrapper.PostV1ApiUsersFollow)
	router.POST(baseURL+"/v1/api/users/unfollow", wrapper.PostV1ApiUsersUnfollow)
	router.GET(baseURL+"/v1/api/users/:user_id", wrapper.GetV1ApiUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Tm6mLQ5evnr5ii5Giz8DAAD//32Rt4S/JwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
