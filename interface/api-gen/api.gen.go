// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/dWighter/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// PostV1ApiAuthLogoutParams defines parameters for PostV1ApiAuthLogout.
type PostV1ApiAuthLogoutParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiTweetsParams defines parameters for PostV1ApiTweets.
type PostV1ApiTweetsParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiTweetsTimelineUserIdParams defines parameters for GetV1ApiTweetsTimelineUserId.
type GetV1ApiTweetsTimelineUserIdParams struct {
	Cursor        *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	XSESSIONTOKEN string  `json:"X-SESSION-TOKEN"`
}

// GetV1ApiTweetsUserIdParams defines parameters for GetV1ApiTweetsUserId.
type GetV1ApiTweetsUserIdParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiTweetsUserIdTweetIdParams defines parameters for GetV1ApiTweetsUserIdTweetId.
type GetV1ApiTweetsUserIdTweetIdParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiUsersParams defines parameters for GetV1ApiUsers.
type GetV1ApiUsersParams struct {
	Cursor        *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit         *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
	XSESSIONTOKEN string  `json:"X-SESSION-TOKEN"`
}

// PostV1ApiUsersParams defines parameters for PostV1ApiUsers.
type PostV1ApiUsersParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiUsersFollowParams defines parameters for PostV1ApiUsersFollow.
type PostV1ApiUsersFollowParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiUsersUnfollowParams defines parameters for PostV1ApiUsersUnfollow.
type PostV1ApiUsersUnfollowParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// GetV1ApiUsersUserIdParams defines parameters for GetV1ApiUsersUserId.
type GetV1ApiUsersUserIdParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiAuthLoginJSONRequestBody defines body for PostV1ApiAuthLogin for application/json ContentType.
type PostV1ApiAuthLoginJSONRequestBody = externalRef0.AuthRequest

// PostV1ApiTweetsJSONRequestBody defines body for PostV1ApiTweets for application/json ContentType.
type PostV1ApiTweetsJSONRequestBody = externalRef0.Tweet

// PostV1ApiUsersJSONRequestBody defines body for PostV1ApiUsers for application/json ContentType.
type PostV1ApiUsersJSONRequestBody = externalRef0.User

// PostV1ApiUsersFollowJSONRequestBody defines body for PostV1ApiUsersFollow for application/json ContentType.
type PostV1ApiUsersFollowJSONRequestBody = externalRef0.FollowRequest

// PostV1ApiUsersUnfollowJSONRequestBody defines body for PostV1ApiUsersUnfollow for application/json ContentType.
type PostV1ApiUsersUnfollowJSONRequestBody = externalRef0.UnfollowRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve the main index.html page
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Store credentials
	// (POST /v1/api/auth/login)
	PostV1ApiAuthLogin(ctx echo.Context) error
	// Close service
	// (POST /v1/api/auth/logout)
	PostV1ApiAuthLogout(ctx echo.Context, params PostV1ApiAuthLogoutParams) error
	// Publish a new tweet
	// (POST /v1/api/tweets)
	PostV1ApiTweets(ctx echo.Context, params PostV1ApiTweetsParams) error
	// Get user's tweet timeline
	// (GET /v1/api/tweets/timeline/{user_id})
	GetV1ApiTweetsTimelineUserId(ctx echo.Context, userId string, params GetV1ApiTweetsTimelineUserIdParams) error
	// Get user's tweets
	// (GET /v1/api/tweets/{user_id})
	GetV1ApiTweetsUserId(ctx echo.Context, userId string, params GetV1ApiTweetsUserIdParams) error
	// Get a certain tweet
	// (GET /v1/api/tweets/{user_id}/{tweet_id})
	GetV1ApiTweetsUserIdTweetId(ctx echo.Context, userId string, tweetId string, params GetV1ApiTweetsUserIdTweetIdParams) error
	// Get users list
	// (GET /v1/api/users)
	GetV1ApiUsers(ctx echo.Context, params GetV1ApiUsersParams) error
	// Create a new user
	// (POST /v1/api/users)
	PostV1ApiUsers(ctx echo.Context, params PostV1ApiUsersParams) error
	// Follow another user
	// (POST /v1/api/users/follow)
	PostV1ApiUsersFollow(ctx echo.Context, params PostV1ApiUsersFollowParams) error
	// Unfollow a user
	// (POST /v1/api/users/unfollow)
	PostV1ApiUsersUnfollow(ctx echo.Context, params PostV1ApiUsersUnfollowParams) error
	// Get user information
	// (GET /v1/api/users/{user_id})
	GetV1ApiUsersUserId(ctx echo.Context, userId string, params GetV1ApiUsersUserIdParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// PostV1ApiAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogin(ctx)
	return err
}

// PostV1ApiAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiAuthLogoutParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogout(ctx, params)
	return err
}

// PostV1ApiTweets converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiTweets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiTweetsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiTweets(ctx, params)
	return err
}

// GetV1ApiTweetsTimelineUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsTimelineUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsTimelineUserIdParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsTimelineUserId(ctx, userId, params)
	return err
}

// GetV1ApiTweetsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsUserIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserId(ctx, userId, params)
	return err
}

// GetV1ApiTweetsUserIdTweetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserIdTweetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "tweet_id" -------------
	var tweetId string

	err = runtime.BindStyledParameterWithOptions("simple", "tweet_id", ctx.Param("tweet_id"), &tweetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tweet_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsUserIdTweetIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserIdTweetId(ctx, userId, tweetId, params)
	return err
}

// GetV1ApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiUsersParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiUsers(ctx, params)
	return err
}

// PostV1ApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiUsersParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsers(ctx, params)
	return err
}

// PostV1ApiUsersFollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersFollow(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiUsersFollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersFollow(ctx, params)
	return err
}

// PostV1ApiUsersUnfollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersUnfollow(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiUsersUnfollowParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersUnfollow(ctx, params)
	return err
}

// GetV1ApiUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiUsersUserIdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiUsersUserId(ctx, userId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.POST(baseURL+"/v1/api/auth/login", wrapper.PostV1ApiAuthLogin)
	router.POST(baseURL+"/v1/api/auth/logout", wrapper.PostV1ApiAuthLogout)
	router.POST(baseURL+"/v1/api/tweets", wrapper.PostV1ApiTweets)
	router.GET(baseURL+"/v1/api/tweets/timeline/:user_id", wrapper.GetV1ApiTweetsTimelineUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id", wrapper.GetV1ApiTweetsUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id/:tweet_id", wrapper.GetV1ApiTweetsUserIdTweetId)
	router.GET(baseURL+"/v1/api/users", wrapper.GetV1ApiUsers)
	router.POST(baseURL+"/v1/api/users", wrapper.PostV1ApiUsers)
	router.POST(baseURL+"/v1/api/users/follow", wrapper.PostV1ApiUsersFollow)
	router.POST(baseURL+"/v1/api/users/unfollow", wrapper.PostV1ApiUsersUnfollow)
	router.GET(baseURL+"/v1/api/users/:user_id", wrapper.GetV1ApiUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DgAA//+XbGmRuCIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
