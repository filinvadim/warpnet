// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/dWighter/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// GetV1ApiTweetsTimelineUserIdParams defines parameters for GetV1ApiTweetsTimelineUserId.
type GetV1ApiTweetsTimelineUserIdParams struct {
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetV1ApiUsersParams defines parameters for GetV1ApiUsers.
type GetV1ApiUsersParams struct {
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostV1ApiAuthLoginJSONRequestBody defines body for PostV1ApiAuthLogin for application/json ContentType.
type PostV1ApiAuthLoginJSONRequestBody = externalRef0.AuthRequest

// PostV1ApiTweetsJSONRequestBody defines body for PostV1ApiTweets for application/json ContentType.
type PostV1ApiTweetsJSONRequestBody = externalRef0.Tweet

// PostV1ApiUsersJSONRequestBody defines body for PostV1ApiUsers for application/json ContentType.
type PostV1ApiUsersJSONRequestBody = externalRef0.User

// PostV1ApiUsersFollowJSONRequestBody defines body for PostV1ApiUsersFollow for application/json ContentType.
type PostV1ApiUsersFollowJSONRequestBody = externalRef0.FollowRequest

// PostV1ApiUsersUnfollowJSONRequestBody defines body for PostV1ApiUsersUnfollow for application/json ContentType.
type PostV1ApiUsersUnfollowJSONRequestBody = externalRef0.UnfollowRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve the main index.html page
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Store credentials
	// (POST /v1/api/auth/login)
	PostV1ApiAuthLogin(ctx echo.Context) error
	// Close service
	// (POST /v1/api/auth/logout)
	PostV1ApiAuthLogout(ctx echo.Context) error
	// Publish a new tweet
	// (POST /v1/api/tweets)
	PostV1ApiTweets(ctx echo.Context) error
	// Get user's tweet timeline
	// (GET /v1/api/tweets/timeline/{user_id})
	GetV1ApiTweetsTimelineUserId(ctx echo.Context, userId string, params GetV1ApiTweetsTimelineUserIdParams) error
	// Get user's tweets
	// (GET /v1/api/tweets/{user_id})
	GetV1ApiTweetsUserId(ctx echo.Context, userId string) error
	// Get a certain tweet
	// (GET /v1/api/tweets/{user_id}/{tweet_id})
	GetV1ApiTweetsUserIdTweetId(ctx echo.Context, userId string, tweetId string) error
	// Get users list
	// (GET /v1/api/users)
	GetV1ApiUsers(ctx echo.Context, params GetV1ApiUsersParams) error
	// Create a new user
	// (POST /v1/api/users)
	PostV1ApiUsers(ctx echo.Context) error
	// Follow another user
	// (POST /v1/api/users/follow)
	PostV1ApiUsersFollow(ctx echo.Context) error
	// Unfollow a user
	// (POST /v1/api/users/unfollow)
	PostV1ApiUsersUnfollow(ctx echo.Context) error
	// Get user information
	// (GET /v1/api/users/{user_id})
	GetV1ApiUsersUserId(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// PostV1ApiAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogin(ctx)
	return err
}

// PostV1ApiAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogout(ctx)
	return err
}

// PostV1ApiTweets converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiTweets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiTweets(ctx)
	return err
}

// GetV1ApiTweetsTimelineUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsTimelineUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsTimelineUserIdParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsTimelineUserId(ctx, userId, params)
	return err
}

// GetV1ApiTweetsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserId(ctx, userId)
	return err
}

// GetV1ApiTweetsUserIdTweetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserIdTweetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "tweet_id" -------------
	var tweetId string

	err = runtime.BindStyledParameterWithOptions("simple", "tweet_id", ctx.Param("tweet_id"), &tweetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tweet_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserIdTweetId(ctx, userId, tweetId)
	return err
}

// GetV1ApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiUsers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiUsersParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiUsers(ctx, params)
	return err
}

// PostV1ApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsers(ctx)
	return err
}

// PostV1ApiUsersFollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersFollow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersFollow(ctx)
	return err
}

// PostV1ApiUsersUnfollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersUnfollow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersUnfollow(ctx)
	return err
}

// GetV1ApiUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiUsersUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.POST(baseURL+"/v1/api/auth/login", wrapper.PostV1ApiAuthLogin)
	router.POST(baseURL+"/v1/api/auth/logout", wrapper.PostV1ApiAuthLogout)
	router.POST(baseURL+"/v1/api/tweets", wrapper.PostV1ApiTweets)
	router.GET(baseURL+"/v1/api/tweets/timeline/:user_id", wrapper.GetV1ApiTweetsTimelineUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id", wrapper.GetV1ApiTweetsUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id/:tweet_id", wrapper.GetV1ApiTweetsUserIdTweetId)
	router.GET(baseURL+"/v1/api/users", wrapper.GetV1ApiUsers)
	router.POST(baseURL+"/v1/api/users", wrapper.PostV1ApiUsers)
	router.POST(baseURL+"/v1/api/users/follow", wrapper.PostV1ApiUsersFollow)
	router.POST(baseURL+"/v1/api/users/unfollow", wrapper.PostV1ApiUsersUnfollow)
	router.GET(baseURL+"/v1/api/users/:user_id", wrapper.GetV1ApiUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kkhvl2mLs2fPnz2n66v1PwEAAP//hFk8PSUfAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
