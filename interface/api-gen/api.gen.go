// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
	User  Owner  `json:"user"`
}

// Owner defines model for Owner.
type Owner struct {
	Birthdate    *time.Time `json:"birthdate,omitempty"`
	CreatedAt    time.Time  `json:"created_at"`
	Description  string     `json:"description"`
	FollowedNum  int64      `json:"followed_num"`
	FollowersNum int64      `json:"followers_num"`
	Id           string     `json:"id"`
	Link         *string    `json:"link,omitempty"`
	Location     *string    `json:"location,omitempty"`
	NodeId       string     `json:"node_id"`
	Username     string     `json:"username"`
}

// PostV1ApiAuthLogoutParams defines parameters for PostV1ApiAuthLogout.
type PostV1ApiAuthLogoutParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiAuthLoginJSONRequestBody defines body for PostV1ApiAuthLogin for application/json ContentType.
type PostV1ApiAuthLoginJSONRequestBody = AuthRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve static files
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Serve static files
	// (GET /static/{file*})
	GetStaticFile(ctx echo.Context, file string) error
	// Store credentials
	// (POST /v1/api/auth/login)
	PostV1ApiAuthLogin(ctx echo.Context) error
	// Close service
	// (POST /v1/api/auth/logout)
	PostV1ApiAuthLogout(ctx echo.Context, params PostV1ApiAuthLogoutParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// GetStaticFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetStaticFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "file" -------------
	var file string

	err = runtime.BindStyledParameterWithOptions("simple", "file", ctx.Param("file"), &file, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStaticFile(ctx, file)
	return err
}

// PostV1ApiAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogin(ctx)
	return err
}

// PostV1ApiAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiAuthLogoutParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogout(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.GET(baseURL+"/static/:file", wrapper.GetStaticFile)
	router.POST(baseURL+"/v1/api/auth/login", wrapper.PostV1ApiAuthLogin)
	router.POST(baseURL+"/v1/api/auth/logout", wrapper.PostV1ApiAuthLogout)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xVbW/bNhD+KwS3T4Nc2VsWoPqWDdlgtGiKuHsBiiBgxJN1DUWqx1NSI/B/H45yYNlS",
	"mwTrF0Mm7/V5njs+6DI0bfDgOeriQceyhsakz7OO60v43EFk+dtSaIEYIV22Jsb7QFa+edOCLnRkQr/W",
	"20x3EcibBiYut5km+NwhgdXFx71lto94lT06hZtPULJEPCcKNK6iDHaYBD3DGkgcGojRrJ9RQQqxt59K",
	"/jas0V9CbIOPMC6Cwy34r+IgFz8SVLrQP+R7rPMd0PnFvZeKj6rqY+4iTNXUu41quUHi2hpOZVaBGsO6",
	"0HIwY0wwj4osCQyDvTb8fB8LsSRsGcN041VwLtyDvfZdcxAVPZ+e7CMOCNu5UHyBD07Lz6G/PYjQkZvq",
	"woXSfLUFHyxc49P6btC/Bb/mWheL7AmtodXZUPJDGA8uHpMfIXmM0gF5Y5VIevRVkDIPGNPnX5jAG6fO",
	"3i9VFUgZZVGKvukYrPpwj8xAM4e3oEzbOtwBlWlGdpLjH0Ot8sCqouBZVaaUuu+AYp9h8Wr+ai5YhRa8",
	"aVEX+pd0JIPOdRJrLj9rSLoTEaccS6sL/Sfw0lv4ogW/fu6Sx8/z+biZizcJ6Ng1jaGNLvQK6A5UZMNY",
	"qgodxGSQ9yf5gxz9tB0kP4x3CdyRj8r4zTCIdNoorkE9BlIWCUoOtNHZuIFVMvoDXb/cyDTAQFEXHx80",
	"Sh7BQbhOQtJVb7iXC1MH2W4fT62xq2lsyuAZfGprwFweSgaeRSYwzX7PH0zJDXqTWjnOdDzwejVAJQrY",
	"VsWuLCHGqnNuI7SfzE/GyAoYygdWVei8fSZrd4vctJibjuvcySZOWy/ECdm8D5H/Xpy1KE9X2to7RCHy",
	"b8FuvoHPp9jvgT0u31raw6dxezjlQtv2RdS8LPXjezEi5a8IpCywQRd7BhZjBqRwVRl0YMXm16l5WnqW",
	"ReRUbbx1QArS43vEFgcCVRJY8IzGRdGNWYu8UxJ9NUVe6Pj57Inx9OTUYCzQfnb+na3OV6vlxbvZh4s3",
	"5+++xxgdCb5X9/+D7HcXYj8vmJblMVxiLDOw63Qig2xZZawlqSVLz1qha+a2yHN5zFwdIhenr09f6+3V",
	"9r8AAAD//9drl2DbCQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
