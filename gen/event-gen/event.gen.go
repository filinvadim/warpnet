// Package event provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package event

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// BaseEvent defines model for BaseEvent.
type BaseEvent = map[string]interface{}

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor string              `json:"cursor"`
	UserId *string             `json:"user_id,omitempty"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor *string             `json:"cursor,omitempty"`
	Limit  *int                `json:"limit,omitempty"`
	UserId string              `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId string  `json:"chat_id"`
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor        *string `json:"cursor,omitempty"`
	Limit         *uint64 `json:"limit,omitempty"`
	ParentReplyId string  `json:"parent_reply_id"`
	RootId        string  `json:"root_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId   string  `json:"chat_id"`
	Id       string  `json:"id"`
	UserId   string  `json:"user_id"`
	Username *string `json:"username,omitempty"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	ParentReplyId string `json:"parent_reply_id"`
	ReplyId       string `json:"reply_id"`
	RootId        string `json:"root_id"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"user_id"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId string `json:"user_id"`
}

// Like defines model for Like.
type Like = externalRef0.Like

// LoginEvent defines model for LoginEvent.
type LoginEvent struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent struct {
	Token string `json:"token"`
}

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	ChatId   *string                    `json:"chat_id,omitempty"`
	Cursor   string                     `json:"cursor"`
	Messages []externalRef0.ChatMessage `json:"messages"`
	UserId   *string                    `json:"user_id,omitempty"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	Request *interface{} `json:"request,omitempty"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	CreatedAt *time.Time                `json:"created_at,omitempty"`
	Message   *externalRef0.ChatMessage `json:"message,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent struct {
	Tweet *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	CreatedAt     time.Time  `json:"created_at"`
	Id            string     `json:"id"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	ParentId      string     `json:"parent_id"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	RootId        string     `json:"root_id"`
	Text          string     `json:"text"`
	UserId        string     `json:"user_id"`
	Username      string     `json:"username"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	Request *interface{} `json:"request,omitempty"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	User *externalRef0.User `json:"user,omitempty"`
}

// Owner defines model for Owner.
type Owner = externalRef0.Owner

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string                   `json:"cursor"`
	Replies []externalRef0.ReplyNode `json:"replies"`
	UserId  *string                  `json:"user_id,omitempty"`
}

// Retweet defines model for Retweet.
type Retweet = externalRef0.Retweet

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string               `json:"cursor"`
	Tweets []externalRef0.Tweet `json:"tweets"`
	UserId string               `json:"user_id"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string              `json:"cursor"`
	Users  []externalRef0.User `json:"users"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX2/bNhD/Kga3R6ZJsaIPftuGbhiQukCRYA9FIdDW2eYskdqRsmoU+e4FKdqWLMqm",
	"FCbNQ978h7r73e/+8vSdLGReSAFCKzL9TtRiDTmzH/9gCj5sQWjzRe8KIFMi5//BQpMHSv5cM60+gyqk",
	"UGBOFCgLQM3BPrwwf5sPXENuP/yKsCRT8sv1UeG103adypxxkRiZRrZTxhDZznxflKgkNmAojVyszF+l",
	"Akx46vnvgRKE/0uOkJLpl70M6pB9pV2TPiBKPFjMsuzTkky/nEd+JOmBdjiQKTSAcaFhBWg05aAUW0EA",
	"aiPieL6L+usDJX+D/j3LrENion8mD2Y859pPU7hzLdbjA+d4+lhzGZsqP85RllPy7Wolr9yvJRf6/Tuv",
	"yZdM/QxFxuNaGssaSgqGIHSCUGS7PvJQSh0UAPuDXbHn+LmrAPQLpSc49kNi/l4BPpOdXCVLmWWygib2",
	"uZQZMNE6YB7wnhicF367TS2KaTMC05AmzMpbSszNJ5IyDVea56ZMd8hYosyThidzLm5BrPSaTN96jmsZ",
	"fPgkCFqKWoJoE3hvjLii+Ew1sefncKLMScFyCM8OegBk1fcSYUrmLiINQVXuiUtgQ0Ov3Xc8h4yLx0XA",
	"uZPdintQbX6LSLk28v5JHzcuNnLJieulzhTXiPAjFf5bvvGM5daY8BwbUYlOiPMDpORWrriImmdKVRL7",
	"vR5eLuxJepTYw69cyTJq2MoNiMsI62N+TPvR9vy1bMSk6u4fo64DDpTvVjD88nYA4oupGVSvPT+w58+g",
	"+stOYRHZMuBAGWE9Q9kMqicYNEb4qHH/HhrFvZbFnhxs+QxEaFvoGWyPb7HhIJzKe7H8GfH1BM040AdG",
	"c58LPlWilvP40OXF9p1/qC62771/CJlCwofOQ+OG7Eb/3Kt1kB3AC6WJErezuEOAM22sv1Vh/fzQTmWz",
	"dybTSH1qj8Jv4SG1X+hwVk/po+i3cgez70pHDOYdgHO7QErsPmSUfUbqYPPq0nBqXZ8FtQof7OaSdfoU",
	"s0roTb09tHRJKtKBUE64sCEaON+01F1g7eOx7w+Yi6XQrqFcyMpR9fyn70KOFrbq94U67Vh94ddMh/K1",
	"/wb3304/9OQKz1Ks76rRWqzdUA2edlv7LyuBHuGdte6lt+CWqXECN+15L7EZPi3ZrPd40QpLFrIUbWD1",
	"qp4aonhe5mR6Qz2v+9zesndLOm622PvaG3S1yNGI+5ezlGj4piOG0bh6UAeaQdKs8keiaWNtPLj23ytf",
	"UWVbphm2yJxzwXDnC8o5W2xWKEuRJjx3nTnkMS69nM856rXJgvC0GDU2uRdcyXzXisZuDJwEnHsQVSJM",
	"THnirRtjrZdlQ1VxsRqgqq9EyAXTXIrB3c1lVziAZohfyIYK5oqfOLrELGy0NPHT0ywPvjWoTz3W9EY7",
	"DC7kjEHBxdJGbQpqgbyoGSV286AmS4kTNkm5QT0vNaSTu4prDXhlauqEFUXGnRco0VxnRvq/DIvJDHQl",
	"cUMo2QKqWujbNzdvbgxLsgDBCk6m5Df7k8l9vVZ2hfIjAAD//+mxTfL7IwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
