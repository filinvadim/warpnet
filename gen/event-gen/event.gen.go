// Package event provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package event

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor string              `json:"cursor"`
	UserId *string             `json:"user_id,omitempty"`
}

// DeleteReplyEvent defines model for DeleteReplyEvent.
type DeleteReplyEvent = GetReplyEvent

// DeleteTweetEvent defines model for DeleteTweetEvent.
type DeleteTweetEvent = GetTweetEvent

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FolloweesResponse defines model for FolloweesResponse.
type FolloweesResponse struct {
	Cursor    string                   `json:"cursor"`
	Followees []externalRef0.Following `json:"followees"`
	Follower  string                   `json:"follower"`
}

// FollowersResponse defines model for FollowersResponse.
type FollowersResponse struct {
	Cursor    string                   `json:"cursor"`
	Followee  string                   `json:"followee"`
	Followers []externalRef0.Following `json:"followers"`
}

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor *string             `json:"cursor,omitempty"`
	Limit  *int                `json:"limit,omitempty"`
	UserId string              `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId string  `json:"chat_id"`
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor        *string `json:"cursor,omitempty"`
	Limit         *uint64 `json:"limit,omitempty"`
	ParentReplyId string  `json:"parent_reply_id"`
	RootId        string  `json:"root_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// GetFolloweesEvent defines model for GetFolloweesEvent.
type GetFolloweesEvent = GetFollowersEvent

// GetFollowersEvent defines model for GetFollowersEvent.
type GetFollowersEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId   string  `json:"chat_id"`
	Id       string  `json:"id"`
	UserId   string  `json:"user_id"`
	Username *string `json:"username,omitempty"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	ParentReplyId string `json:"parent_reply_id"`
	ReplyId       string `json:"reply_id"`
	RootId        string `json:"root_id"`
	UserId        string `json:"user_id"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent = GetAllTweetsEvent

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"user_id"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId string `json:"user_id"`
}

// Like defines model for Like.
type Like = externalRef0.Like

// LoginEvent defines model for LoginEvent.
type LoginEvent struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Owner Owner  `json:"owner"`
	Token string `json:"token"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent struct {
	Token string `json:"token"`
}

// Message defines model for Message.
type Message struct {
	Body      *Message_Body `json:"body,omitempty"`
	MessageId string        `json:"message_id"`
	NodeId    string        `json:"node_id"`
	Path      string        `json:"path"`
	Timestamp time.Time     `json:"timestamp,omitempty"`
	Version   string        `json:"version"`
}

// Message_Body defines model for Message.Body.
type Message_Body struct {
	union json.RawMessage
}

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	ChatId   *string                    `json:"chat_id,omitempty"`
	Cursor   string                     `json:"cursor"`
	Messages []externalRef0.ChatMessage `json:"messages"`
	UserId   *string                    `json:"user_id,omitempty"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent = externalRef0.Following

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	CreatedAt *time.Time                `json:"created_at,omitempty"`
	Message   *externalRef0.ChatMessage `json:"message,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent = externalRef0.Tweet

// NewReplyResponse defines model for NewReplyResponse.
type NewReplyResponse = externalRef0.Tweet

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent = externalRef0.Tweet

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent = externalRef0.Following

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	User *externalRef0.User `json:"user,omitempty"`
}

// Owner defines model for Owner.
type Owner = externalRef0.Owner

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string                   `json:"cursor"`
	Replies []externalRef0.ReplyNode `json:"replies"`
	UserId  *string                  `json:"user_id,omitempty"`
}

// RequestBody defines model for RequestBody.
type RequestBody struct {
	union json.RawMessage
}

// ResponseBody defines model for ResponseBody.
type ResponseBody struct {
	union json.RawMessage
}

// Retweet defines model for Retweet.
type Retweet = externalRef0.Retweet

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string               `json:"cursor"`
	Tweets []externalRef0.Tweet `json:"tweets"`
	UserId string               `json:"user_id"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string              `json:"cursor"`
	Users  []externalRef0.User `json:"users"`
}

// OptionsPrivateDeleteReply100JSONRequestBody defines body for OptionsPrivateDeleteReply100 for application/json ContentType.
type OptionsPrivateDeleteReply100JSONRequestBody = Message

// OptionsPrivateDeleteTweet100JSONRequestBody defines body for OptionsPrivateDeleteTweet100 for application/json ContentType.
type OptionsPrivateDeleteTweet100JSONRequestBody = Message

// OptionsPrivateGetTimeline100JSONRequestBody defines body for OptionsPrivateGetTimeline100 for application/json ContentType.
type OptionsPrivateGetTimeline100JSONRequestBody = Message

// OptionsPrivatePostFollow100JSONRequestBody defines body for OptionsPrivatePostFollow100 for application/json ContentType.
type OptionsPrivatePostFollow100JSONRequestBody = Message

// OptionsPrivatePostLogin100JSONRequestBody defines body for OptionsPrivatePostLogin100 for application/json ContentType.
type OptionsPrivatePostLogin100JSONRequestBody = Message

// OptionsPrivatePostLogout100JSONRequestBody defines body for OptionsPrivatePostLogout100 for application/json ContentType.
type OptionsPrivatePostLogout100JSONRequestBody = Message

// OptionsPrivatePostReply100JSONRequestBody defines body for OptionsPrivatePostReply100 for application/json ContentType.
type OptionsPrivatePostReply100JSONRequestBody = Message

// OptionsPrivatePostTweet100JSONRequestBody defines body for OptionsPrivatePostTweet100 for application/json ContentType.
type OptionsPrivatePostTweet100JSONRequestBody = Message

// OptionsPrivatePostUnfollow100JSONRequestBody defines body for OptionsPrivatePostUnfollow100 for application/json ContentType.
type OptionsPrivatePostUnfollow100JSONRequestBody = Message

// OptionsPublicGetFollowees100JSONRequestBody defines body for OptionsPublicGetFollowees100 for application/json ContentType.
type OptionsPublicGetFollowees100JSONRequestBody = Message

// OptionsPublicGetFollowers100JSONRequestBody defines body for OptionsPublicGetFollowers100 for application/json ContentType.
type OptionsPublicGetFollowers100JSONRequestBody = Message

// OptionsPublicGetInfo100JSONRequestBody defines body for OptionsPublicGetInfo100 for application/json ContentType.
type OptionsPublicGetInfo100JSONRequestBody = Message

// OptionsPublicGetReplies100JSONRequestBody defines body for OptionsPublicGetReplies100 for application/json ContentType.
type OptionsPublicGetReplies100JSONRequestBody = Message

// OptionsPublicGetReply100JSONRequestBody defines body for OptionsPublicGetReply100 for application/json ContentType.
type OptionsPublicGetReply100JSONRequestBody = Message

// OptionsPublicGetTweet100JSONRequestBody defines body for OptionsPublicGetTweet100 for application/json ContentType.
type OptionsPublicGetTweet100JSONRequestBody = Message

// OptionsPublicGetTweets100JSONRequestBody defines body for OptionsPublicGetTweets100 for application/json ContentType.
type OptionsPublicGetTweets100JSONRequestBody = Message

// OptionsPublicGetUser100JSONRequestBody defines body for OptionsPublicGetUser100 for application/json ContentType.
type OptionsPublicGetUser100JSONRequestBody = Message

// OptionsPublicGetUsers100JSONRequestBody defines body for OptionsPublicGetUsers100 for application/json ContentType.
type OptionsPublicGetUsers100JSONRequestBody = Message

// AsRequestBody returns the union data inside the Message_Body as a RequestBody
func (t Message_Body) AsRequestBody() (RequestBody, error) {
	var body RequestBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRequestBody overwrites any union data inside the Message_Body as the provided RequestBody
func (t *Message_Body) FromRequestBody(v RequestBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRequestBody performs a merge with any union data inside the Message_Body, using the provided RequestBody
func (t *Message_Body) MergeRequestBody(v RequestBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResponseBody returns the union data inside the Message_Body as a ResponseBody
func (t Message_Body) AsResponseBody() (ResponseBody, error) {
	var body ResponseBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResponseBody overwrites any union data inside the Message_Body as the provided ResponseBody
func (t *Message_Body) FromResponseBody(v ResponseBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResponseBody performs a merge with any union data inside the Message_Body, using the provided ResponseBody
func (t *Message_Body) MergeResponseBody(v ResponseBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Message_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Message_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorEvent returns the union data inside the RequestBody as a ErrorEvent
func (t RequestBody) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the RequestBody as the provided ErrorEvent
func (t *RequestBody) FromErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the RequestBody, using the provided ErrorEvent
func (t *RequestBody) MergeErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewTweetEvent returns the union data inside the RequestBody as a NewTweetEvent
func (t RequestBody) AsNewTweetEvent() (NewTweetEvent, error) {
	var body NewTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewTweetEvent overwrites any union data inside the RequestBody as the provided NewTweetEvent
func (t *RequestBody) FromNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewTweetEvent performs a merge with any union data inside the RequestBody, using the provided NewTweetEvent
func (t *RequestBody) MergeNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUserEvent returns the union data inside the RequestBody as a NewUserEvent
func (t RequestBody) AsNewUserEvent() (NewUserEvent, error) {
	var body NewUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUserEvent overwrites any union data inside the RequestBody as the provided NewUserEvent
func (t *RequestBody) FromNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUserEvent performs a merge with any union data inside the RequestBody, using the provided NewUserEvent
func (t *RequestBody) MergeNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeleteTweetEvent returns the union data inside the RequestBody as a DeleteTweetEvent
func (t RequestBody) AsDeleteTweetEvent() (DeleteTweetEvent, error) {
	var body DeleteTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeleteTweetEvent overwrites any union data inside the RequestBody as the provided DeleteTweetEvent
func (t *RequestBody) FromDeleteTweetEvent(v DeleteTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeleteTweetEvent performs a merge with any union data inside the RequestBody, using the provided DeleteTweetEvent
func (t *RequestBody) MergeDeleteTweetEvent(v DeleteTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeleteReplyEvent returns the union data inside the RequestBody as a DeleteReplyEvent
func (t RequestBody) AsDeleteReplyEvent() (DeleteReplyEvent, error) {
	var body DeleteReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeleteReplyEvent overwrites any union data inside the RequestBody as the provided DeleteReplyEvent
func (t *RequestBody) FromDeleteReplyEvent(v DeleteReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeleteReplyEvent performs a merge with any union data inside the RequestBody, using the provided DeleteReplyEvent
func (t *RequestBody) MergeDeleteReplyEvent(v DeleteReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewFollowEvent returns the union data inside the RequestBody as a NewFollowEvent
func (t RequestBody) AsNewFollowEvent() (NewFollowEvent, error) {
	var body NewFollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewFollowEvent overwrites any union data inside the RequestBody as the provided NewFollowEvent
func (t *RequestBody) FromNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewFollowEvent performs a merge with any union data inside the RequestBody, using the provided NewFollowEvent
func (t *RequestBody) MergeNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUnfollowEvent returns the union data inside the RequestBody as a NewUnfollowEvent
func (t RequestBody) AsNewUnfollowEvent() (NewUnfollowEvent, error) {
	var body NewUnfollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUnfollowEvent overwrites any union data inside the RequestBody as the provided NewUnfollowEvent
func (t *RequestBody) FromNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUnfollowEvent performs a merge with any union data inside the RequestBody, using the provided NewUnfollowEvent
func (t *RequestBody) MergeNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllTweetsEvent returns the union data inside the RequestBody as a GetAllTweetsEvent
func (t RequestBody) AsGetAllTweetsEvent() (GetAllTweetsEvent, error) {
	var body GetAllTweetsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllTweetsEvent overwrites any union data inside the RequestBody as the provided GetAllTweetsEvent
func (t *RequestBody) FromGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllTweetsEvent performs a merge with any union data inside the RequestBody, using the provided GetAllTweetsEvent
func (t *RequestBody) MergeGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTimelineEvent returns the union data inside the RequestBody as a GetTimelineEvent
func (t RequestBody) AsGetTimelineEvent() (GetTimelineEvent, error) {
	var body GetTimelineEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTimelineEvent overwrites any union data inside the RequestBody as the provided GetTimelineEvent
func (t *RequestBody) FromGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTimelineEvent performs a merge with any union data inside the RequestBody, using the provided GetTimelineEvent
func (t *RequestBody) MergeGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTweetEvent returns the union data inside the RequestBody as a GetTweetEvent
func (t RequestBody) AsGetTweetEvent() (GetTweetEvent, error) {
	var body GetTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTweetEvent overwrites any union data inside the RequestBody as the provided GetTweetEvent
func (t *RequestBody) FromGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTweetEvent performs a merge with any union data inside the RequestBody, using the provided GetTweetEvent
func (t *RequestBody) MergeGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetUserEvent returns the union data inside the RequestBody as a GetUserEvent
func (t RequestBody) AsGetUserEvent() (GetUserEvent, error) {
	var body GetUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetUserEvent overwrites any union data inside the RequestBody as the provided GetUserEvent
func (t *RequestBody) FromGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetUserEvent performs a merge with any union data inside the RequestBody, using the provided GetUserEvent
func (t *RequestBody) MergeGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllUsersEvent returns the union data inside the RequestBody as a GetAllUsersEvent
func (t RequestBody) AsGetAllUsersEvent() (GetAllUsersEvent, error) {
	var body GetAllUsersEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllUsersEvent overwrites any union data inside the RequestBody as the provided GetAllUsersEvent
func (t *RequestBody) FromGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllUsersEvent performs a merge with any union data inside the RequestBody, using the provided GetAllUsersEvent
func (t *RequestBody) MergeGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllRepliesEvent returns the union data inside the RequestBody as a GetAllRepliesEvent
func (t RequestBody) AsGetAllRepliesEvent() (GetAllRepliesEvent, error) {
	var body GetAllRepliesEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllRepliesEvent overwrites any union data inside the RequestBody as the provided GetAllRepliesEvent
func (t *RequestBody) FromGetAllRepliesEvent(v GetAllRepliesEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllRepliesEvent performs a merge with any union data inside the RequestBody, using the provided GetAllRepliesEvent
func (t *RequestBody) MergeGetAllRepliesEvent(v GetAllRepliesEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewReplyEvent returns the union data inside the RequestBody as a NewReplyEvent
func (t RequestBody) AsNewReplyEvent() (NewReplyEvent, error) {
	var body NewReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewReplyEvent overwrites any union data inside the RequestBody as the provided NewReplyEvent
func (t *RequestBody) FromNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewReplyEvent performs a merge with any union data inside the RequestBody, using the provided NewReplyEvent
func (t *RequestBody) MergeNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetReplyEvent returns the union data inside the RequestBody as a GetReplyEvent
func (t RequestBody) AsGetReplyEvent() (GetReplyEvent, error) {
	var body GetReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetReplyEvent overwrites any union data inside the RequestBody as the provided GetReplyEvent
func (t *RequestBody) FromGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetReplyEvent performs a merge with any union data inside the RequestBody, using the provided GetReplyEvent
func (t *RequestBody) MergeGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLoginEvent returns the union data inside the RequestBody as a LoginEvent
func (t RequestBody) AsLoginEvent() (LoginEvent, error) {
	var body LoginEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginEvent overwrites any union data inside the RequestBody as the provided LoginEvent
func (t *RequestBody) FromLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginEvent performs a merge with any union data inside the RequestBody, using the provided LoginEvent
func (t *RequestBody) MergeLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLogoutEvent returns the union data inside the RequestBody as a LogoutEvent
func (t RequestBody) AsLogoutEvent() (LogoutEvent, error) {
	var body LogoutEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLogoutEvent overwrites any union data inside the RequestBody as the provided LogoutEvent
func (t *RequestBody) FromLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLogoutEvent performs a merge with any union data inside the RequestBody, using the provided LogoutEvent
func (t *RequestBody) MergeLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RequestBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RequestBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorResponse returns the union data inside the ResponseBody as a ErrorResponse
func (t ResponseBody) AsErrorResponse() (ErrorResponse, error) {
	var body ErrorResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorResponse overwrites any union data inside the ResponseBody as the provided ErrorResponse
func (t *ResponseBody) FromErrorResponse(v ErrorResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorResponse performs a merge with any union data inside the ResponseBody, using the provided ErrorResponse
func (t *ResponseBody) MergeErrorResponse(v ErrorResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLoginResponse returns the union data inside the ResponseBody as a LoginResponse
func (t ResponseBody) AsLoginResponse() (LoginResponse, error) {
	var body LoginResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginResponse overwrites any union data inside the ResponseBody as the provided LoginResponse
func (t *ResponseBody) FromLoginResponse(v LoginResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginResponse performs a merge with any union data inside the ResponseBody, using the provided LoginResponse
func (t *ResponseBody) MergeLoginResponse(v LoginResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUsersResponse returns the union data inside the ResponseBody as a UsersResponse
func (t ResponseBody) AsUsersResponse() (UsersResponse, error) {
	var body UsersResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersResponse overwrites any union data inside the ResponseBody as the provided UsersResponse
func (t *ResponseBody) FromUsersResponse(v UsersResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersResponse performs a merge with any union data inside the ResponseBody, using the provided UsersResponse
func (t *ResponseBody) MergeUsersResponse(v UsersResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTweetsResponse returns the union data inside the ResponseBody as a TweetsResponse
func (t ResponseBody) AsTweetsResponse() (TweetsResponse, error) {
	var body TweetsResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTweetsResponse overwrites any union data inside the ResponseBody as the provided TweetsResponse
func (t *ResponseBody) FromTweetsResponse(v TweetsResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTweetsResponse performs a merge with any union data inside the ResponseBody, using the provided TweetsResponse
func (t *ResponseBody) MergeTweetsResponse(v TweetsResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatsResponse returns the union data inside the ResponseBody as a ChatsResponse
func (t ResponseBody) AsChatsResponse() (ChatsResponse, error) {
	var body ChatsResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatsResponse overwrites any union data inside the ResponseBody as the provided ChatsResponse
func (t *ResponseBody) FromChatsResponse(v ChatsResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatsResponse performs a merge with any union data inside the ResponseBody, using the provided ChatsResponse
func (t *ResponseBody) MergeChatsResponse(v ChatsResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessagesResponse returns the union data inside the ResponseBody as a MessagesResponse
func (t ResponseBody) AsMessagesResponse() (MessagesResponse, error) {
	var body MessagesResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessagesResponse overwrites any union data inside the ResponseBody as the provided MessagesResponse
func (t *ResponseBody) FromMessagesResponse(v MessagesResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessagesResponse performs a merge with any union data inside the ResponseBody, using the provided MessagesResponse
func (t *ResponseBody) MergeMessagesResponse(v MessagesResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRepliesTreeResponse returns the union data inside the ResponseBody as a RepliesTreeResponse
func (t ResponseBody) AsRepliesTreeResponse() (RepliesTreeResponse, error) {
	var body RepliesTreeResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepliesTreeResponse overwrites any union data inside the ResponseBody as the provided RepliesTreeResponse
func (t *ResponseBody) FromRepliesTreeResponse(v RepliesTreeResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepliesTreeResponse performs a merge with any union data inside the ResponseBody, using the provided RepliesTreeResponse
func (t *ResponseBody) MergeRepliesTreeResponse(v RepliesTreeResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFolloweesResponse returns the union data inside the ResponseBody as a FolloweesResponse
func (t ResponseBody) AsFolloweesResponse() (FolloweesResponse, error) {
	var body FolloweesResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFolloweesResponse overwrites any union data inside the ResponseBody as the provided FolloweesResponse
func (t *ResponseBody) FromFolloweesResponse(v FolloweesResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFolloweesResponse performs a merge with any union data inside the ResponseBody, using the provided FolloweesResponse
func (t *ResponseBody) MergeFolloweesResponse(v FolloweesResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFollowersResponse returns the union data inside the ResponseBody as a FollowersResponse
func (t ResponseBody) AsFollowersResponse() (FollowersResponse, error) {
	var body FollowersResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFollowersResponse overwrites any union data inside the ResponseBody as the provided FollowersResponse
func (t *ResponseBody) FromFollowersResponse(v FollowersResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFollowersResponse performs a merge with any union data inside the ResponseBody, using the provided FollowersResponse
func (t *ResponseBody) MergeFollowersResponse(v FollowersResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewReplyResponse returns the union data inside the ResponseBody as a NewReplyResponse
func (t ResponseBody) AsNewReplyResponse() (NewReplyResponse, error) {
	var body NewReplyResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewReplyResponse overwrites any union data inside the ResponseBody as the provided NewReplyResponse
func (t *ResponseBody) FromNewReplyResponse(v NewReplyResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewReplyResponse performs a merge with any union data inside the ResponseBody, using the provided NewReplyResponse
func (t *ResponseBody) MergeNewReplyResponse(v NewReplyResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponseBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponseBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
