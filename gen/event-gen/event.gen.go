// Package event provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package event

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// BaseEvent defines model for BaseEvent.
type BaseEvent struct {
	EventType string    `json:"event_type"`
	Timestamp time.Time `json:"timestamp"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code      int       `json:"code"`
	EventType string    `json:"event_type"`
	Message   string    `json:"message"`
	Timestamp time.Time `json:"timestamp"`
}

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Chats     []externalRef0.Chat `json:"chats"`
	Cursor    *string             `json:"cursor,omitempty"`
	EventType string              `json:"event_type"`
	Limit     *int                `json:"limit,omitempty"`
	Timestamp time.Time           `json:"timestamp"`
	UserId    string              `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId    string    `json:"chat_id"`
	Cursor    *string   `json:"cursor,omitempty"`
	EventType string    `json:"event_type"`
	Limit     *uint64   `json:"limit,omitempty"`
	Timestamp time.Time `json:"timestamp"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor        *string   `json:"cursor,omitempty"`
	EventType     string    `json:"event_type"`
	Limit         *uint64   `json:"limit,omitempty"`
	ParentReplyId string    `json:"parent_reply_id"`
	RootId        string    `json:"root_id"`
	Timestamp     time.Time `json:"timestamp"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor    *string   `json:"cursor,omitempty"`
	EventType string    `json:"event_type"`
	Limit     *uint64   `json:"limit,omitempty"`
	Timestamp time.Time `json:"timestamp"`
	UserId    string    `json:"userId"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string   `json:"cursor,omitempty"`
	EventType   string    `json:"event_type"`
	IsFollowed  *bool     `json:"is_followed,omitempty"`
	IsFollowing *bool     `json:"is_following,omitempty"`
	Limit       *uint64   `json:"limit,omitempty"`
	Timestamp   time.Time `json:"timestamp"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	EventType  string    `json:"event_type"`
	FromUserId string    `json:"from_user_id"`
	Timestamp  time.Time `json:"timestamp"`
	ToUserId   string    `json:"to_user_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId    string    `json:"chat_id"`
	EventType string    `json:"event_type"`
	Id        string    `json:"id"`
	Timestamp time.Time `json:"timestamp"`
	UserId    string    `json:"user_id"`
	Username  *string   `json:"username,omitempty"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	EventType     string    `json:"event_type"`
	ParentReplyId string    `json:"parent_reply_id"`
	ReplyId       string    `json:"reply_id"`
	RootId        string    `json:"root_id"`
	Timestamp     time.Time `json:"timestamp"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent struct {
	Cursor    *string   `json:"cursor,omitempty"`
	EventType string    `json:"event_type"`
	Limit     *uint64   `json:"limit,omitempty"`
	Timestamp time.Time `json:"timestamp"`
	UserId    string    `json:"userId"`
}

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	EventType string    `json:"event_type"`
	Timestamp time.Time `json:"timestamp"`
	TweetId   string    `json:"tweetId"`
	UserId    string    `json:"userId"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	EventType string    `json:"event_type"`
	Timestamp time.Time `json:"timestamp"`
	UserId    string    `json:"userId"`
}

// LoginEvent defines model for LoginEvent.
type LoginEvent struct {
	EventType string    `json:"event_type"`
	Password  string    `json:"password"`
	Timestamp time.Time `json:"timestamp"`
	Username  string    `json:"username"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent struct {
	EventType string    `json:"event_type"`
	Timestamp time.Time `json:"timestamp"`
	Token     string    `json:"token"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	EventType  string    `json:"event_type"`
	FromUserId string    `json:"from_user_id"`
	Timestamp  time.Time `json:"timestamp"`
	ToUserId   string    `json:"to_user_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	EventType string       `json:"event_type"`
	Request   *interface{} `json:"request,omitempty"`
	Timestamp time.Time    `json:"timestamp"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	CreatedAt *time.Time                `json:"created_at,omitempty"`
	EventType string                    `json:"event_type"`
	Message   *externalRef0.ChatMessage `json:"message,omitempty"`
	Timestamp time.Time                 `json:"timestamp"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent struct {
	EventType string              `json:"event_type"`
	Timestamp time.Time           `json:"timestamp"`
	Tweet     *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	EventType string              `json:"event_type"`
	Timestamp time.Time           `json:"timestamp"`
	Tweet     *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	EventType string       `json:"event_type"`
	Request   *interface{} `json:"request,omitempty"`
	Timestamp time.Time    `json:"timestamp"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	EventType string             `json:"event_type"`
	Timestamp time.Time          `json:"timestamp"`
	User      *externalRef0.User `json:"user,omitempty"`
}

// Owner defines model for Owner.
type Owner = externalRef0.User

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYUW/bNhD+Kwa3R6VJsWEPftuGbiiQpkCRYA9FIdDS2b5ZIrXjKaoR5L8PpGRbsimb",
	"cuU2D3myJZF33328+47kk0h0XmgFio2YPgmTLCGX7u8f0sC7R1BsHwrSBRAjuE9gX8e8LsA+1b/CMKFa",
	"iOdIMOZgWOaF/TrXlEsWU5FKhiv7SUT7U54jQfBfiQSpmH5um28b+7Kdp2f/QsLW1TsiTVuUMss+zsX0",
	"85P4mWAupuKn6114101s17vAnqP9yBKdtmNCxbAAsp5yMEYufAHvoXcmduMPUX95jsTfwL9n2Z9LyWZM",
	"9Nae/YMMuftzzFKqc4kqtiDcqtUoJZFc2+ekJKPJu8AZ5sh+mkoDFGMaQJPDuptwjKcPNZdjU+XHeVbk",
	"kfh6tdBXzdsSFf/2qzfkU6F+giLDcSMdK5pIFJJsZRIU2bqPPNKagxJgM/DQ7DF+7isAfqH02FR+HxB5",
	"M+5YmA8G6DtFiSae6yzTFbShz7TOQKrOADvBO2JwVfjjtko0ZswEkiGNJYf2oUjMSedxS8NyVLegFrwU",
	"07ee4ayDB+/lQMdRx1DUBt6bI40kfidF7HkdTpQdqWQOYcXR0NAAcu57ibCCuR6RhiCNu7AAtjz0xn2P",
	"OWSovi0Djo081Nuta/tuRMrZ2nvfn2IDNDXaGuslzkrriOBHEf1bvUA1ahIbU2nqpzS8Ft3IaGexNwBd",
	"jpoTegXqNMJ6mB/THVSvHSWwo9xB9Zfr8SOyZcGBscZ6Wv4dVBdoY2esUetsF3hganCL/sjG7ktO1wIR",
	"OoE+gu0iAj4Stgc1/xGJeIGuEEiI9dzHx8dK1Xa61uWjZEmd/J6hkrT2JfdMJqsF6VKlMeZNlodMQ+3t",
	"HjMkXtpqCi+vs2SzOZLEs3XnQuNQMPeuLZqJZGJV5h1/9fEj8lxadI43Q12hWgxw1bNpzHQiGbXyflQ6",
	"hb7dpiu9IbG2u/+JXlTBzODeQpeUnby/cy3H5k/U3kFsomitrUW9v2Lt1eimwYk2Fon2hdb0Er079FzU",
	"beKHG7AiHQjFR3Bgv++4O8Hah10fHHBbphU3unkin85Zgh9/8txF2EnnsFy8xZWHTle04fDP2Ay28mLj",
	"6wjKT7Dt4C8b6L0f5oiJleEKBl+hu1X2NAhnLE50qdirzjkqzK1y3/iUurkV6L2DqKV/KNbNWnvgbkye",
	"jbj/6iMSDF95xDQ6r7DrRLNI2lW9IzpqXcoMrvUH87pXe92rve7VAvZqFgWqucvaFExCWNSMCnegMpO5",
	"pomcpGhRz0qGdHJfITPQldXUiSyKDJtViAQjZ9b6P5KKyR1wpWklIvEIZGqjb9/cvLmxLOkClCxQTMUv",
	"7pWtfV4adzL8PwAA///wXXm6Cx8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
