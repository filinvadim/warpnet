// Package event provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package event

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AcceptedResponse.
const (
	Accepted AcceptedResponse = "Accepted"
)

// AcceptedResponse defines model for AcceptedResponse.
type AcceptedResponse string

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor string              `json:"cursor"`
	UserId *string             `json:"user_id,omitempty"`
}

// DeleteReplyEvent defines model for DeleteReplyEvent.
type DeleteReplyEvent = GetReplyEvent

// DeleteTweetEvent defines model for DeleteTweetEvent.
type DeleteTweetEvent = GetTweetEvent

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FolloweesResponse defines model for FolloweesResponse.
type FolloweesResponse struct {
	Cursor    string                   `json:"cursor"`
	Followees []externalRef0.Following `json:"followees"`
	Follower  string                   `json:"follower"`
}

// FollowersResponse defines model for FollowersResponse.
type FollowersResponse struct {
	Cursor    string                   `json:"cursor"`
	Followee  string                   `json:"followee"`
	Followers []externalRef0.Following `json:"followers"`
}

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor *string             `json:"cursor,omitempty"`
	Limit  *int                `json:"limit,omitempty"`
	UserId string              `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId string  `json:"chat_id"`
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor   *string `json:"cursor,omitempty"`
	Limit    *uint64 `json:"limit,omitempty"`
	ParentId string  `json:"parent_id"`
	RootId   string  `json:"root_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// GetFolloweesEvent defines model for GetFolloweesEvent.
type GetFolloweesEvent = GetFollowersEvent

// GetFollowersEvent defines model for GetFollowersEvent.
type GetFollowersEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetLikersEvent defines model for GetLikersEvent.
type GetLikersEvent struct {
	Cursor  *string `json:"cursor,omitempty"`
	Limit   *uint64 `json:"limit,omitempty"`
	TweetId string  `json:"tweet_id"`
}

// GetLikersResponse defines model for GetLikersResponse.
type GetLikersResponse = UsersResponse

// GetLikesNumEvent defines model for GetLikesNumEvent.
type GetLikesNumEvent struct {
	TweetId string `json:"tweet_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId   string  `json:"chat_id"`
	Id       string  `json:"id"`
	UserId   string  `json:"user_id"`
	Username *string `json:"username,omitempty"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	ParentId string `json:"parent_id"`
	ReplyId  string `json:"reply_id"`
	RootId   string `json:"root_id"`
	UserId   string `json:"user_id"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent = GetAllTweetsEvent

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"user_id"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId string `json:"user_id"`
}

// LikeEvent defines model for LikeEvent.
type LikeEvent struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// LikesCountResponse defines model for LikesCountResponse.
type LikesCountResponse struct {
	Count uint64 `json:"count"`
}

// LoginEvent defines model for LoginEvent.
type LoginEvent struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Owner Owner  `json:"owner"`
	Token string `json:"token"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent struct {
	Token string `json:"token"`
}

// Message defines model for Message.
type Message struct {
	Body      *Message_Body `json:"body,omitempty"`
	MessageId string        `json:"message_id"`
	NodeId    string        `json:"node_id"`
	Path      string        `json:"path"`
	Timestamp time.Time     `json:"timestamp,omitempty"`
	Version   string        `json:"version"`
}

// Message_Body defines model for Message.Body.
type Message_Body struct {
	union json.RawMessage
}

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	ChatId   *string                    `json:"chat_id,omitempty"`
	Cursor   string                     `json:"cursor"`
	Messages []externalRef0.ChatMessage `json:"messages"`
	UserId   *string                    `json:"user_id,omitempty"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent = externalRef0.Following

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	CreatedAt *time.Time                `json:"created_at,omitempty"`
	Message   *externalRef0.ChatMessage `json:"message,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent = externalRef0.Tweet

// NewReplyResponse defines model for NewReplyResponse.
type NewReplyResponse = externalRef0.Tweet

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent = externalRef0.Tweet

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent = externalRef0.Following

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent = externalRef0.User

// Owner defines model for Owner.
type Owner = externalRef0.Owner

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string                   `json:"cursor"`
	Replies []externalRef0.ReplyNode `json:"replies"`
	UserId  *string                  `json:"user_id,omitempty"`
}

// RequestBody defines model for RequestBody.
type RequestBody struct {
	union json.RawMessage
}

// ResponseBody defines model for ResponseBody.
type ResponseBody struct {
	union json.RawMessage
}

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string               `json:"cursor"`
	Tweets []externalRef0.Tweet `json:"tweets"`
	UserId string               `json:"user_id"`
}

// UnlikeEvent defines model for UnlikeEvent.
type UnlikeEvent = LikeEvent

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string              `json:"cursor"`
	Users  []externalRef0.User `json:"users"`
}

// OptionsPrivateDeleteTweetVersionJSONRequestBody defines body for OptionsPrivateDeleteTweetVersion for application/json ContentType.
type OptionsPrivateDeleteTweetVersionJSONRequestBody = Message

// OptionsPrivateGetTimelineVersionJSONRequestBody defines body for OptionsPrivateGetTimelineVersion for application/json ContentType.
type OptionsPrivateGetTimelineVersionJSONRequestBody = Message

// OptionsPrivatePostFollowVersionJSONRequestBody defines body for OptionsPrivatePostFollowVersion for application/json ContentType.
type OptionsPrivatePostFollowVersionJSONRequestBody = Message

// OptionsPrivatePostLoginVersionJSONRequestBody defines body for OptionsPrivatePostLoginVersion for application/json ContentType.
type OptionsPrivatePostLoginVersionJSONRequestBody = Message

// OptionsPrivatePostLogoutVersionJSONRequestBody defines body for OptionsPrivatePostLogoutVersion for application/json ContentType.
type OptionsPrivatePostLogoutVersionJSONRequestBody = Message

// OptionsPrivatePostTweetVersionJSONRequestBody defines body for OptionsPrivatePostTweetVersion for application/json ContentType.
type OptionsPrivatePostTweetVersionJSONRequestBody = Message

// OptionsPrivatePostUnfollowVersionJSONRequestBody defines body for OptionsPrivatePostUnfollowVersion for application/json ContentType.
type OptionsPrivatePostUnfollowVersionJSONRequestBody = Message

// OptionsPrivatePostUserVersionJSONRequestBody defines body for OptionsPrivatePostUserVersion for application/json ContentType.
type OptionsPrivatePostUserVersionJSONRequestBody = Message

// OptionsPublicDeleteReplyVersionJSONRequestBody defines body for OptionsPublicDeleteReplyVersion for application/json ContentType.
type OptionsPublicDeleteReplyVersionJSONRequestBody = Message

// OptionsPublicGetFolloweesVersionJSONRequestBody defines body for OptionsPublicGetFolloweesVersion for application/json ContentType.
type OptionsPublicGetFolloweesVersionJSONRequestBody = Message

// OptionsPublicGetFollowersVersionJSONRequestBody defines body for OptionsPublicGetFollowersVersion for application/json ContentType.
type OptionsPublicGetFollowersVersionJSONRequestBody = Message

// OptionsPublicGetInfoVersionJSONRequestBody defines body for OptionsPublicGetInfoVersion for application/json ContentType.
type OptionsPublicGetInfoVersionJSONRequestBody = Message

// OptionsPublicGetLikersVersionJSONRequestBody defines body for OptionsPublicGetLikersVersion for application/json ContentType.
type OptionsPublicGetLikersVersionJSONRequestBody = Message

// OptionsPublicGetLikesnumVersionJSONRequestBody defines body for OptionsPublicGetLikesnumVersion for application/json ContentType.
type OptionsPublicGetLikesnumVersionJSONRequestBody = Message

// OptionsPublicGetRepliesVersionJSONRequestBody defines body for OptionsPublicGetRepliesVersion for application/json ContentType.
type OptionsPublicGetRepliesVersionJSONRequestBody = Message

// OptionsPublicGetReplyVersionJSONRequestBody defines body for OptionsPublicGetReplyVersion for application/json ContentType.
type OptionsPublicGetReplyVersionJSONRequestBody = Message

// OptionsPublicGetTweetVersionJSONRequestBody defines body for OptionsPublicGetTweetVersion for application/json ContentType.
type OptionsPublicGetTweetVersionJSONRequestBody = Message

// OptionsPublicGetTweetsVersionJSONRequestBody defines body for OptionsPublicGetTweetsVersion for application/json ContentType.
type OptionsPublicGetTweetsVersionJSONRequestBody = Message

// OptionsPublicGetUserVersionJSONRequestBody defines body for OptionsPublicGetUserVersion for application/json ContentType.
type OptionsPublicGetUserVersionJSONRequestBody = Message

// OptionsPublicGetUsersVersionJSONRequestBody defines body for OptionsPublicGetUsersVersion for application/json ContentType.
type OptionsPublicGetUsersVersionJSONRequestBody = Message

// OptionsPublicPostLikeVersionJSONRequestBody defines body for OptionsPublicPostLikeVersion for application/json ContentType.
type OptionsPublicPostLikeVersionJSONRequestBody = Message

// OptionsPublicPostReplyVersionJSONRequestBody defines body for OptionsPublicPostReplyVersion for application/json ContentType.
type OptionsPublicPostReplyVersionJSONRequestBody = Message

// OptionsPublicPostUnlikeVersionJSONRequestBody defines body for OptionsPublicPostUnlikeVersion for application/json ContentType.
type OptionsPublicPostUnlikeVersionJSONRequestBody = Message

// AsRequestBody returns the union data inside the Message_Body as a RequestBody
func (t Message_Body) AsRequestBody() (RequestBody, error) {
	var body RequestBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRequestBody overwrites any union data inside the Message_Body as the provided RequestBody
func (t *Message_Body) FromRequestBody(v RequestBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRequestBody performs a merge with any union data inside the Message_Body, using the provided RequestBody
func (t *Message_Body) MergeRequestBody(v RequestBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResponseBody returns the union data inside the Message_Body as a ResponseBody
func (t Message_Body) AsResponseBody() (ResponseBody, error) {
	var body ResponseBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResponseBody overwrites any union data inside the Message_Body as the provided ResponseBody
func (t *Message_Body) FromResponseBody(v ResponseBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResponseBody performs a merge with any union data inside the Message_Body, using the provided ResponseBody
func (t *Message_Body) MergeResponseBody(v ResponseBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Message_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Message_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorEvent returns the union data inside the RequestBody as a ErrorEvent
func (t RequestBody) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the RequestBody as the provided ErrorEvent
func (t *RequestBody) FromErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the RequestBody, using the provided ErrorEvent
func (t *RequestBody) MergeErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewTweetEvent returns the union data inside the RequestBody as a NewTweetEvent
func (t RequestBody) AsNewTweetEvent() (NewTweetEvent, error) {
	var body NewTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewTweetEvent overwrites any union data inside the RequestBody as the provided NewTweetEvent
func (t *RequestBody) FromNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewTweetEvent performs a merge with any union data inside the RequestBody, using the provided NewTweetEvent
func (t *RequestBody) MergeNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUserEvent returns the union data inside the RequestBody as a NewUserEvent
func (t RequestBody) AsNewUserEvent() (NewUserEvent, error) {
	var body NewUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUserEvent overwrites any union data inside the RequestBody as the provided NewUserEvent
func (t *RequestBody) FromNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUserEvent performs a merge with any union data inside the RequestBody, using the provided NewUserEvent
func (t *RequestBody) MergeNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeleteTweetEvent returns the union data inside the RequestBody as a DeleteTweetEvent
func (t RequestBody) AsDeleteTweetEvent() (DeleteTweetEvent, error) {
	var body DeleteTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeleteTweetEvent overwrites any union data inside the RequestBody as the provided DeleteTweetEvent
func (t *RequestBody) FromDeleteTweetEvent(v DeleteTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeleteTweetEvent performs a merge with any union data inside the RequestBody, using the provided DeleteTweetEvent
func (t *RequestBody) MergeDeleteTweetEvent(v DeleteTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeleteReplyEvent returns the union data inside the RequestBody as a DeleteReplyEvent
func (t RequestBody) AsDeleteReplyEvent() (DeleteReplyEvent, error) {
	var body DeleteReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeleteReplyEvent overwrites any union data inside the RequestBody as the provided DeleteReplyEvent
func (t *RequestBody) FromDeleteReplyEvent(v DeleteReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeleteReplyEvent performs a merge with any union data inside the RequestBody, using the provided DeleteReplyEvent
func (t *RequestBody) MergeDeleteReplyEvent(v DeleteReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewFollowEvent returns the union data inside the RequestBody as a NewFollowEvent
func (t RequestBody) AsNewFollowEvent() (NewFollowEvent, error) {
	var body NewFollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewFollowEvent overwrites any union data inside the RequestBody as the provided NewFollowEvent
func (t *RequestBody) FromNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewFollowEvent performs a merge with any union data inside the RequestBody, using the provided NewFollowEvent
func (t *RequestBody) MergeNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUnfollowEvent returns the union data inside the RequestBody as a NewUnfollowEvent
func (t RequestBody) AsNewUnfollowEvent() (NewUnfollowEvent, error) {
	var body NewUnfollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUnfollowEvent overwrites any union data inside the RequestBody as the provided NewUnfollowEvent
func (t *RequestBody) FromNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUnfollowEvent performs a merge with any union data inside the RequestBody, using the provided NewUnfollowEvent
func (t *RequestBody) MergeNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllTweetsEvent returns the union data inside the RequestBody as a GetAllTweetsEvent
func (t RequestBody) AsGetAllTweetsEvent() (GetAllTweetsEvent, error) {
	var body GetAllTweetsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllTweetsEvent overwrites any union data inside the RequestBody as the provided GetAllTweetsEvent
func (t *RequestBody) FromGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllTweetsEvent performs a merge with any union data inside the RequestBody, using the provided GetAllTweetsEvent
func (t *RequestBody) MergeGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTimelineEvent returns the union data inside the RequestBody as a GetTimelineEvent
func (t RequestBody) AsGetTimelineEvent() (GetTimelineEvent, error) {
	var body GetTimelineEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTimelineEvent overwrites any union data inside the RequestBody as the provided GetTimelineEvent
func (t *RequestBody) FromGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTimelineEvent performs a merge with any union data inside the RequestBody, using the provided GetTimelineEvent
func (t *RequestBody) MergeGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTweetEvent returns the union data inside the RequestBody as a GetTweetEvent
func (t RequestBody) AsGetTweetEvent() (GetTweetEvent, error) {
	var body GetTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTweetEvent overwrites any union data inside the RequestBody as the provided GetTweetEvent
func (t *RequestBody) FromGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTweetEvent performs a merge with any union data inside the RequestBody, using the provided GetTweetEvent
func (t *RequestBody) MergeGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetUserEvent returns the union data inside the RequestBody as a GetUserEvent
func (t RequestBody) AsGetUserEvent() (GetUserEvent, error) {
	var body GetUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetUserEvent overwrites any union data inside the RequestBody as the provided GetUserEvent
func (t *RequestBody) FromGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetUserEvent performs a merge with any union data inside the RequestBody, using the provided GetUserEvent
func (t *RequestBody) MergeGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllUsersEvent returns the union data inside the RequestBody as a GetAllUsersEvent
func (t RequestBody) AsGetAllUsersEvent() (GetAllUsersEvent, error) {
	var body GetAllUsersEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllUsersEvent overwrites any union data inside the RequestBody as the provided GetAllUsersEvent
func (t *RequestBody) FromGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllUsersEvent performs a merge with any union data inside the RequestBody, using the provided GetAllUsersEvent
func (t *RequestBody) MergeGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllRepliesEvent returns the union data inside the RequestBody as a GetAllRepliesEvent
func (t RequestBody) AsGetAllRepliesEvent() (GetAllRepliesEvent, error) {
	var body GetAllRepliesEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllRepliesEvent overwrites any union data inside the RequestBody as the provided GetAllRepliesEvent
func (t *RequestBody) FromGetAllRepliesEvent(v GetAllRepliesEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllRepliesEvent performs a merge with any union data inside the RequestBody, using the provided GetAllRepliesEvent
func (t *RequestBody) MergeGetAllRepliesEvent(v GetAllRepliesEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewReplyEvent returns the union data inside the RequestBody as a NewReplyEvent
func (t RequestBody) AsNewReplyEvent() (NewReplyEvent, error) {
	var body NewReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewReplyEvent overwrites any union data inside the RequestBody as the provided NewReplyEvent
func (t *RequestBody) FromNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewReplyEvent performs a merge with any union data inside the RequestBody, using the provided NewReplyEvent
func (t *RequestBody) MergeNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetReplyEvent returns the union data inside the RequestBody as a GetReplyEvent
func (t RequestBody) AsGetReplyEvent() (GetReplyEvent, error) {
	var body GetReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetReplyEvent overwrites any union data inside the RequestBody as the provided GetReplyEvent
func (t *RequestBody) FromGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetReplyEvent performs a merge with any union data inside the RequestBody, using the provided GetReplyEvent
func (t *RequestBody) MergeGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLoginEvent returns the union data inside the RequestBody as a LoginEvent
func (t RequestBody) AsLoginEvent() (LoginEvent, error) {
	var body LoginEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginEvent overwrites any union data inside the RequestBody as the provided LoginEvent
func (t *RequestBody) FromLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginEvent performs a merge with any union data inside the RequestBody, using the provided LoginEvent
func (t *RequestBody) MergeLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLogoutEvent returns the union data inside the RequestBody as a LogoutEvent
func (t RequestBody) AsLogoutEvent() (LogoutEvent, error) {
	var body LogoutEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLogoutEvent overwrites any union data inside the RequestBody as the provided LogoutEvent
func (t *RequestBody) FromLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLogoutEvent performs a merge with any union data inside the RequestBody, using the provided LogoutEvent
func (t *RequestBody) MergeLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLikeEvent returns the union data inside the RequestBody as a LikeEvent
func (t RequestBody) AsLikeEvent() (LikeEvent, error) {
	var body LikeEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLikeEvent overwrites any union data inside the RequestBody as the provided LikeEvent
func (t *RequestBody) FromLikeEvent(v LikeEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLikeEvent performs a merge with any union data inside the RequestBody, using the provided LikeEvent
func (t *RequestBody) MergeLikeEvent(v LikeEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnlikeEvent returns the union data inside the RequestBody as a UnlikeEvent
func (t RequestBody) AsUnlikeEvent() (UnlikeEvent, error) {
	var body UnlikeEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnlikeEvent overwrites any union data inside the RequestBody as the provided UnlikeEvent
func (t *RequestBody) FromUnlikeEvent(v UnlikeEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnlikeEvent performs a merge with any union data inside the RequestBody, using the provided UnlikeEvent
func (t *RequestBody) MergeUnlikeEvent(v UnlikeEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetLikesNumEvent returns the union data inside the RequestBody as a GetLikesNumEvent
func (t RequestBody) AsGetLikesNumEvent() (GetLikesNumEvent, error) {
	var body GetLikesNumEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetLikesNumEvent overwrites any union data inside the RequestBody as the provided GetLikesNumEvent
func (t *RequestBody) FromGetLikesNumEvent(v GetLikesNumEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetLikesNumEvent performs a merge with any union data inside the RequestBody, using the provided GetLikesNumEvent
func (t *RequestBody) MergeGetLikesNumEvent(v GetLikesNumEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetLikersEvent returns the union data inside the RequestBody as a GetLikersEvent
func (t RequestBody) AsGetLikersEvent() (GetLikersEvent, error) {
	var body GetLikersEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetLikersEvent overwrites any union data inside the RequestBody as the provided GetLikersEvent
func (t *RequestBody) FromGetLikersEvent(v GetLikersEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetLikersEvent performs a merge with any union data inside the RequestBody, using the provided GetLikersEvent
func (t *RequestBody) MergeGetLikersEvent(v GetLikersEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RequestBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RequestBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorResponse returns the union data inside the ResponseBody as a ErrorResponse
func (t ResponseBody) AsErrorResponse() (ErrorResponse, error) {
	var body ErrorResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorResponse overwrites any union data inside the ResponseBody as the provided ErrorResponse
func (t *ResponseBody) FromErrorResponse(v ErrorResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorResponse performs a merge with any union data inside the ResponseBody, using the provided ErrorResponse
func (t *ResponseBody) MergeErrorResponse(v ErrorResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLoginResponse returns the union data inside the ResponseBody as a LoginResponse
func (t ResponseBody) AsLoginResponse() (LoginResponse, error) {
	var body LoginResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginResponse overwrites any union data inside the ResponseBody as the provided LoginResponse
func (t *ResponseBody) FromLoginResponse(v LoginResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginResponse performs a merge with any union data inside the ResponseBody, using the provided LoginResponse
func (t *ResponseBody) MergeLoginResponse(v LoginResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUsersResponse returns the union data inside the ResponseBody as a UsersResponse
func (t ResponseBody) AsUsersResponse() (UsersResponse, error) {
	var body UsersResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersResponse overwrites any union data inside the ResponseBody as the provided UsersResponse
func (t *ResponseBody) FromUsersResponse(v UsersResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersResponse performs a merge with any union data inside the ResponseBody, using the provided UsersResponse
func (t *ResponseBody) MergeUsersResponse(v UsersResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTweetsResponse returns the union data inside the ResponseBody as a TweetsResponse
func (t ResponseBody) AsTweetsResponse() (TweetsResponse, error) {
	var body TweetsResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTweetsResponse overwrites any union data inside the ResponseBody as the provided TweetsResponse
func (t *ResponseBody) FromTweetsResponse(v TweetsResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTweetsResponse performs a merge with any union data inside the ResponseBody, using the provided TweetsResponse
func (t *ResponseBody) MergeTweetsResponse(v TweetsResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatsResponse returns the union data inside the ResponseBody as a ChatsResponse
func (t ResponseBody) AsChatsResponse() (ChatsResponse, error) {
	var body ChatsResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatsResponse overwrites any union data inside the ResponseBody as the provided ChatsResponse
func (t *ResponseBody) FromChatsResponse(v ChatsResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatsResponse performs a merge with any union data inside the ResponseBody, using the provided ChatsResponse
func (t *ResponseBody) MergeChatsResponse(v ChatsResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMessagesResponse returns the union data inside the ResponseBody as a MessagesResponse
func (t ResponseBody) AsMessagesResponse() (MessagesResponse, error) {
	var body MessagesResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMessagesResponse overwrites any union data inside the ResponseBody as the provided MessagesResponse
func (t *ResponseBody) FromMessagesResponse(v MessagesResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMessagesResponse performs a merge with any union data inside the ResponseBody, using the provided MessagesResponse
func (t *ResponseBody) MergeMessagesResponse(v MessagesResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRepliesTreeResponse returns the union data inside the ResponseBody as a RepliesTreeResponse
func (t ResponseBody) AsRepliesTreeResponse() (RepliesTreeResponse, error) {
	var body RepliesTreeResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepliesTreeResponse overwrites any union data inside the ResponseBody as the provided RepliesTreeResponse
func (t *ResponseBody) FromRepliesTreeResponse(v RepliesTreeResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepliesTreeResponse performs a merge with any union data inside the ResponseBody, using the provided RepliesTreeResponse
func (t *ResponseBody) MergeRepliesTreeResponse(v RepliesTreeResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFolloweesResponse returns the union data inside the ResponseBody as a FolloweesResponse
func (t ResponseBody) AsFolloweesResponse() (FolloweesResponse, error) {
	var body FolloweesResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFolloweesResponse overwrites any union data inside the ResponseBody as the provided FolloweesResponse
func (t *ResponseBody) FromFolloweesResponse(v FolloweesResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFolloweesResponse performs a merge with any union data inside the ResponseBody, using the provided FolloweesResponse
func (t *ResponseBody) MergeFolloweesResponse(v FolloweesResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFollowersResponse returns the union data inside the ResponseBody as a FollowersResponse
func (t ResponseBody) AsFollowersResponse() (FollowersResponse, error) {
	var body FollowersResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFollowersResponse overwrites any union data inside the ResponseBody as the provided FollowersResponse
func (t *ResponseBody) FromFollowersResponse(v FollowersResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFollowersResponse performs a merge with any union data inside the ResponseBody, using the provided FollowersResponse
func (t *ResponseBody) MergeFollowersResponse(v FollowersResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewReplyResponse returns the union data inside the ResponseBody as a NewReplyResponse
func (t ResponseBody) AsNewReplyResponse() (NewReplyResponse, error) {
	var body NewReplyResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewReplyResponse overwrites any union data inside the ResponseBody as the provided NewReplyResponse
func (t *ResponseBody) FromNewReplyResponse(v NewReplyResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewReplyResponse performs a merge with any union data inside the ResponseBody, using the provided NewReplyResponse
func (t *ResponseBody) MergeNewReplyResponse(v NewReplyResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLikesCountResponse returns the union data inside the ResponseBody as a LikesCountResponse
func (t ResponseBody) AsLikesCountResponse() (LikesCountResponse, error) {
	var body LikesCountResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLikesCountResponse overwrites any union data inside the ResponseBody as the provided LikesCountResponse
func (t *ResponseBody) FromLikesCountResponse(v LikesCountResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLikesCountResponse performs a merge with any union data inside the ResponseBody, using the provided LikesCountResponse
func (t *ResponseBody) MergeLikesCountResponse(v LikesCountResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetLikersResponse returns the union data inside the ResponseBody as a GetLikersResponse
func (t ResponseBody) AsGetLikersResponse() (GetLikersResponse, error) {
	var body GetLikersResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetLikersResponse overwrites any union data inside the ResponseBody as the provided GetLikersResponse
func (t *ResponseBody) FromGetLikersResponse(v GetLikersResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetLikersResponse performs a merge with any union data inside the ResponseBody, using the provided GetLikersResponse
func (t *ResponseBody) MergeGetLikersResponse(v GetLikersResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAcceptedResponse returns the union data inside the ResponseBody as a AcceptedResponse
func (t ResponseBody) AsAcceptedResponse() (AcceptedResponse, error) {
	var body AcceptedResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAcceptedResponse overwrites any union data inside the ResponseBody as the provided AcceptedResponse
func (t *ResponseBody) FromAcceptedResponse(v AcceptedResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAcceptedResponse performs a merge with any union data inside the ResponseBody, using the provided AcceptedResponse
func (t *ResponseBody) MergeAcceptedResponse(v AcceptedResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponseBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponseBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
