// Package event provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package event

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// BaseEvent defines model for BaseEvent.
type BaseEvent = map[string]interface{}

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor string              `json:"cursor"`
	UserId *string             `json:"user_id,omitempty"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor *string             `json:"cursor,omitempty"`
	Limit  *int                `json:"limit,omitempty"`
	UserId string              `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId string  `json:"chat_id"`
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor        *string `json:"cursor,omitempty"`
	Limit         *uint64 `json:"limit,omitempty"`
	ParentReplyId string  `json:"parent_reply_id"`
	RootId        string  `json:"root_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId   string  `json:"chat_id"`
	Id       string  `json:"id"`
	UserId   string  `json:"user_id"`
	Username *string `json:"username,omitempty"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	ParentReplyId string `json:"parent_reply_id"`
	ReplyId       string `json:"reply_id"`
	RootId        string `json:"root_id"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"user_id"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId string `json:"user_id"`
}

// LoginEvent defines model for LoginEvent.
type LoginEvent struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent struct {
	Token string `json:"token"`
}

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	ChatId   *string                    `json:"chat_id,omitempty"`
	Cursor   string                     `json:"cursor"`
	Messages []externalRef0.ChatMessage `json:"messages"`
	UserId   *string                    `json:"user_id,omitempty"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	Request *interface{} `json:"request,omitempty"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	CreatedAt *time.Time                `json:"created_at,omitempty"`
	Message   *externalRef0.ChatMessage `json:"message,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent struct {
	Tweet *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	Tweet *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	Request *interface{} `json:"request,omitempty"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	User *externalRef0.User `json:"user,omitempty"`
}

// Owner defines model for Owner.
type Owner = externalRef0.Owner

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string                   `json:"cursor"`
	Replies []externalRef0.ReplyNode `json:"replies"`
	UserId  *string                  `json:"user_id,omitempty"`
}

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string               `json:"cursor"`
	Tweets []externalRef0.Tweet `json:"tweets"`
	UserId string               `json:"user_id"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string              `json:"cursor"`
	Users  []externalRef0.User `json:"users"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTY/bNhD9KwbbIze7QYMcfGuLtCiw2QCBFz0EgUBbY5u1RKpDyooR7H8PSNG2ZFE2",
	"paU3OeRmW9TMm8c3H6S/koXMCylAaEWmX4larCFn9uMfTMG7LQhtvuhdAWRK5Pw/WGjyRMmfa6bVR1CF",
	"FArMigJlAag52JcX5rH5wDXk9sOvCEsyJb/cHh3eOm+3qcwZF4mxaWw7ZwyR7cz3RYlKYgOG0sjFyjwq",
	"FWDCU8+zJ0oQ/i85Qkqmn/Y2qEP2mXZDeoco8RAxy7IPSzL9dB75kaQn2uFAptAAxoWGFaDxlINSbAUB",
	"qI2J4/ou6s9PlPwN+vcssxsSE/0L7WDGc679NIVvrsV6fOEcT+9rLmNT5cc5KnJKvtys5I37teRCv33j",
	"DflSqB+hyHjcSGNFQ0nBEIROEIps10ceSqmDBLBf2DV7jp9ZBaB/UHqCtR+i+UcF+EJxcpUsZZbJCprY",
	"51JmwERrgXnBu2JwXvjjNrUoZswITEOaMGtvKTE3n0jKNNxonpsy3SFjiTJPGjuZc3EPYqXXZPras1zL",
	"4MUnImg5ahmiTeC9GnFF8YVqYs/P4USZlYLlEJ4d9ADIuu8lwpTMXUQagqrclUtgw0Nv3DOeQ8bF8xRw",
	"bmW34h5cm98iUq6NvX/S542LjVxy5nqpM8U1IvxIhf9erriIKmSlKon9tIbno11JjxZ7A5BlVF3IDYjL",
	"COtlfkz72fH8uWfEKOgG/FHztgPlG7uHn44OQHwHpAeofjbVwKb6ANVfdsyJyJYBB8oY65l6HqC6Qicf",
	"sUeNA+5QFfdGFrs128IeiND2qDPYrtLDImF7FMvvIcQrtMVAQoznPj4+VKK283yN82L7xj/eFtu33gdC",
	"ppDwoZPJuHG30Wj3bh1kB/BCDaPE3R7MEOBMv+vvaVi/P7Sl2TR/kGmkhrZH4YuwnkZHBWcTdHBsLlVj",
	"xOUAnLvzosSe+0fFZ6wODq9OvNPo+iKoXfhgNy8Tp9cYGUJPpO3ZoUtSkQ6EcsKFTcrAMaPl7gJr74/t",
	"d8B4KoV25frCSDWqWn73M/8xwlZ1vFAFHav3fOOh0yZhOPwRM+jJObQv0R3Kn90tuLt1uo0nV3iWYn1k",
	"jNbA7E3M4MGudc9jLdAjvLPRHQbJH1u4Mz/MiIUm45vhs4jNes8uWmPJQpaiDay+kqaGKJ6XOZneUc/f",
	"Wu5+rvc2cNxssd9rr+hqk6MR919CUqLhi44oo3H1oBaaQdKs8keiaeN6dHDtf1S+osq2TDNskTnnguHO",
	"J8o5W2xWKEuRJjx3nTnkNS69nM856rXJgvC0GDU2uT9ykvmupcauBk4E515ElQijKY/euhpr/Sk01BUX",
	"qwGu+kqEXDDNpRjc3Vx2hQNoSvxCNlQwV/xko0vMwkZLo5+eZnnYW4P6dMeau9GWwYWcMSi4WFrVpqAW",
	"yIuaUWLP9WqylDhhk5Qb1PNSQzqZVVxrwBtTUyesKDLudoESzXVmrP/LsJg8gK4kbgglW0BVG3396u7V",
	"nWFJFiBYwcmU/GZ/Mrmv18peUHwLAAD//+M3jVXjIgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
