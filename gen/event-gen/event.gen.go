// Package event provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package event

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// BaseEvent defines model for BaseEvent.
type BaseEvent struct {
	EventType string `json:"event_type"`
}

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor string              `json:"cursor"`
	UserId *string             `json:"user_id,omitempty"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code      int    `json:"code"`
	EventType string `json:"event_type"`
	Message   string `json:"message"`
}

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Chats     []externalRef0.Chat `json:"chats"`
	Cursor    *string             `json:"cursor,omitempty"`
	EventType string              `json:"event_type"`
	Limit     *int                `json:"limit,omitempty"`
	UserId    string              `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId    string  `json:"chat_id"`
	Cursor    *string `json:"cursor,omitempty"`
	EventType string  `json:"event_type"`
	Limit     *uint64 `json:"limit,omitempty"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor        *string `json:"cursor,omitempty"`
	EventType     string  `json:"event_type"`
	Limit         *uint64 `json:"limit,omitempty"`
	ParentReplyId string  `json:"parent_reply_id"`
	RootId        string  `json:"root_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor    *string `json:"cursor,omitempty"`
	EventType string  `json:"event_type"`
	Limit     *uint64 `json:"limit,omitempty"`
	UserId    string  `json:"userId"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	EventType   string  `json:"event_type"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	EventType  string    `json:"event_type"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId    string  `json:"chat_id"`
	EventType string  `json:"event_type"`
	Id        string  `json:"id"`
	UserId    string  `json:"user_id"`
	Username  *string `json:"username,omitempty"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	EventType     string `json:"event_type"`
	ParentReplyId string `json:"parent_reply_id"`
	ReplyId       string `json:"reply_id"`
	RootId        string `json:"root_id"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent struct {
	Cursor    *string `json:"cursor,omitempty"`
	EventType string  `json:"event_type"`
	Limit     *uint64 `json:"limit,omitempty"`
	UserId    string  `json:"userId"`
}

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	EventType string `json:"event_type"`
	TweetId   string `json:"tweetId"`
	UserId    string `json:"userId"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	EventType string `json:"event_type"`
	UserId    string `json:"userId"`
}

// LoginEvent defines model for LoginEvent.
type LoginEvent struct {
	EventType string `json:"event_type"`
	Password  string `json:"password"`
	Username  string `json:"username"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent struct {
	EventType string `json:"event_type"`
	Token     string `json:"token"`
}

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	ChatId   *string                    `json:"chat_id,omitempty"`
	Cursor   string                     `json:"cursor"`
	Messages []externalRef0.ChatMessage `json:"messages"`
	UserId   *string                    `json:"user_id,omitempty"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	EventType  string    `json:"event_type"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	EventType string       `json:"event_type"`
	Request   *interface{} `json:"request,omitempty"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	CreatedAt *time.Time                `json:"created_at,omitempty"`
	EventType string                    `json:"event_type"`
	Message   *externalRef0.ChatMessage `json:"message,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent struct {
	EventType string              `json:"event_type"`
	Tweet     *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	EventType string              `json:"event_type"`
	Tweet     *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	EventType string       `json:"event_type"`
	Request   *interface{} `json:"request,omitempty"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	EventType string             `json:"event_type"`
	User      *externalRef0.User `json:"user,omitempty"`
}

// Owner defines model for Owner.
type Owner = externalRef0.Owner

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string                   `json:"cursor"`
	Replies []externalRef0.ReplyNode `json:"replies"`
	UserId  *string                  `json:"user_id,omitempty"`
}

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string               `json:"cursor"`
	Tweets []externalRef0.Tweet `json:"tweets"`
	UserId string               `json:"user_id"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string              `json:"cursor"`
	Users  []externalRef0.User `json:"users"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTY/bNhD9KwbbIze7QYMcfGuLtAiwcYDAix6CQKCtsc1aIlWSsmIE/u8FKdqSLEqi",
	"FHqTw57WK1Mzbx7ffJD+htY8zTgDpiSaf0NyvYOUmI9/EAnvDsCU/icTPAOhKJivQD+O1DED/V/5F0kl",
	"KNui0wkjAf/lVECM5p/ra7/g81q++hfWCp0w+nNHlPwEMuNMQtvTWn+tP1AFqfnwq4ANmqNf7ivg9xb1",
	"fcxTQlmkbWrb1hkRghz1/+tcSC4ckDHKJYiIxsPhWBvYInOF9E4ILi7MkST5uEHzz/3IK7JPuMUBj+s8",
	"U6ZgC0J7SkFKsvXYBGOiWt9G/eWE0d+gfk8SsyEh0T/TDiY0pcpNk//mGqzVC308fSi5DE2VG+ekyDH6",
	"erfld/ZpTpl6+8YZ8lConyBLaNhIQ0WDUUaELjACsuTYRZ7gXHkJ4LywbbaPn2UBoH5SerSU33tEbtf1",
	"hfkkQTxTlFRGG54kvIA69BXnCRDWWKBfcK4YnRXuuHUlChmzAKIgjoixt+Ei1Z9QTBTcKZrqIt0iYyN4",
	"GtVqWErZI7Ct2qH5a8dyxb0XX2mg4ahhCNeBd2rElsRnqogdj/2J0isZScEvOSwNFpBx30mELpjHgDR4",
	"1bgbF8Cah864lzSFhLLvU0Dfyna9vbjWzwJSrrS9990SG1FT8cVYJ3G6tAYEH6ToP/ItZUFFLGXBRTel",
	"/rloVuLKYmcAPA+qCb4HNoywXObGdJ4a+088E4ZAO9pPmrQtKNfAPf5cdAHiOhotoHhpqJ4NdQHFX2bE",
	"CciWBgdSG+uYeBZQ3KCLT9ij2tF2rIo7Iwvdlk1Z90Ro+lMPtpv0r0DYntjmRwjxBk3RkxDtuYuPjwUr",
	"7Xy/xml2eOMebbPDW+cXjMcQDQ++QUbdWqM9u7WQLcCBGoaRvTdYCoCeftfd00T5/tiWZtJ8weNADe2M",
	"whVhOYlOCs4k6OjYbKqGiMsC6Lvtwsic+SfFp62ODq9MvOvouiIoXbhg168R57cYGXxPo83ZoU1SFo+E",
	"csWFSUrPMaPhboC1D1X7HTGecqZsuR4YqSZVyx9+3q8ibFTHgSpoWX2kewedJgn94U+YQWu6OPvqQfnS",
	"3by7W6vbOHKFJrEoj4zBGpi5hRk92DXueIwFXMHrje4ySP7cwl26YQYsNAndj59FTNY7dtEYi9Y8Z01g",
	"5XU01kTRNE/R/AE7ftCyd3OdN4HTZovzXjtFV5qcjLj7AhIjBV9VQBlNqwel0DSSepWviMa1q9HRtf9J",
	"uooqORBFRIPMFWVEHF2iXJH1fit4zuKIprYz+7xGuZPzFRVqp7PAPy0mjU32R5xodWyosa2BK8HZF4WM",
	"mNaUQ29tjTV+EBrrirLtCFddJYKviaKcje5uNrv8AdQlPpANBawkvdroXCR+o6XWT0ezvOytRn29Y/Xd",
	"aMpgIGc0Cso2RrUxyLWgWckoMud6OdtwMSOzmGrUq1xBPFsWVCkQd7qmzkiWJdTuAkaKqkRb/4eIbLYA",
	"VXCxRxgdQMjS6OtXD68eNEs8A0YyiuboN/NI577aSXNB8X8AAAD//yFSaX4lIwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
