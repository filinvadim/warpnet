// Package event provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package event

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// BaseEvent defines model for BaseEvent.
type BaseEvent struct {
	EventType string `json:"event_type"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code      int    `json:"code"`
	EventType string `json:"event_type"`
	Message   string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	Data      *Event_Data `json:"data,omitempty"`
	Timestamp time.Time   `json:"timestamp"`
}

// Event_Data defines model for Event.Data.
type Event_Data struct {
	union json.RawMessage
}

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Chats     []externalRef0.Chat `json:"chats"`
	Cursor    *string             `json:"cursor,omitempty"`
	EventType string              `json:"event_type"`
	Limit     *int                `json:"limit,omitempty"`
	UserId    string              `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId    string  `json:"chat_id"`
	Cursor    *string `json:"cursor,omitempty"`
	EventType string  `json:"event_type"`
	Limit     *uint64 `json:"limit,omitempty"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor        *string `json:"cursor,omitempty"`
	EventType     string  `json:"event_type"`
	Limit         *uint64 `json:"limit,omitempty"`
	ParentReplyId string  `json:"parent_reply_id"`
	RootId        string  `json:"root_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor    *string `json:"cursor,omitempty"`
	EventType string  `json:"event_type"`
	Limit     *uint64 `json:"limit,omitempty"`
	UserId    string  `json:"userId"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	EventType   string  `json:"event_type"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	EventType  string    `json:"event_type"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId    string  `json:"chat_id"`
	EventType string  `json:"event_type"`
	Id        string  `json:"id"`
	UserId    string  `json:"user_id"`
	Username  *string `json:"username,omitempty"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	EventType     string `json:"event_type"`
	ParentReplyId string `json:"parent_reply_id"`
	ReplyId       string `json:"reply_id"`
	RootId        string `json:"root_id"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent struct {
	Cursor    *string `json:"cursor,omitempty"`
	EventType string  `json:"event_type"`
	Limit     *uint64 `json:"limit,omitempty"`
	UserId    string  `json:"userId"`
}

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	EventType string `json:"event_type"`
	TweetId   string `json:"tweetId"`
	UserId    string `json:"userId"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	EventType string `json:"event_type"`
	UserId    string `json:"userId"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	EventType  string    `json:"event_type"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	EventType string       `json:"event_type"`
	Request   *interface{} `json:"request,omitempty"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	CreatedAt *time.Time                `json:"created_at,omitempty"`
	EventType string                    `json:"event_type"`
	Message   *externalRef0.ChatMessage `json:"message,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent struct {
	EventType string              `json:"event_type"`
	Tweet     *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	EventType string              `json:"event_type"`
	Tweet     *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	EventType string       `json:"event_type"`
	Request   *interface{} `json:"request,omitempty"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	EventType string             `json:"event_type"`
	User      *externalRef0.User `json:"user,omitempty"`
}

// AsErrorEvent returns the union data inside the Event_Data as a ErrorEvent
func (t Event_Data) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the Event_Data as the provided ErrorEvent
func (t *Event_Data) FromErrorEvent(v ErrorEvent) error {
	v.EventType = "ErrorEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the Event_Data, using the provided ErrorEvent
func (t *Event_Data) MergeErrorEvent(v ErrorEvent) error {
	v.EventType = "ErrorEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewTweetEvent returns the union data inside the Event_Data as a NewTweetEvent
func (t Event_Data) AsNewTweetEvent() (NewTweetEvent, error) {
	var body NewTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewTweetEvent overwrites any union data inside the Event_Data as the provided NewTweetEvent
func (t *Event_Data) FromNewTweetEvent(v NewTweetEvent) error {
	v.EventType = "NewTweetEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewTweetEvent performs a merge with any union data inside the Event_Data, using the provided NewTweetEvent
func (t *Event_Data) MergeNewTweetEvent(v NewTweetEvent) error {
	v.EventType = "NewTweetEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUserEvent returns the union data inside the Event_Data as a NewUserEvent
func (t Event_Data) AsNewUserEvent() (NewUserEvent, error) {
	var body NewUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUserEvent overwrites any union data inside the Event_Data as the provided NewUserEvent
func (t *Event_Data) FromNewUserEvent(v NewUserEvent) error {
	v.EventType = "NewUserEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUserEvent performs a merge with any union data inside the Event_Data, using the provided NewUserEvent
func (t *Event_Data) MergeNewUserEvent(v NewUserEvent) error {
	v.EventType = "NewUserEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewFollowEvent returns the union data inside the Event_Data as a NewFollowEvent
func (t Event_Data) AsNewFollowEvent() (NewFollowEvent, error) {
	var body NewFollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewFollowEvent overwrites any union data inside the Event_Data as the provided NewFollowEvent
func (t *Event_Data) FromNewFollowEvent(v NewFollowEvent) error {
	v.EventType = "NewFollowEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewFollowEvent performs a merge with any union data inside the Event_Data, using the provided NewFollowEvent
func (t *Event_Data) MergeNewFollowEvent(v NewFollowEvent) error {
	v.EventType = "NewFollowEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUnfollowEvent returns the union data inside the Event_Data as a NewUnfollowEvent
func (t Event_Data) AsNewUnfollowEvent() (NewUnfollowEvent, error) {
	var body NewUnfollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUnfollowEvent overwrites any union data inside the Event_Data as the provided NewUnfollowEvent
func (t *Event_Data) FromNewUnfollowEvent(v NewUnfollowEvent) error {
	v.EventType = "NewUnfollowEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUnfollowEvent performs a merge with any union data inside the Event_Data, using the provided NewUnfollowEvent
func (t *Event_Data) MergeNewUnfollowEvent(v NewUnfollowEvent) error {
	v.EventType = "NewUnfollowEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllTweetsEvent returns the union data inside the Event_Data as a GetAllTweetsEvent
func (t Event_Data) AsGetAllTweetsEvent() (GetAllTweetsEvent, error) {
	var body GetAllTweetsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllTweetsEvent overwrites any union data inside the Event_Data as the provided GetAllTweetsEvent
func (t *Event_Data) FromGetAllTweetsEvent(v GetAllTweetsEvent) error {
	v.EventType = "GetAllTweetsEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllTweetsEvent performs a merge with any union data inside the Event_Data, using the provided GetAllTweetsEvent
func (t *Event_Data) MergeGetAllTweetsEvent(v GetAllTweetsEvent) error {
	v.EventType = "GetAllTweetsEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTimelineEvent returns the union data inside the Event_Data as a GetTimelineEvent
func (t Event_Data) AsGetTimelineEvent() (GetTimelineEvent, error) {
	var body GetTimelineEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTimelineEvent overwrites any union data inside the Event_Data as the provided GetTimelineEvent
func (t *Event_Data) FromGetTimelineEvent(v GetTimelineEvent) error {
	v.EventType = "GetTimelineEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTimelineEvent performs a merge with any union data inside the Event_Data, using the provided GetTimelineEvent
func (t *Event_Data) MergeGetTimelineEvent(v GetTimelineEvent) error {
	v.EventType = "GetTimelineEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTweetEvent returns the union data inside the Event_Data as a GetTweetEvent
func (t Event_Data) AsGetTweetEvent() (GetTweetEvent, error) {
	var body GetTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTweetEvent overwrites any union data inside the Event_Data as the provided GetTweetEvent
func (t *Event_Data) FromGetTweetEvent(v GetTweetEvent) error {
	v.EventType = "GetTweetEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTweetEvent performs a merge with any union data inside the Event_Data, using the provided GetTweetEvent
func (t *Event_Data) MergeGetTweetEvent(v GetTweetEvent) error {
	v.EventType = "GetTweetEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetUserEvent returns the union data inside the Event_Data as a GetUserEvent
func (t Event_Data) AsGetUserEvent() (GetUserEvent, error) {
	var body GetUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetUserEvent overwrites any union data inside the Event_Data as the provided GetUserEvent
func (t *Event_Data) FromGetUserEvent(v GetUserEvent) error {
	v.EventType = "GetUserEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetUserEvent performs a merge with any union data inside the Event_Data, using the provided GetUserEvent
func (t *Event_Data) MergeGetUserEvent(v GetUserEvent) error {
	v.EventType = "GetUserEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllUsersEvent returns the union data inside the Event_Data as a GetAllUsersEvent
func (t Event_Data) AsGetAllUsersEvent() (GetAllUsersEvent, error) {
	var body GetAllUsersEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllUsersEvent overwrites any union data inside the Event_Data as the provided GetAllUsersEvent
func (t *Event_Data) FromGetAllUsersEvent(v GetAllUsersEvent) error {
	v.EventType = "GetAllUsersEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllUsersEvent performs a merge with any union data inside the Event_Data, using the provided GetAllUsersEvent
func (t *Event_Data) MergeGetAllUsersEvent(v GetAllUsersEvent) error {
	v.EventType = "GetAllUsersEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllRepliesEvent returns the union data inside the Event_Data as a GetAllRepliesEvent
func (t Event_Data) AsGetAllRepliesEvent() (GetAllRepliesEvent, error) {
	var body GetAllRepliesEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllRepliesEvent overwrites any union data inside the Event_Data as the provided GetAllRepliesEvent
func (t *Event_Data) FromGetAllRepliesEvent(v GetAllRepliesEvent) error {
	v.EventType = "GetAllRepliesEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllRepliesEvent performs a merge with any union data inside the Event_Data, using the provided GetAllRepliesEvent
func (t *Event_Data) MergeGetAllRepliesEvent(v GetAllRepliesEvent) error {
	v.EventType = "GetAllRepliesEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewReplyEvent returns the union data inside the Event_Data as a NewReplyEvent
func (t Event_Data) AsNewReplyEvent() (NewReplyEvent, error) {
	var body NewReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewReplyEvent overwrites any union data inside the Event_Data as the provided NewReplyEvent
func (t *Event_Data) FromNewReplyEvent(v NewReplyEvent) error {
	v.EventType = "NewReplyEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewReplyEvent performs a merge with any union data inside the Event_Data, using the provided NewReplyEvent
func (t *Event_Data) MergeNewReplyEvent(v NewReplyEvent) error {
	v.EventType = "NewReplyEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetReplyEvent returns the union data inside the Event_Data as a GetReplyEvent
func (t Event_Data) AsGetReplyEvent() (GetReplyEvent, error) {
	var body GetReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetReplyEvent overwrites any union data inside the Event_Data as the provided GetReplyEvent
func (t *Event_Data) FromGetReplyEvent(v GetReplyEvent) error {
	v.EventType = "GetReplyEvent"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetReplyEvent performs a merge with any union data inside the Event_Data, using the provided GetReplyEvent
func (t *Event_Data) MergeGetReplyEvent(v GetReplyEvent) error {
	v.EventType = "GetReplyEvent"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event_Data) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"event_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Event_Data) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ErrorEvent":
		return t.AsErrorEvent()
	case "GetAllRepliesEvent":
		return t.AsGetAllRepliesEvent()
	case "GetAllTweetsEvent":
		return t.AsGetAllTweetsEvent()
	case "GetAllUsersEvent":
		return t.AsGetAllUsersEvent()
	case "GetReplyEvent":
		return t.AsGetReplyEvent()
	case "GetTimelineEvent":
		return t.AsGetTimelineEvent()
	case "GetTweetEvent":
		return t.AsGetTweetEvent()
	case "GetUserEvent":
		return t.AsGetUserEvent()
	case "NewFollowEvent":
		return t.AsNewFollowEvent()
	case "NewReplyEvent":
		return t.AsNewReplyEvent()
	case "NewTweetEvent":
		return t.AsNewTweetEvent()
	case "NewUnfollowEvent":
		return t.AsNewUnfollowEvent()
	case "NewUserEvent":
		return t.AsNewUserEvent()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Event_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZwY7bNhD9FYPtUZvdoEUPurVFGgRIXSDYoIcgEGhrbLMrkuqQjmss/O/FUJJFyZRN",
	"GXKyh5zW1g6Hbx7fPJLyM1tqWWoFyhqWPjOz3IDk7uNv3MCbL6AsfSlRl4BWgPsX0OPM7kugb9VfZiwK",
	"tWaHQ8IQ/t0KhJyln/zYz0kTqxf/wNKyQ8LeIGo8TsOL4q8VSz89sx8RVixlP9y3+O5rcPctskPSh7bU",
	"uQ9KKAtrQJpJgjF8HYHYpWjjT1F/JtwN5FyYJQopFLcaPar2cy5pkFf/IemBzbnl43NoBREkecQSS+dC",
	"57B73AHY6OiPBuJT/6GLQu/ic6vViAFvwf5aFA69iR7xKCQUQkH8gHh23oKNZ6dCT/FmzIAPUBYCTDSl",
	"FL+PnsCPJqVbIcFYLksS5kqj5JalJF24o3+x5EI7teND/V9V9PuGN+s3jQtQPvogLEj34VymXEsuVEYg",
	"CFKNkSPyPX1fbtFUbdkrNGGFkMKG7WZrADORR9iNw9oOCPtNxdOflSdNTVUY51WVJ+y/u7W+q59uhbK/",
	"/Bws+VKpHZFPU+lU1SSs5EiOjNQqQ+Sh1jZKAE3gadpz/Pie99LoISm/i6i8jjtXpmeOt65SmKzaesCH",
	"vtC6AK46ATQgGDG6K8J1kxNNWTMCt5Bn3MZaeMJWqGXmeZgU6j2otd2w9HUg3Oro4J4GOhN1EiU+8EGN",
	"1Jb4lRxx4HE8URSp3KkupjlqGmpAbvpBIrx9exIaojzuxgbozTBYd/c0d2XpI8+YzdTtuXASyi3lezcs",
	"sRGemhyTDRLXnlMnAT+J6c9h9938Is2vd7eahC0CB4aSDexOc9jdwHGvWCPvOh95tq9xs+HKprZQ14KR",
	"CJ2XnMF2E6+ZCFv3zv7VhHgDA4skhGYe4sO/Taa3cKPYQ0nXlk43lDIfCaVnXs6lIh2sM13oPUCgT9NR",
	"V1WtbK2EC259zRJ8+2NfW6GX7MImcWT1vXgK0OkcIB7+Fdubp4tmrjMoP8DRk1420McwzG8iwUI8weg3",
	"XU4PgTddLlm21FvVBVbdVxMqS8itZOlDEnjjVR/eB68KjtrRWBtVBOA2Ka9GPHxDuXVv9zq6pS7xbkOj",
	"+/xjvYN1dbkQaDekrXixXSPQHMwSRWmFVkFC/XcrRwGcblq9NW5GZYpWMbDCp6taD0Fz1UxoRkw12JTq",
	"qZNhi0WIskIv+SBfcp8hrACRFyMrUTqH4TaklJBni/2g7Bsxj3FQJ1hfAh35Noh669kn3ROJv4wX5E9Q",
	"hFpp90uaL8LqRzozW2mc8VkuCPpiayGfPe6EtYB3ZHgzXpaFqBciYVbYgrL/zbGczcHuND6xhH0BNFXS",
	"168eXj243+FKULwULGU/uUfUxnZj3JH1/wAAAP//koTxGVgdAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
