// Package event provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package event

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for AcceptedResponse.
const (
	Accepted AcceptedResponse = "Accepted"
)

// AcceptedResponse defines model for AcceptedResponse.
type AcceptedResponse string

// ChatCreatedResponse defines model for ChatCreatedResponse.
type ChatCreatedResponse = externalRef0.Chat

// ChatMessageResponse defines model for ChatMessageResponse.
type ChatMessageResponse = externalRef0.ChatMessage

// ChatMessagesResponse defines model for ChatMessagesResponse.
type ChatMessagesResponse struct {
	ChatId   string                     `json:"chat_id"`
	Cursor   string                     `json:"cursor"`
	Messages []externalRef0.ChatMessage `json:"messages"`
	OwnerId  string                     `json:"owner_id"`
}

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor string              `json:"cursor"`
	UserId string              `json:"user_id"`
}

// DeleteChatEvent defines model for DeleteChatEvent.
type DeleteChatEvent struct {
	ChatId string `json:"chat_id"`
}

// DeleteMessageEvent defines model for DeleteMessageEvent.
type DeleteMessageEvent = GetMessageEvent

// DeleteReplyEvent defines model for DeleteReplyEvent.
type DeleteReplyEvent = GetReplyEvent

// DeleteTweetEvent defines model for DeleteTweetEvent.
type DeleteTweetEvent = GetTweetEvent

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FolloweesResponse defines model for FolloweesResponse.
type FolloweesResponse struct {
	Cursor    string                   `json:"cursor"`
	Followees []externalRef0.Following `json:"followees"`
	Follower  string                   `json:"follower"`
}

// FollowersResponse defines model for FollowersResponse.
type FollowersResponse struct {
	Cursor    string                   `json:"cursor"`
	Followee  string                   `json:"followee"`
	Followers []externalRef0.Following `json:"followers"`
}

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId  string  `json:"chat_id"`
	Cursor  *string `json:"cursor,omitempty"`
	Limit   *uint64 `json:"limit,omitempty"`
	OwnerId string  `json:"owner_id"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor   *string `json:"cursor,omitempty"`
	Limit    *uint64 `json:"limit,omitempty"`
	ParentId string  `json:"parent_id"`
	RootId   string  `json:"root_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`

	// UserId default owner
	UserId *string `json:"user_id,omitempty"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// GetFolloweesEvent defines model for GetFolloweesEvent.
type GetFolloweesEvent = GetFollowersEvent

// GetFollowersEvent defines model for GetFollowersEvent.
type GetFollowersEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetLikersEvent defines model for GetLikersEvent.
type GetLikersEvent struct {
	Cursor  *string `json:"cursor,omitempty"`
	Limit   *uint64 `json:"limit,omitempty"`
	TweetId string  `json:"tweet_id"`
}

// GetLikersResponse defines model for GetLikersResponse.
type GetLikersResponse = UsersResponse

// GetLikesCountEvent defines model for GetLikesCountEvent.
type GetLikesCountEvent struct {
	TweetId string `json:"tweet_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId string `json:"chat_id"`
	Id     string `json:"id"`
	UserId string `json:"user_id"`
}

// GetReTweetsCountEvent defines model for GetReTweetsCountEvent.
type GetReTweetsCountEvent = GetLikesCountEvent

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	ReplyId string `json:"reply_id"`
	RootId  string `json:"root_id"`
	UserId  string `json:"user_id"`
}

// GetRetweetersEvent defines model for GetRetweetersEvent.
type GetRetweetersEvent = GetLikersEvent

// GetRetweetersResponse defines model for GetRetweetersResponse.
type GetRetweetersResponse = UsersResponse

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent = GetAllTweetsEvent

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"user_id"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId *string `json:"user_id,omitempty"`
}

// LikeEvent defines model for LikeEvent.
type LikeEvent struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// LikesCountResponse defines model for LikesCountResponse.
type LikesCountResponse struct {
	Count uint64 `json:"count"`
}

// LoginEvent defines model for LoginEvent.
type LoginEvent struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Owner Owner  `json:"owner"`
	Token string `json:"token"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent struct {
	Token string `json:"token"`
}

// Message defines model for Message.
type Message struct {
	Body      *Message_Body `json:"body,omitempty"`
	MessageId string        `json:"message_id"`
	NodeId    string        `json:"node_id"`
	Path      string        `json:"path"`
	Timestamp time.Time     `json:"timestamp,omitempty"`
	Version   string        `json:"version"`
}

// Message_Body defines model for Message.Body.
type Message_Body struct {
	union json.RawMessage
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	ChatId      *string `json:"chat_id,omitempty"`
	OtherUserId string  `json:"other_user_id"`
	OwnerId     string  `json:"owner_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent = externalRef0.Following

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent = externalRef0.ChatMessage

// NewMessageResponse defines model for NewMessageResponse.
type NewMessageResponse = externalRef0.ChatMessage

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent = externalRef0.Tweet

// NewReplyResponse defines model for NewReplyResponse.
type NewReplyResponse = externalRef0.Tweet

// NewRetweetEvent defines model for NewRetweetEvent.
type NewRetweetEvent = externalRef0.Tweet

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent = externalRef0.Tweet

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent = externalRef0.Following

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent = externalRef0.User

// Owner defines model for Owner.
type Owner = externalRef0.Owner

// ReTweetsCountResponse defines model for ReTweetsCountResponse.
type ReTweetsCountResponse = LikesCountResponse

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string                   `json:"cursor"`
	Replies []externalRef0.ReplyNode `json:"replies"`
	UserId  *string                  `json:"user_id,omitempty"`
}

// RequestBody defines model for RequestBody.
type RequestBody struct {
	union json.RawMessage
}

// ResponseBody defines model for ResponseBody.
type ResponseBody struct {
	union json.RawMessage
}

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string               `json:"cursor"`
	Tweets []externalRef0.Tweet `json:"tweets"`
	UserId string               `json:"user_id"`
}

// UnlikeEvent defines model for UnlikeEvent.
type UnlikeEvent = LikeEvent

// UnretweetEvent defines model for UnretweetEvent.
type UnretweetEvent = LikeEvent

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string              `json:"cursor"`
	Users  []externalRef0.User `json:"users"`
}

// OptionsPrivatePostLoginVersionJSONRequestBody defines body for OptionsPrivatePostLoginVersion for application/json ContentType.
type OptionsPrivatePostLoginVersionJSONRequestBody = Message

// OptionsPrivatePostLogoutVersionJSONRequestBody defines body for OptionsPrivatePostLogoutVersion for application/json ContentType.
type OptionsPrivatePostLogoutVersionJSONRequestBody = Message

// OptionsPublicGetInfoVersionJSONRequestBody defines body for OptionsPublicGetInfoVersion for application/json ContentType.
type OptionsPublicGetInfoVersionJSONRequestBody = Message

// AsRequestBody returns the union data inside the Message_Body as a RequestBody
func (t Message_Body) AsRequestBody() (RequestBody, error) {
	var body RequestBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRequestBody overwrites any union data inside the Message_Body as the provided RequestBody
func (t *Message_Body) FromRequestBody(v RequestBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRequestBody performs a merge with any union data inside the Message_Body, using the provided RequestBody
func (t *Message_Body) MergeRequestBody(v RequestBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsResponseBody returns the union data inside the Message_Body as a ResponseBody
func (t Message_Body) AsResponseBody() (ResponseBody, error) {
	var body ResponseBody
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromResponseBody overwrites any union data inside the Message_Body as the provided ResponseBody
func (t *Message_Body) FromResponseBody(v ResponseBody) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeResponseBody performs a merge with any union data inside the Message_Body, using the provided ResponseBody
func (t *Message_Body) MergeResponseBody(v ResponseBody) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Message_Body) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Message_Body) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorEvent returns the union data inside the RequestBody as a ErrorEvent
func (t RequestBody) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the RequestBody as the provided ErrorEvent
func (t *RequestBody) FromErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the RequestBody, using the provided ErrorEvent
func (t *RequestBody) MergeErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewTweetEvent returns the union data inside the RequestBody as a NewTweetEvent
func (t RequestBody) AsNewTweetEvent() (NewTweetEvent, error) {
	var body NewTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewTweetEvent overwrites any union data inside the RequestBody as the provided NewTweetEvent
func (t *RequestBody) FromNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewTweetEvent performs a merge with any union data inside the RequestBody, using the provided NewTweetEvent
func (t *RequestBody) MergeNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUserEvent returns the union data inside the RequestBody as a NewUserEvent
func (t RequestBody) AsNewUserEvent() (NewUserEvent, error) {
	var body NewUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUserEvent overwrites any union data inside the RequestBody as the provided NewUserEvent
func (t *RequestBody) FromNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUserEvent performs a merge with any union data inside the RequestBody, using the provided NewUserEvent
func (t *RequestBody) MergeNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeleteTweetEvent returns the union data inside the RequestBody as a DeleteTweetEvent
func (t RequestBody) AsDeleteTweetEvent() (DeleteTweetEvent, error) {
	var body DeleteTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeleteTweetEvent overwrites any union data inside the RequestBody as the provided DeleteTweetEvent
func (t *RequestBody) FromDeleteTweetEvent(v DeleteTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeleteTweetEvent performs a merge with any union data inside the RequestBody, using the provided DeleteTweetEvent
func (t *RequestBody) MergeDeleteTweetEvent(v DeleteTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeleteReplyEvent returns the union data inside the RequestBody as a DeleteReplyEvent
func (t RequestBody) AsDeleteReplyEvent() (DeleteReplyEvent, error) {
	var body DeleteReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeleteReplyEvent overwrites any union data inside the RequestBody as the provided DeleteReplyEvent
func (t *RequestBody) FromDeleteReplyEvent(v DeleteReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeleteReplyEvent performs a merge with any union data inside the RequestBody, using the provided DeleteReplyEvent
func (t *RequestBody) MergeDeleteReplyEvent(v DeleteReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewFollowEvent returns the union data inside the RequestBody as a NewFollowEvent
func (t RequestBody) AsNewFollowEvent() (NewFollowEvent, error) {
	var body NewFollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewFollowEvent overwrites any union data inside the RequestBody as the provided NewFollowEvent
func (t *RequestBody) FromNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewFollowEvent performs a merge with any union data inside the RequestBody, using the provided NewFollowEvent
func (t *RequestBody) MergeNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUnfollowEvent returns the union data inside the RequestBody as a NewUnfollowEvent
func (t RequestBody) AsNewUnfollowEvent() (NewUnfollowEvent, error) {
	var body NewUnfollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUnfollowEvent overwrites any union data inside the RequestBody as the provided NewUnfollowEvent
func (t *RequestBody) FromNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUnfollowEvent performs a merge with any union data inside the RequestBody, using the provided NewUnfollowEvent
func (t *RequestBody) MergeNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllTweetsEvent returns the union data inside the RequestBody as a GetAllTweetsEvent
func (t RequestBody) AsGetAllTweetsEvent() (GetAllTweetsEvent, error) {
	var body GetAllTweetsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllTweetsEvent overwrites any union data inside the RequestBody as the provided GetAllTweetsEvent
func (t *RequestBody) FromGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllTweetsEvent performs a merge with any union data inside the RequestBody, using the provided GetAllTweetsEvent
func (t *RequestBody) MergeGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTimelineEvent returns the union data inside the RequestBody as a GetTimelineEvent
func (t RequestBody) AsGetTimelineEvent() (GetTimelineEvent, error) {
	var body GetTimelineEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTimelineEvent overwrites any union data inside the RequestBody as the provided GetTimelineEvent
func (t *RequestBody) FromGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTimelineEvent performs a merge with any union data inside the RequestBody, using the provided GetTimelineEvent
func (t *RequestBody) MergeGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTweetEvent returns the union data inside the RequestBody as a GetTweetEvent
func (t RequestBody) AsGetTweetEvent() (GetTweetEvent, error) {
	var body GetTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTweetEvent overwrites any union data inside the RequestBody as the provided GetTweetEvent
func (t *RequestBody) FromGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTweetEvent performs a merge with any union data inside the RequestBody, using the provided GetTweetEvent
func (t *RequestBody) MergeGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetUserEvent returns the union data inside the RequestBody as a GetUserEvent
func (t RequestBody) AsGetUserEvent() (GetUserEvent, error) {
	var body GetUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetUserEvent overwrites any union data inside the RequestBody as the provided GetUserEvent
func (t *RequestBody) FromGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetUserEvent performs a merge with any union data inside the RequestBody, using the provided GetUserEvent
func (t *RequestBody) MergeGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllUsersEvent returns the union data inside the RequestBody as a GetAllUsersEvent
func (t RequestBody) AsGetAllUsersEvent() (GetAllUsersEvent, error) {
	var body GetAllUsersEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllUsersEvent overwrites any union data inside the RequestBody as the provided GetAllUsersEvent
func (t *RequestBody) FromGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllUsersEvent performs a merge with any union data inside the RequestBody, using the provided GetAllUsersEvent
func (t *RequestBody) MergeGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllRepliesEvent returns the union data inside the RequestBody as a GetAllRepliesEvent
func (t RequestBody) AsGetAllRepliesEvent() (GetAllRepliesEvent, error) {
	var body GetAllRepliesEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllRepliesEvent overwrites any union data inside the RequestBody as the provided GetAllRepliesEvent
func (t *RequestBody) FromGetAllRepliesEvent(v GetAllRepliesEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllRepliesEvent performs a merge with any union data inside the RequestBody, using the provided GetAllRepliesEvent
func (t *RequestBody) MergeGetAllRepliesEvent(v GetAllRepliesEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewReplyEvent returns the union data inside the RequestBody as a NewReplyEvent
func (t RequestBody) AsNewReplyEvent() (NewReplyEvent, error) {
	var body NewReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewReplyEvent overwrites any union data inside the RequestBody as the provided NewReplyEvent
func (t *RequestBody) FromNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewReplyEvent performs a merge with any union data inside the RequestBody, using the provided NewReplyEvent
func (t *RequestBody) MergeNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetReplyEvent returns the union data inside the RequestBody as a GetReplyEvent
func (t RequestBody) AsGetReplyEvent() (GetReplyEvent, error) {
	var body GetReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetReplyEvent overwrites any union data inside the RequestBody as the provided GetReplyEvent
func (t *RequestBody) FromGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetReplyEvent performs a merge with any union data inside the RequestBody, using the provided GetReplyEvent
func (t *RequestBody) MergeGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLoginEvent returns the union data inside the RequestBody as a LoginEvent
func (t RequestBody) AsLoginEvent() (LoginEvent, error) {
	var body LoginEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginEvent overwrites any union data inside the RequestBody as the provided LoginEvent
func (t *RequestBody) FromLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginEvent performs a merge with any union data inside the RequestBody, using the provided LoginEvent
func (t *RequestBody) MergeLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLogoutEvent returns the union data inside the RequestBody as a LogoutEvent
func (t RequestBody) AsLogoutEvent() (LogoutEvent, error) {
	var body LogoutEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLogoutEvent overwrites any union data inside the RequestBody as the provided LogoutEvent
func (t *RequestBody) FromLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLogoutEvent performs a merge with any union data inside the RequestBody, using the provided LogoutEvent
func (t *RequestBody) MergeLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLikeEvent returns the union data inside the RequestBody as a LikeEvent
func (t RequestBody) AsLikeEvent() (LikeEvent, error) {
	var body LikeEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLikeEvent overwrites any union data inside the RequestBody as the provided LikeEvent
func (t *RequestBody) FromLikeEvent(v LikeEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLikeEvent performs a merge with any union data inside the RequestBody, using the provided LikeEvent
func (t *RequestBody) MergeLikeEvent(v LikeEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnlikeEvent returns the union data inside the RequestBody as a UnlikeEvent
func (t RequestBody) AsUnlikeEvent() (UnlikeEvent, error) {
	var body UnlikeEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnlikeEvent overwrites any union data inside the RequestBody as the provided UnlikeEvent
func (t *RequestBody) FromUnlikeEvent(v UnlikeEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnlikeEvent performs a merge with any union data inside the RequestBody, using the provided UnlikeEvent
func (t *RequestBody) MergeUnlikeEvent(v UnlikeEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetLikesCountEvent returns the union data inside the RequestBody as a GetLikesCountEvent
func (t RequestBody) AsGetLikesCountEvent() (GetLikesCountEvent, error) {
	var body GetLikesCountEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetLikesCountEvent overwrites any union data inside the RequestBody as the provided GetLikesCountEvent
func (t *RequestBody) FromGetLikesCountEvent(v GetLikesCountEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetLikesCountEvent performs a merge with any union data inside the RequestBody, using the provided GetLikesCountEvent
func (t *RequestBody) MergeGetLikesCountEvent(v GetLikesCountEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetLikersEvent returns the union data inside the RequestBody as a GetLikersEvent
func (t RequestBody) AsGetLikersEvent() (GetLikersEvent, error) {
	var body GetLikersEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetLikersEvent overwrites any union data inside the RequestBody as the provided GetLikersEvent
func (t *RequestBody) FromGetLikersEvent(v GetLikersEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetLikersEvent performs a merge with any union data inside the RequestBody, using the provided GetLikersEvent
func (t *RequestBody) MergeGetLikersEvent(v GetLikersEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetRetweetersEvent returns the union data inside the RequestBody as a GetRetweetersEvent
func (t RequestBody) AsGetRetweetersEvent() (GetRetweetersEvent, error) {
	var body GetRetweetersEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetRetweetersEvent overwrites any union data inside the RequestBody as the provided GetRetweetersEvent
func (t *RequestBody) FromGetRetweetersEvent(v GetRetweetersEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetRetweetersEvent performs a merge with any union data inside the RequestBody, using the provided GetRetweetersEvent
func (t *RequestBody) MergeGetRetweetersEvent(v GetRetweetersEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewRetweetEvent returns the union data inside the RequestBody as a NewRetweetEvent
func (t RequestBody) AsNewRetweetEvent() (NewRetweetEvent, error) {
	var body NewRetweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewRetweetEvent overwrites any union data inside the RequestBody as the provided NewRetweetEvent
func (t *RequestBody) FromNewRetweetEvent(v NewRetweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewRetweetEvent performs a merge with any union data inside the RequestBody, using the provided NewRetweetEvent
func (t *RequestBody) MergeNewRetweetEvent(v NewRetweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetReTweetsCountEvent returns the union data inside the RequestBody as a GetReTweetsCountEvent
func (t RequestBody) AsGetReTweetsCountEvent() (GetReTweetsCountEvent, error) {
	var body GetReTweetsCountEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetReTweetsCountEvent overwrites any union data inside the RequestBody as the provided GetReTweetsCountEvent
func (t *RequestBody) FromGetReTweetsCountEvent(v GetReTweetsCountEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetReTweetsCountEvent performs a merge with any union data inside the RequestBody, using the provided GetReTweetsCountEvent
func (t *RequestBody) MergeGetReTweetsCountEvent(v GetReTweetsCountEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUnretweetEvent returns the union data inside the RequestBody as a UnretweetEvent
func (t RequestBody) AsUnretweetEvent() (UnretweetEvent, error) {
	var body UnretweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUnretweetEvent overwrites any union data inside the RequestBody as the provided UnretweetEvent
func (t *RequestBody) FromUnretweetEvent(v UnretweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUnretweetEvent performs a merge with any union data inside the RequestBody, using the provided UnretweetEvent
func (t *RequestBody) MergeUnretweetEvent(v UnretweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewChatEvent returns the union data inside the RequestBody as a NewChatEvent
func (t RequestBody) AsNewChatEvent() (NewChatEvent, error) {
	var body NewChatEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewChatEvent overwrites any union data inside the RequestBody as the provided NewChatEvent
func (t *RequestBody) FromNewChatEvent(v NewChatEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewChatEvent performs a merge with any union data inside the RequestBody, using the provided NewChatEvent
func (t *RequestBody) MergeNewChatEvent(v NewChatEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeleteChatEvent returns the union data inside the RequestBody as a DeleteChatEvent
func (t RequestBody) AsDeleteChatEvent() (DeleteChatEvent, error) {
	var body DeleteChatEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeleteChatEvent overwrites any union data inside the RequestBody as the provided DeleteChatEvent
func (t *RequestBody) FromDeleteChatEvent(v DeleteChatEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeleteChatEvent performs a merge with any union data inside the RequestBody, using the provided DeleteChatEvent
func (t *RequestBody) MergeDeleteChatEvent(v DeleteChatEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllChatsEvent returns the union data inside the RequestBody as a GetAllChatsEvent
func (t RequestBody) AsGetAllChatsEvent() (GetAllChatsEvent, error) {
	var body GetAllChatsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllChatsEvent overwrites any union data inside the RequestBody as the provided GetAllChatsEvent
func (t *RequestBody) FromGetAllChatsEvent(v GetAllChatsEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllChatsEvent performs a merge with any union data inside the RequestBody, using the provided GetAllChatsEvent
func (t *RequestBody) MergeGetAllChatsEvent(v GetAllChatsEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllMessagesEvent returns the union data inside the RequestBody as a GetAllMessagesEvent
func (t RequestBody) AsGetAllMessagesEvent() (GetAllMessagesEvent, error) {
	var body GetAllMessagesEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllMessagesEvent overwrites any union data inside the RequestBody as the provided GetAllMessagesEvent
func (t *RequestBody) FromGetAllMessagesEvent(v GetAllMessagesEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllMessagesEvent performs a merge with any union data inside the RequestBody, using the provided GetAllMessagesEvent
func (t *RequestBody) MergeGetAllMessagesEvent(v GetAllMessagesEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetMessageEvent returns the union data inside the RequestBody as a GetMessageEvent
func (t RequestBody) AsGetMessageEvent() (GetMessageEvent, error) {
	var body GetMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetMessageEvent overwrites any union data inside the RequestBody as the provided GetMessageEvent
func (t *RequestBody) FromGetMessageEvent(v GetMessageEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetMessageEvent performs a merge with any union data inside the RequestBody, using the provided GetMessageEvent
func (t *RequestBody) MergeGetMessageEvent(v GetMessageEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsDeleteMessageEvent returns the union data inside the RequestBody as a DeleteMessageEvent
func (t RequestBody) AsDeleteMessageEvent() (DeleteMessageEvent, error) {
	var body DeleteMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDeleteMessageEvent overwrites any union data inside the RequestBody as the provided DeleteMessageEvent
func (t *RequestBody) FromDeleteMessageEvent(v DeleteMessageEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDeleteMessageEvent performs a merge with any union data inside the RequestBody, using the provided DeleteMessageEvent
func (t *RequestBody) MergeDeleteMessageEvent(v DeleteMessageEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewMessageEvent returns the union data inside the RequestBody as a NewMessageEvent
func (t RequestBody) AsNewMessageEvent() (NewMessageEvent, error) {
	var body NewMessageEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewMessageEvent overwrites any union data inside the RequestBody as the provided NewMessageEvent
func (t *RequestBody) FromNewMessageEvent(v NewMessageEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewMessageEvent performs a merge with any union data inside the RequestBody, using the provided NewMessageEvent
func (t *RequestBody) MergeNewMessageEvent(v NewMessageEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RequestBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RequestBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsErrorResponse returns the union data inside the ResponseBody as a ErrorResponse
func (t ResponseBody) AsErrorResponse() (ErrorResponse, error) {
	var body ErrorResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorResponse overwrites any union data inside the ResponseBody as the provided ErrorResponse
func (t *ResponseBody) FromErrorResponse(v ErrorResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorResponse performs a merge with any union data inside the ResponseBody, using the provided ErrorResponse
func (t *ResponseBody) MergeErrorResponse(v ErrorResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLoginResponse returns the union data inside the ResponseBody as a LoginResponse
func (t ResponseBody) AsLoginResponse() (LoginResponse, error) {
	var body LoginResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginResponse overwrites any union data inside the ResponseBody as the provided LoginResponse
func (t *ResponseBody) FromLoginResponse(v LoginResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginResponse performs a merge with any union data inside the ResponseBody, using the provided LoginResponse
func (t *ResponseBody) MergeLoginResponse(v LoginResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUsersResponse returns the union data inside the ResponseBody as a UsersResponse
func (t ResponseBody) AsUsersResponse() (UsersResponse, error) {
	var body UsersResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersResponse overwrites any union data inside the ResponseBody as the provided UsersResponse
func (t *ResponseBody) FromUsersResponse(v UsersResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersResponse performs a merge with any union data inside the ResponseBody, using the provided UsersResponse
func (t *ResponseBody) MergeUsersResponse(v UsersResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTweetsResponse returns the union data inside the ResponseBody as a TweetsResponse
func (t ResponseBody) AsTweetsResponse() (TweetsResponse, error) {
	var body TweetsResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTweetsResponse overwrites any union data inside the ResponseBody as the provided TweetsResponse
func (t *ResponseBody) FromTweetsResponse(v TweetsResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTweetsResponse performs a merge with any union data inside the ResponseBody, using the provided TweetsResponse
func (t *ResponseBody) MergeTweetsResponse(v TweetsResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatsResponse returns the union data inside the ResponseBody as a ChatsResponse
func (t ResponseBody) AsChatsResponse() (ChatsResponse, error) {
	var body ChatsResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatsResponse overwrites any union data inside the ResponseBody as the provided ChatsResponse
func (t *ResponseBody) FromChatsResponse(v ChatsResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatsResponse performs a merge with any union data inside the ResponseBody, using the provided ChatsResponse
func (t *ResponseBody) MergeChatsResponse(v ChatsResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatMessagesResponse returns the union data inside the ResponseBody as a ChatMessagesResponse
func (t ResponseBody) AsChatMessagesResponse() (ChatMessagesResponse, error) {
	var body ChatMessagesResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatMessagesResponse overwrites any union data inside the ResponseBody as the provided ChatMessagesResponse
func (t *ResponseBody) FromChatMessagesResponse(v ChatMessagesResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatMessagesResponse performs a merge with any union data inside the ResponseBody, using the provided ChatMessagesResponse
func (t *ResponseBody) MergeChatMessagesResponse(v ChatMessagesResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRepliesTreeResponse returns the union data inside the ResponseBody as a RepliesTreeResponse
func (t ResponseBody) AsRepliesTreeResponse() (RepliesTreeResponse, error) {
	var body RepliesTreeResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRepliesTreeResponse overwrites any union data inside the ResponseBody as the provided RepliesTreeResponse
func (t *ResponseBody) FromRepliesTreeResponse(v RepliesTreeResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRepliesTreeResponse performs a merge with any union data inside the ResponseBody, using the provided RepliesTreeResponse
func (t *ResponseBody) MergeRepliesTreeResponse(v RepliesTreeResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFolloweesResponse returns the union data inside the ResponseBody as a FolloweesResponse
func (t ResponseBody) AsFolloweesResponse() (FolloweesResponse, error) {
	var body FolloweesResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFolloweesResponse overwrites any union data inside the ResponseBody as the provided FolloweesResponse
func (t *ResponseBody) FromFolloweesResponse(v FolloweesResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFolloweesResponse performs a merge with any union data inside the ResponseBody, using the provided FolloweesResponse
func (t *ResponseBody) MergeFolloweesResponse(v FolloweesResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFollowersResponse returns the union data inside the ResponseBody as a FollowersResponse
func (t ResponseBody) AsFollowersResponse() (FollowersResponse, error) {
	var body FollowersResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFollowersResponse overwrites any union data inside the ResponseBody as the provided FollowersResponse
func (t *ResponseBody) FromFollowersResponse(v FollowersResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFollowersResponse performs a merge with any union data inside the ResponseBody, using the provided FollowersResponse
func (t *ResponseBody) MergeFollowersResponse(v FollowersResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewReplyResponse returns the union data inside the ResponseBody as a NewReplyResponse
func (t ResponseBody) AsNewReplyResponse() (NewReplyResponse, error) {
	var body NewReplyResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewReplyResponse overwrites any union data inside the ResponseBody as the provided NewReplyResponse
func (t *ResponseBody) FromNewReplyResponse(v NewReplyResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewReplyResponse performs a merge with any union data inside the ResponseBody, using the provided NewReplyResponse
func (t *ResponseBody) MergeNewReplyResponse(v NewReplyResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLikesCountResponse returns the union data inside the ResponseBody as a LikesCountResponse
func (t ResponseBody) AsLikesCountResponse() (LikesCountResponse, error) {
	var body LikesCountResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLikesCountResponse overwrites any union data inside the ResponseBody as the provided LikesCountResponse
func (t *ResponseBody) FromLikesCountResponse(v LikesCountResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLikesCountResponse performs a merge with any union data inside the ResponseBody, using the provided LikesCountResponse
func (t *ResponseBody) MergeLikesCountResponse(v LikesCountResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetLikersResponse returns the union data inside the ResponseBody as a GetLikersResponse
func (t ResponseBody) AsGetLikersResponse() (GetLikersResponse, error) {
	var body GetLikersResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetLikersResponse overwrites any union data inside the ResponseBody as the provided GetLikersResponse
func (t *ResponseBody) FromGetLikersResponse(v GetLikersResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetLikersResponse performs a merge with any union data inside the ResponseBody, using the provided GetLikersResponse
func (t *ResponseBody) MergeGetLikersResponse(v GetLikersResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetRetweetersResponse returns the union data inside the ResponseBody as a GetRetweetersResponse
func (t ResponseBody) AsGetRetweetersResponse() (GetRetweetersResponse, error) {
	var body GetRetweetersResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetRetweetersResponse overwrites any union data inside the ResponseBody as the provided GetRetweetersResponse
func (t *ResponseBody) FromGetRetweetersResponse(v GetRetweetersResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetRetweetersResponse performs a merge with any union data inside the ResponseBody, using the provided GetRetweetersResponse
func (t *ResponseBody) MergeGetRetweetersResponse(v GetRetweetersResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAcceptedResponse returns the union data inside the ResponseBody as a AcceptedResponse
func (t ResponseBody) AsAcceptedResponse() (AcceptedResponse, error) {
	var body AcceptedResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAcceptedResponse overwrites any union data inside the ResponseBody as the provided AcceptedResponse
func (t *ResponseBody) FromAcceptedResponse(v AcceptedResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAcceptedResponse performs a merge with any union data inside the ResponseBody, using the provided AcceptedResponse
func (t *ResponseBody) MergeAcceptedResponse(v AcceptedResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatCreatedResponse returns the union data inside the ResponseBody as a ChatCreatedResponse
func (t ResponseBody) AsChatCreatedResponse() (ChatCreatedResponse, error) {
	var body ChatCreatedResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatCreatedResponse overwrites any union data inside the ResponseBody as the provided ChatCreatedResponse
func (t *ResponseBody) FromChatCreatedResponse(v ChatCreatedResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatCreatedResponse performs a merge with any union data inside the ResponseBody, using the provided ChatCreatedResponse
func (t *ResponseBody) MergeChatCreatedResponse(v ChatCreatedResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsChatMessageResponse returns the union data inside the ResponseBody as a ChatMessageResponse
func (t ResponseBody) AsChatMessageResponse() (ChatMessageResponse, error) {
	var body ChatMessageResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromChatMessageResponse overwrites any union data inside the ResponseBody as the provided ChatMessageResponse
func (t *ResponseBody) FromChatMessageResponse(v ChatMessageResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeChatMessageResponse performs a merge with any union data inside the ResponseBody, using the provided ChatMessageResponse
func (t *ResponseBody) MergeChatMessageResponse(v ChatMessageResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewMessageResponse returns the union data inside the ResponseBody as a NewMessageResponse
func (t ResponseBody) AsNewMessageResponse() (NewMessageResponse, error) {
	var body NewMessageResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewMessageResponse overwrites any union data inside the ResponseBody as the provided NewMessageResponse
func (t *ResponseBody) FromNewMessageResponse(v NewMessageResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewMessageResponse performs a merge with any union data inside the ResponseBody, using the provided NewMessageResponse
func (t *ResponseBody) MergeNewMessageResponse(v NewMessageResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ResponseBody) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ResponseBody) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
