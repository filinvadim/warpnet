// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package domain

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AuthNodeInfo defines model for AuthNodeInfo.
type AuthNodeInfo struct {
	Identity Identity `json:"identity"`
	Version  string   `json:"version"`
}

// Chat defines model for Chat.
type Chat struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	Id         string    `json:"id"`
	ToUserId   string    `json:"to_user_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	ChatId    string    `json:"chat_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Following defines model for Following.
type Following struct {
	// Followee to user
	Followee string `json:"followee"`

	// Follower from user
	Follower         string  `json:"follower"`
	FollowerUsername *string `json:"follower_username,omitempty"`
}

// Identity defines model for Identity.
type Identity struct {
	Owner Owner  `json:"owner"`
	Token string `json:"token"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Owner defines model for Owner.
type Owner struct {
	CreatedAt time.Time `json:"created_at"`
	Ipv4      string    `json:"ipv4"`
	Ipv6      string    `json:"ipv6"`
	NodeId    string    `json:"node_id"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// ReplyNode defines model for ReplyNode.
type ReplyNode struct {
	Children []ReplyNode `json:"children"`
	Reply    Tweet       `json:"reply"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	ParentId  string    `json:"parent_id"`
	RetweetId *string   `json:"retweet_id,omitempty"`
	RootId    string    `json:"root_id"`
	Text      string    `json:"text"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// User defines model for User.
type User struct {
	// Avatar mime type + "," + base64
	Avatar *string `json:"avatar,omitempty"`

	// BackgroundImage mime type + "," + base64
	BackgroundImage *string            `json:"background_image,omitempty"`
	Bio             string             `json:"bio"`
	Birthdate       openapi_types.Date `json:"birthdate"`
	CreatedAt       time.Time          `json:"created_at"`
	FolloweesCount  uint64             `json:"followees_count"`
	FollowersCount  uint64             `json:"followers_count"`
	Id              string             `json:"id"`
	NodeId          string             `json:"node_id"`

	// Rtt round trip time - nanoseconds, default - max int64
	Rtt         int64   `json:"rtt"`
	TweetsCount uint64  `json:"tweets_count"`
	Username    string  `json:"username"`
	Website     *string `json:"website,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xXUW/iOBD+K5bv3mpaWjh6l7dTdSdV6rbSqqt92K6QSQbiJbG99gRaVfz3lZNAQuIQ",
	"2PIWbM/MN9/MNzbvNFSpVhIkWhq8UxvGkPL8898M40cVwb2cK/dbG6XBoIB8V0QgUeCb+/7TwJwG9I+r",
	"ytdV6ejqfntuw+gKjBVKOhN800ADatEIuaCbDaMGfmbCQESDb5XzyuY729qo2Q8I0fm7izm2kYUGOEI0",
	"LfbmyqTui0YcYYAiBcqa0RmdG5VOMwtmKiIPPEY7llEdtMp0dCKUFhG0AW4vJqsnuxeui65PYC1fgIe1",
	"mGNXGqGSCDLPIRXyAeQCYxpce3j8He67uKt47QnqTkqeQn9f1Xgr02UFxdsMa872kvHR+Z8xyniIVFEd",
	"iZAICzDOIK24Pwwzd1Gd9wX/XyWJWjvjFoB5vgV5nAhsaITGXHUUFXHpeQVQGJm2keu+XrPp8TXYwasF",
	"9WV4Xxsw+wmqtSyAHpo7T/mhXKJLOGLkFMdY6dwH6EEsPbrBNQAe36fHnOxs2l0sH7ynLSsfn4ZCr8b+",
	"KahXE++GVBFM+4V8FunWFLoNW0IuAfYq9zPo5O2x1GlzDIokMkXDCITU9vVZ5Wuzi8SN4fmFZ9xmn4dn",
	"V9VWvoUpqwD5EilMz1Nzf4E0NyA7LwYD9fZvbyvVuYfwiqdp5izNU+jIxa4P/SrLCvQpV8EX65MeX3Hk",
	"nomaihSI80EuyAtlL5RckBm3MBn7CjPj4XJhVCajqUjL6+ND/oTysjkTBmPXIq2eoWe66LeT305DlRXP",
	"icYlyejrYKEG5WomJE7G9WvmdMuO1jk0rwxiwfGcZwnS4J+bm9Ho9mY4mvz91/j2djIcDlmjAnl5CBqh",
	"iUueDIjkUlkIlYwsI6UrMiApfyUFNlaRtl1ovxhydZ2edF0YPfpaw8yKRs1jZbHs+yNep66fOoZys2zt",
	"Fmg8YPfyrbdkUZW29BwiUf4/2S/J3W7QkrkyhJNIuCxmGUJEntcCEcwgEUsgXOtEhDy3YxQFJi7CV240",
	"eQRcK7Os/Q0J6PXl8HLoqFMaJNeCBnSUL7kxgrFT/mbzKwAA//9ShLjMVw0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
