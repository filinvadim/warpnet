// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package domain

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AuthNodeInfo defines model for AuthNodeInfo.
type AuthNodeInfo struct {
	Identity Identity `json:"identity"`
	Version  string   `json:"version"`
}

// Chat defines model for Chat.
type Chat struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	OwnerId   string    `json:"owner_id"`
	ToUserId  string    `json:"to_user_id"`
	UpdatedAt time.Time `json:"updated_at"`
}

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	ChatId    string    `json:"chat_id"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	Text      string    `json:"text"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Following defines model for Following.
type Following struct {
	// Followee to user
	Followee string `json:"followee"`

	// Follower from user
	Follower         string  `json:"follower"`
	FollowerUsername *string `json:"follower_username,omitempty"`
}

// Identity defines model for Identity.
type Identity struct {
	Owner Owner  `json:"owner"`
	Token string `json:"token"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Owner defines model for Owner.
type Owner struct {
	CreatedAt time.Time `json:"created_at"`
	Ipv4      string    `json:"ipv4"`
	Ipv6      string    `json:"ipv6"`
	NodeId    string    `json:"node_id"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// ReplyNode defines model for ReplyNode.
type ReplyNode struct {
	Children []ReplyNode `json:"children"`
	Reply    Tweet       `json:"reply"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	ParentId  *string   `json:"parent_id,omitempty"`

	// RetweetedBy retweeted by user id
	RetweetedBy *string `json:"retweeted_by,omitempty"`
	RootId      string  `json:"root_id"`
	Text        string  `json:"text"`
	UserId      string  `json:"user_id"`
	Username    string  `json:"username"`
}

// User defines model for User.
type User struct {
	// Avatar mime type + "," + base64
	Avatar *string `json:"avatar,omitempty"`

	// BackgroundImage mime type + "," + base64
	BackgroundImage *string            `json:"background_image,omitempty"`
	Bio             string             `json:"bio"`
	Birthdate       openapi_types.Date `json:"birthdate"`
	CreatedAt       time.Time          `json:"created_at"`
	FolloweesCount  uint64             `json:"followees_count"`
	FollowersCount  uint64             `json:"followers_count"`
	Id              string             `json:"id"`
	NodeId          string             `json:"node_id"`

	// Rtt round trip time - nanoseconds, default - max int64
	Rtt         int64   `json:"rtt"`
	TweetsCount uint64  `json:"tweets_count"`
	Username    string  `json:"username"`
	Website     *string `json:"website,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RXUW/jNgz+K4K2t3OuuSZLN78Nhw0ocOsBQ4c9rEMg20ysxZY0ik4aFPnvg2QndmK5",
	"SbremxOJ5Efy+0j7hae6NFqBIsvjF27THErhH3+uKH/QGdyrhXa/DWoDSBL8qcxAkaSte/4eYcFj/t1N",
	"6+umcXRzv7+3i/ga0EqtnAltDfCYW0Kplny3izjCv5VEyHj8V+u8tfk72tvo5B9Iyfn7nAvqI0sRBEE2",
	"r88WGkv3xDNBMCJZAo9Oo0dcZgFQEdcbBTgfOCQ9r+zwcWWyK2H0isA7CI7iRd0kj0INlek3sFYsIVCt",
	"XNBQCu9YSYJn76SU6guoJeU8/hSw7hT0gptKlHCeTJ2iNblGdW09po6no4RDhfwFUWOghDrrwpCKYAno",
	"DMq26q9j9C7a+6Hgv+qi0Btn3AOw8Efg42RgU5SGvM44aebSCzWqMcK+0QJ1edZsfnkDDvA6QUMZ3ndG",
	"ynGCXgXnJs1Xf8kLcwUXDJn6WiOxIKAvchVQDG0A6HKSXnJzkLGHWCF4X/dVeYf5Z9bToG6lWc+CB0pn",
	"MDj6XhuLb9BtR6H7sA3kBuBZ5f4Optg+NDo9HYCyyLAmjCQo7Tmetb52h0gCUfgVh+7wnIdH19VevrVp",
	"1AIKJVKbfsudZwSCGlwJCJ6SkM2TbX9yHE5ZsvUThNUs7nnRejDC9ZviXTjW3QipVgTKPe2BXrMl/rAh",
	"VYq1IBEYtqUsgTkf7AN74tETZx9YIizMpqHCJSJdLVFXKpvLstks/8uf1MEKJhIpd+zp0Snk5S3s2y8F",
	"O091pSiwPyP+PFrqUfNvJRXNpt0NdL3lAF1eG2VIVNd4IaqCePzT7e1kcnc7nsx+/GF6dzcbj8fRqQhc",
	"exihNMwlz0ZMCaUtpFplNmKNKzZipXhmNbaoLdr+j/7LhJfW9Ul3xXBGUxtIrDzpea4tNby/4HXV8Wlg",
	"Xp+2rU+Bk7fao3y7lKy70peeQySbj5Xjlnw+zGC20MgEy6TLIqncqHrcSCLAUSFXwIQxhUyFt4s4SSpc",
	"hD8FGvYAtNG46nyTxPzTx/HHsf9SMKCEkTzmE/+Xm6OUO+Xvdv8FAAD//0HdG1lkDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
