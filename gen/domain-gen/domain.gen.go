// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package domain

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

// Chat defines model for Chat.
type Chat struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	Id         string    `json:"id"`
	ToUserId   string    `json:"to_user_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	ChatId    string    `json:"chat_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Owner defines model for Owner.
type Owner struct {
	CreatedAt   time.Time `json:"created_at"`
	Description string    `json:"description"`
	Id          string    `json:"id"`
	NodeId      string    `json:"node_id"`
	Username    string    `json:"username"`
}

// ReplyNode defines model for ReplyNode.
type ReplyNode struct {
	Children []ReplyNode `json:"children"`
	Reply    Tweet       `json:"reply"`
}

// Retweet defines model for Retweet.
type Retweet struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	Content       string     `json:"content"`
	CreatedAt     time.Time  `json:"created_at"`
	Id            string     `json:"id"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	ParentId      string     `json:"parent_id"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	RootId        string     `json:"root_id"`
	UserId        string     `json:"user_id"`
	Username      string     `json:"username"`
}

// User defines model for User.
type User struct {
	Birthdate    *time.Time `json:"birthdate,omitempty"`
	CreatedAt    time.Time  `json:"created_at"`
	Description  string     `json:"description"`
	Followed     []string   `json:"followed"`
	FollowedNum  int64      `json:"followed_num"`
	Followers    []string   `json:"followers"`
	FollowersNum int64      `json:"followers_num"`
	Id           string     `json:"id"`
	Link         *string    `json:"link,omitempty"`
	Location     *string    `json:"location,omitempty"`
	MyReferrals  *[]string  `json:"my_referrals,omitempty"`
	NodeId       string     `json:"node_id"`
	ReferredBy   *string    `json:"referred_by,omitempty"`
	Username     string     `json:"username"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWS2/bPBD8Kwa/76i80KIHXYPe0hQoUvRQFAItrizW4qPLVQ0h8H8vSDnWw5RtGSnS",
	"UwSG3J2dmd31M8uNskaDJsfSZ+byEhQPn/clJ//XorGAJCGc5gicQGTt/wqDyn8xwQmuSCpgCaPGAkuZ",
	"I5R6xbYJK9CorHaAmRT+1cGFiWMyR1/VVsyEsk0Ywq9aIgiWfvdpR+AGOZN+sYN0P/aRzfIn5OTReLo+",
	"gXN8BRHWSk5TZeRGE+hQg5L6AfSKSpbeRXi8hPsp7jpeTyT1NzVXEAkzorPH267cpKX4pcJesEExMTo/",
	"IhqMEGlEH4nUBCtA/0B13B+HGUJ092PJH+Q6IiJtAOh80s65OcngPlcM3ueNBnyd1hTgcpSWpNFzOlMb",
	"AdkRa70YZk7xoe6eQfrQuownjfMFbNU87mwy7kJZCYRQqSRQ4fB/hIKl7L+bbhDe7KbgTRdru8/EEXnD",
	"AnZbNaciPHkdD0ptnyYdoHghwQT/sA+f4vjeZKBVct1mP0vY0OARTUOULDe1HiKSmj6890NDaqlqxdLb",
	"JDKCLEfQk3MeWz3dDPe1Boh6r411MVQ0hrI32Q2jjdBx1oGasye+utgoXEqk0tvofF/9jelZmKoyGxAD",
	"yQ9/5ozEfXmVaS9fRNpDOXdP0F2UCd2MVJP9p9eDCDVWMcoqk/NJvlSTIRSAyKuZlRxbSG1IENmyef2F",
	"NdxSPd92C2ug55j0nkn6Mp7wvYcidWE85IEJ2f1+jiwKgwu+ENLDX9YEYvG0kUSAV37MLbi1ldyJkTCS",
	"VPkM3zjaxSPQxuCaJew3oGsD313fXt96uowFza1kKXsXjnwPU+ll2m7/BAAA//9sIepLTwwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
