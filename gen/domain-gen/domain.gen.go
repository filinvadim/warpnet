// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package domain

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AuthNodeInfo defines model for AuthNodeInfo.
type AuthNodeInfo struct {
	Identity Identity `json:"identity"`
	Version  string   `json:"version"`
}

// Chat defines model for Chat.
type Chat struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	Id         string    `json:"id"`
	ToUserId   string    `json:"to_user_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	ChatId    string    `json:"chat_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Following defines model for Following.
type Following struct {
	// Followee to user
	Followee string `json:"followee"`

	// Follower from user
	Follower         string  `json:"follower"`
	FollowerUsername *string `json:"follower_username,omitempty"`
}

// Identity defines model for Identity.
type Identity struct {
	Owner Owner  `json:"owner"`
	Token string `json:"token"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Owner defines model for Owner.
type Owner struct {
	CreatedAt time.Time `json:"created_at"`
	Ipv4      string    `json:"ipv4"`
	Ipv6      string    `json:"ipv6"`
	NodeId    string    `json:"node_id"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// ReplyNode defines model for ReplyNode.
type ReplyNode struct {
	Children []ReplyNode `json:"children"`
	Reply    Tweet       `json:"reply"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	ParentId  string    `json:"parent_id"`
	RetweetId *string   `json:"retweet_id,omitempty"`
	RootId    string    `json:"root_id"`
	Text      string    `json:"text"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// User defines model for User.
type User struct {
	// Avatar mime type + "," + base64
	Avatar *string `json:"avatar,omitempty"`

	// BackgroundImage mime type + "," + base64
	BackgroundImage *string            `json:"background_image,omitempty"`
	Bio             string             `json:"bio"`
	Birthdate       openapi_types.Date `json:"birthdate"`
	CreatedAt       time.Time          `json:"created_at"`
	Id              string             `json:"id"`
	NodeId          string             `json:"node_id"`

	// Rtt round trip time - nanoseconds, default - max int64
	Rtt       int64   `json:"rtt"`
	TweetsNum int64   `json:"tweets_num"`
	Username  string  `json:"username"`
	Website   *string `json:"website,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RX0W7rNgz9FUHb23Vu06ZLN78NxQYU6Fpg6LCHdQgUm0602JJG0UmLIv8+SHZiJ5bj",
	"dO19cyyRPOfokHLeeKILoxUosjx+4zZZQiH8488lLR90Cncq0+63QW0ASYJflSkokvTqnr9HyHjMv7to",
	"cl3UiS7udvu2EV8DWqmVC6FXAzzmllCqBd9uI47wbykRUh7/1SRvYv6OdjF6/g8k5PLdLgV1kSUIgiCd",
	"VWuZxsI98VQQjEgWwKPj6hHPUBez0gLOZBqAF/Ge16RPRpUmfSeUjhD8CNxBzahN9qBcn1y/gbViAQHV",
	"loL6aCRaESjPoZDqHtSCljy+DOj4f7Tv067RdaCo26lEAcO+aulW040qiXcMW8kOyITk/AVRY0BInbaR",
	"SEWwAHQBRaP9aZg+RbM/VPxXned644I7ADK/BL5OCjZBach3HSfNHL1gA1RB2A1y7hsMm51/Bnt4raIh",
	"hnetAXNIUG9UBfTU3Hn0m3yLruCMkVNti+rkIUD3chXoG9oA0Pk+PWdnr2n3tULwHneqfHwaSrO+Dk9B",
	"s54GF5ROYTbcyJ/Suq0O3ZWtIdcABzv3dzD560Pdp8djUOYpVoaRBIUd8lmTa7uvJBCFv/DQLQ5leHKn",
	"2uFbhUYNoBCRKvRzzjx8QEYgqN6LAaFt/+6y1r1rBC/0vp75FPNUfeRqt4d+w7IB/Z6r4A8baj2xFiQC",
	"E7WQBTCXg31hzzx65uwLmwsL0+vQwcxFslqgLlU6k0V9fXwon9RBNecSaeks0vEM/7YX/anZgUQV30yU",
	"OfH4p6uryeTmajyZ/vjD9c3NdDweR0dqeKkYoTTMAWEjpoTSFhKtUhuxOhUbsUK8MKnIq7QnsHvRvb29",
	"0+1MlcUB4/6Atj0HXL6BuZVHypeYn/d56A60Zypmu68ED7u5cG39++DrsUWw7YbqELqud1hk/dfg8ARu",
	"9zOOZRqZYKl0+OclQcqeNpIIcJTLFTBhTC4T4eMiTpJyV+FPgYY9AG00rlr/AGJ++XX8dez00gaUMJLH",
	"fOJfuQ6mpWu67fa/AAAA//92P/8O0gwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
