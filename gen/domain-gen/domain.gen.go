// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package domain

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Chat defines model for Chat.
type Chat struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	Id         string    `json:"id"`
	ToUserId   string    `json:"to_user_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	ChatId    string    `json:"chat_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// ReplyNode defines model for ReplyNode.
type ReplyNode struct {
	Children []ReplyNode `json:"children"`
	Reply    Tweet       `json:"reply"`
}

// Retweet defines model for Retweet.
type Retweet struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	CreatedAt     time.Time  `json:"created_at"`
	Id            string     `json:"id"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	ParentId      string     `json:"parent_id"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	RootId        string     `json:"root_id"`
	Text          string     `json:"text"`
	UserId        string     `json:"user_id"`
	Username      string     `json:"username"`
}

// User defines model for User.
type User struct {
	Avatar          *openapi_types.File `json:"avatar,omitempty"`
	BackgroundImage *openapi_types.File `json:"background_image,omitempty"`
	Bio             string              `json:"bio"`
	Birthdate       *time.Time          `json:"birthdate,omitempty"`
	CreatedAt       time.Time           `json:"created_at"`
	FollowedBy      []string            `json:"followed_by"`
	FollowersNum    int64               `json:"followers_num"`
	Following       []string            `json:"following"`
	FollowingNum    *int64              `json:"following_num,omitempty"`
	Id              string              `json:"id"`
	Location        *string             `json:"location,omitempty"`
	NodeId          string              `json:"node_id"`
	TweetsNum       *int64              `json:"tweets_num,omitempty"`
	Username        string              `json:"username"`
	Website         *string             `json:"website,omitempty"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWT2/bPgz9KoF+v6P7Dxt28LXYreth6LDDMBiyxSRcbEmj6WZBke8+0EpjO5EbJ+hh",
	"pwiKSD6+90j4RRWu8s6C5VqlL6oullDp9ni/1Cy/npwHYoT2tiDQDCYL/80dVXJSRjNcMVagEsUbDypV",
	"NRPahdomak6uypoaKEMjUUcPRq7ZvRnVeHMmlG2iCH43SGBU+kPKHoAb1Ez6zQ7K/dxndvkvKFjQCF1f",
	"oK71AiKsLTWPtVE4y2DbHiq0D2AXvFTpXYTHS7gf467j9URReWl1BZE0B3T2eNu1mwSKXzvsJRs0E6Pz",
	"M5GjCJHO9JGgZVgASUDVcf82zDZF9z5W/AFXERF5DcDTSZvycpTBfa0YvK/gy83jjolDo2FpCKyckaFq",
	"L/8nmKtU/XfTzfrNbtBvulzbfSVNpDeqxebLzakMTwL1qJUQmnSA4o20ff7DVD/F8b3jJJa4CjknydU6",
	"M6JUmyUrXGOHiNDyp4/idrRYNZVKb5PI7HhNYEcXFAWV6jM8FWSNOirkuhgqOTcKlOEPv6NjLtt9wVOC",
	"pL/4Ooa7Fs5Zh99qiGxD/axZ04DFHK2mTcx/uS5WC3KNNRlWu005JQxdlOwciZdi+OkTcNG3gytLtwaT",
	"5ZuB/47FP3DaLpDqzIqZIkY7NleIkYQXlEK7OKPU2DZwhWZ0NvqndQZGvR/GajqAvrdPjMEa8hoPhG6o",
	"nPZ9Jf4ZOP21i562gvpQsb4aQxucGBZBgXbeutZAXRD6wKi636+q2dzRTM8MCvK8YTCzpzUyA13JJp1p",
	"70vcKZEoRi6lwndNfvYIvHa0Uol6BqpD4rvr2+tbYcp5sNqjStWH9koGn5fiou32bwAAAP//1febLmsL",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
