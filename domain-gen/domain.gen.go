// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package domain

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for EventEventType.
const (
	EventEventTypeError       EventEventType = "error"
	EventEventTypeFollow      EventEventType = "follow"
	EventEventTypeGetTimeline EventEventType = "getTimeline"
	EventEventTypeGetTweet    EventEventType = "getTweet"
	EventEventTypeGetTweets   EventEventType = "getTweets"
	EventEventTypeGetUser     EventEventType = "getUser"
	EventEventTypeLogin       EventEventType = "login"
	EventEventTypeLogout      EventEventType = "logout"
	EventEventTypeNewTweet    EventEventType = "newTweet"
	EventEventTypeNewUser     EventEventType = "newUser"
	EventEventTypePing        EventEventType = "ping"
	EventEventTypePong        EventEventType = "pong"
	EventEventTypeUnfollow    EventEventType = "unfollow"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	Data      *Event_Data    `json:"data,omitempty"`
	EventType EventEventType `json:"event_type"`
	Timestamp time.Time      `json:"timestamp"`
}

// Event_Data defines model for Event.Data.
type Event_Data struct {
	union json.RawMessage
}

// EventEventType defines model for Event.EventType.
type EventEventType string

// FollowRequest defines model for FollowRequest.
type FollowRequest struct {
	ReaderId string `json:"reader_id"`
	WriterId string `json:"writer_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"userId"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent = GetAllTweetsEvent

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"userId"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId string `json:"userId"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// LoginEvent defines model for LoginEvent.
type LoginEvent struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent = map[string]interface{}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	Request *FollowRequest `json:"request,omitempty"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	Tweet *Tweet `json:"tweet,omitempty"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	Request *UnfollowRequest `json:"request,omitempty"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	User *User `json:"user,omitempty"`
}

// Node defines model for Node.
type Node struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Host The IP address
	Host string             `json:"host"`
	Id   openapi_types.UUID `json:"id"`

	// IsActive Whether the IP address is currently active
	IsActive bool `json:"is_active"`
	IsOwned  bool `json:"is_owned"`

	// LastSeen The timestamp when this IP address was last active
	LastSeen time.Time `json:"last_seen"`

	// Latency The network latency to this IP in milliseconds
	Latency *int64 `json:"latency,omitempty"`

	// OwnerId user ID
	OwnerId string `json:"owner_id"`

	// Uptime Uptime of the node in seconds
	Uptime *int64 `json:"uptime,omitempty"`
}

// PingEvent defines model for PingEvent.
type PingEvent struct {
	CachedNodes []Node  `json:"cached_nodes"`
	DestHost    *string `json:"dest_host,omitempty"`
	OwnerInfo   *User   `json:"owner_info,omitempty"`
	OwnerNode   *Node   `json:"owner_node"`
}

// PongEvent defines model for PongEvent.
type PongEvent = PingEvent

// Retweet defines model for Retweet.
type Retweet struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	Content       string     `json:"content"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	Sequence      *int64     `json:"sequence,omitempty"`
	TweetId       *string    `json:"tweet_id,omitempty"`
	UserId        string     `json:"user_id"`
	Username      *string    `json:"username,omitempty"`
}

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string  `json:"cursor"`
	Tweets []Tweet `json:"tweets"`
}

// UnfollowRequest defines model for UnfollowRequest.
type UnfollowRequest struct {
	ReaderId string `json:"reader_id"`
	WriterId string `json:"writer_id"`
}

// User defines model for User.
type User struct {
	Birthdate    *time.Time         `json:"birthdate,omitempty"`
	CreatedAt    *time.Time         `json:"created_at,omitempty"`
	Description  *string            `json:"description,omitempty"`
	Followed     *[]string          `json:"followed,omitempty"`
	FollowedNum  *int64             `json:"followed_num,omitempty"`
	Followers    *[]string          `json:"followers,omitempty"`
	FollowersNum *int64             `json:"followers_num,omitempty"`
	Link         *string            `json:"link,omitempty"`
	Location     *string            `json:"location,omitempty"`
	MyReferrals  *[]string          `json:"my_referrals,omitempty"`
	NodeId       openapi_types.UUID `json:"node_id"`
	ReferredBy   *string            `json:"referred_by,omitempty"`
	UserId       *string            `json:"user_id,omitempty"`
	Username     string             `json:"username"`
}

// AsPingEvent returns the union data inside the Event_Data as a PingEvent
func (t Event_Data) AsPingEvent() (PingEvent, error) {
	var body PingEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPingEvent overwrites any union data inside the Event_Data as the provided PingEvent
func (t *Event_Data) FromPingEvent(v PingEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePingEvent performs a merge with any union data inside the Event_Data, using the provided PingEvent
func (t *Event_Data) MergePingEvent(v PingEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorEvent returns the union data inside the Event_Data as a ErrorEvent
func (t Event_Data) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the Event_Data as the provided ErrorEvent
func (t *Event_Data) FromErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the Event_Data, using the provided ErrorEvent
func (t *Event_Data) MergeErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewTweetEvent returns the union data inside the Event_Data as a NewTweetEvent
func (t Event_Data) AsNewTweetEvent() (NewTweetEvent, error) {
	var body NewTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewTweetEvent overwrites any union data inside the Event_Data as the provided NewTweetEvent
func (t *Event_Data) FromNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewTweetEvent performs a merge with any union data inside the Event_Data, using the provided NewTweetEvent
func (t *Event_Data) MergeNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUserEvent returns the union data inside the Event_Data as a NewUserEvent
func (t Event_Data) AsNewUserEvent() (NewUserEvent, error) {
	var body NewUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUserEvent overwrites any union data inside the Event_Data as the provided NewUserEvent
func (t *Event_Data) FromNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUserEvent performs a merge with any union data inside the Event_Data, using the provided NewUserEvent
func (t *Event_Data) MergeNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewFollowEvent returns the union data inside the Event_Data as a NewFollowEvent
func (t Event_Data) AsNewFollowEvent() (NewFollowEvent, error) {
	var body NewFollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewFollowEvent overwrites any union data inside the Event_Data as the provided NewFollowEvent
func (t *Event_Data) FromNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewFollowEvent performs a merge with any union data inside the Event_Data, using the provided NewFollowEvent
func (t *Event_Data) MergeNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUnfollowEvent returns the union data inside the Event_Data as a NewUnfollowEvent
func (t Event_Data) AsNewUnfollowEvent() (NewUnfollowEvent, error) {
	var body NewUnfollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUnfollowEvent overwrites any union data inside the Event_Data as the provided NewUnfollowEvent
func (t *Event_Data) FromNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUnfollowEvent performs a merge with any union data inside the Event_Data, using the provided NewUnfollowEvent
func (t *Event_Data) MergeNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllTweetsEvent returns the union data inside the Event_Data as a GetAllTweetsEvent
func (t Event_Data) AsGetAllTweetsEvent() (GetAllTweetsEvent, error) {
	var body GetAllTweetsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllTweetsEvent overwrites any union data inside the Event_Data as the provided GetAllTweetsEvent
func (t *Event_Data) FromGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllTweetsEvent performs a merge with any union data inside the Event_Data, using the provided GetAllTweetsEvent
func (t *Event_Data) MergeGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTimelineEvent returns the union data inside the Event_Data as a GetTimelineEvent
func (t Event_Data) AsGetTimelineEvent() (GetTimelineEvent, error) {
	var body GetTimelineEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTimelineEvent overwrites any union data inside the Event_Data as the provided GetTimelineEvent
func (t *Event_Data) FromGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTimelineEvent performs a merge with any union data inside the Event_Data, using the provided GetTimelineEvent
func (t *Event_Data) MergeGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTweetEvent returns the union data inside the Event_Data as a GetTweetEvent
func (t Event_Data) AsGetTweetEvent() (GetTweetEvent, error) {
	var body GetTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTweetEvent overwrites any union data inside the Event_Data as the provided GetTweetEvent
func (t *Event_Data) FromGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTweetEvent performs a merge with any union data inside the Event_Data, using the provided GetTweetEvent
func (t *Event_Data) MergeGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetUserEvent returns the union data inside the Event_Data as a GetUserEvent
func (t Event_Data) AsGetUserEvent() (GetUserEvent, error) {
	var body GetUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetUserEvent overwrites any union data inside the Event_Data as the provided GetUserEvent
func (t *Event_Data) FromGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetUserEvent performs a merge with any union data inside the Event_Data, using the provided GetUserEvent
func (t *Event_Data) MergeGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLoginEvent returns the union data inside the Event_Data as a LoginEvent
func (t Event_Data) AsLoginEvent() (LoginEvent, error) {
	var body LoginEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginEvent overwrites any union data inside the Event_Data as the provided LoginEvent
func (t *Event_Data) FromLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginEvent performs a merge with any union data inside the Event_Data, using the provided LoginEvent
func (t *Event_Data) MergeLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLogoutEvent returns the union data inside the Event_Data as a LogoutEvent
func (t Event_Data) AsLogoutEvent() (LogoutEvent, error) {
	var body LogoutEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLogoutEvent overwrites any union data inside the Event_Data as the provided LogoutEvent
func (t *Event_Data) FromLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLogoutEvent performs a merge with any union data inside the Event_Data, using the provided LogoutEvent
func (t *Event_Data) MergeLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYX2/bNhD/KgS3R6VJ1qEPegvWrjAQbEHgYA9FIdDS2eJCkSp5imsE+e4DRf21qIg2",
	"NrQD+mRK4t39eH9+d/QzTVVRKgkSDY2fqUlzKFi9vKkwv4cvFRi0j6VWJWjkUH8smTF7pTO7xkMJNKYG",
	"NZc7+hLRyoCWrADPx5eIavhScQ0ZjT/1O6Ne4+eoFVKbvyFFq/GD1kpPUaQqGxrhEmEH2goUYAzbBSCo",
	"VfT7Z41/eAKJ3wyB33jGkNlfJeHPLY0/PdOfNWxpTH+67KN62YT08o7LnVP0Er2+c3Dgpa1/wH69B8Dg",
	"3Q8GwlX/roRQ+3DdcnuCwEfAGyFq9CZYYs0LEFxCuEC4dz4ChnvnVu24DN6qqhbD55eIgl0mLsueaQZb",
	"VgmkMS1tekYUZFXYxGweS+Xe1iUY0Z1D6Vb16QZLQyMqXZDdqt3gAkMjWsluKewR3K+qWi2Nfwdl0PMK",
	"8gIMsqK0sLdKF8yizhjChf1Eo4VK6+VHPvBVnMu8WfrTwDLQCa/5r+DyFuQOcxpfe1DvNcewvUdweyND",
	"JT6001SeElWljaPQCUDBC44eEovo14udumjeVlziu19bel9lYeS+mgU8rqT/Ad6+kCdg0X5bzTfDE6xH",
	"nbIZHD1FTGD8Cwe95Y8wc76wbLe6z8j1VizqbXnh9az3rUeSIav2SvvvR+3LQyEdt7xG3mMismB9lhaT",
	"c8mM4+k59ePGeu5RWi1Lh1nI8EUzdo9fdzOsyUoIthFAY9QVRMfMo4EhZAnD0DYT0Vy542dgUs1L5ErS",
	"mK5zIKs7wrJMgzE+OVconY2qciUw2WYSliJ/gqmNv3LAHDTBkS3CDUkrrUGiOJBGtlO8UUoAk41mtZcw",
	"LJrBV8EMJgZA+s/W9VOyz0ESzLkZYtgzQ6yG3n6YMwVDkOnBb1MC7pV+JM0mgqqzyyUpuBDcQKpkZv0N",
	"X1lR2jhf/3I1sO46Q+QZ2q0vWvoa27aZR1bvfXirsj7JROShfk/Utg6OVBlYiB50b99dhcA7IqoudE36",
	"DdNkGLrBqeqE85FZfzeYNmKW5pAlFn79zBEKs1SDdaX1Jci0Zgf7nIHBpC2WiSMbnHKrwmq8lZBNXS8j",
	"Or56Dc/m9Yv64RefX+6h6yrf6aSw9uNLlcQmnAvwzmkDgj+ekAz1rOVJhlpLkqpKjk23vFBwyQt7Rbvy",
	"UZh2oQmH0cbSg6TVdTYYY1u9TOEM0f8gk04dA12atSkzm2XmHkyppIGTbjEnRmntj9Fx4Tp7nXYf5uMx",
	"7Hu/3D40M98Y5IZrzG0xhlfnORU96uieKDpXuvmpi+M01kd11Uol9T8tzyGTSSOizVmWtDnBlODycTyW",
	"auFlO5WyWccUh0TDFrRm4kTItuskgYOxMwFZsjnMXvsaXa9ywakNqLkgtlCnaWuF2oY9ngp/62qbbJUm",
	"jGTcGtpUCBlZ7zki6AvbAggrS8EbF0cUOdpZkb6fbic3dysa0SfQxtm4fnP15qqeA0qQrOQ0pm/rV/ZO",
	"i7mhsb0CvfwTAAD//0BptnH9FwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
