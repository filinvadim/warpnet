// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package domain

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Chat defines model for Chat.
type Chat struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	Id         string    `json:"id"`
	ToUserId   string    `json:"to_user_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	ChatId    string    `json:"chat_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse struct {
	Chats  []Chat  `json:"chats"`
	Cursor string  `json:"cursor"`
	UserId *string `json:"user_id,omitempty"`
}

// CreateChatRequest defines model for CreateChatRequest.
type CreateChatRequest struct {
	FromUserId string `json:"from_user_id"`
	ToUserId   string `json:"to_user_id"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	Data      *Event_Data `json:"data,omitempty"`
	Timestamp time.Time   `json:"timestamp"`
}

// Event_Data defines model for Event.Data.
type Event_Data struct {
	union json.RawMessage
}

// FollowRequest defines model for FollowRequest.
type FollowRequest struct {
	ReaderId string `json:"reader_id"`
	WriterId string `json:"writer_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"userId"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetRepliesEvent defines model for GetRepliesEvent.
type GetRepliesEvent struct {
	Cursor        *string `json:"cursor,omitempty"`
	Limit         *uint64 `json:"limit,omitempty"`
	ParentReplyId string  `json:"parent_reply_id"`
	RootId        string  `json:"root_id"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	ParentReplyId string `json:"parent_reply_id"`
	ReplyId       string `json:"reply_id"`
	RootId        string `json:"root_id"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent = GetAllTweetsEvent

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"userId"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId string `json:"userId"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// LoginEvent defines model for LoginEvent.
type LoginEvent struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
	User  User   `json:"user"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent = map[string]interface{}

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	Cursor   string        `json:"cursor"`
	Messages []ChatMessage `json:"messages"`
	UserId   *string       `json:"user_id,omitempty"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	Request *FollowRequest `json:"request,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent struct {
	Tweet *Tweet `json:"tweet,omitempty"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	Tweet *Tweet `json:"tweet,omitempty"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	Request *UnfollowRequest `json:"request,omitempty"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	User *User `json:"user,omitempty"`
}

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string      `json:"cursor"`
	Replies []ReplyNode `json:"replies"`
	UserId  *string     `json:"user_id,omitempty"`
}

// ReplyNode defines model for ReplyNode.
type ReplyNode struct {
	Children []ReplyNode `json:"children"`
	Reply    Tweet       `json:"reply"`
}

// Retweet defines model for Retweet.
type Retweet struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	Content       string     `json:"content"`
	CreatedAt     time.Time  `json:"created_at"`
	Id            string     `json:"id"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	ParentId      string     `json:"parent_id"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	RootId        string     `json:"root_id"`
	UserId        string     `json:"user_id"`
	Username      string     `json:"username"`
}

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string  `json:"cursor"`
	Tweets []Tweet `json:"tweets"`
	UserId *string `json:"user_id,omitempty"`
}

// UnfollowRequest defines model for UnfollowRequest.
type UnfollowRequest struct {
	ReaderId string `json:"reader_id"`
	WriterId string `json:"writer_id"`
}

// User defines model for User.
type User struct {
	Birthdate    *time.Time `json:"birthdate,omitempty"`
	CreatedAt    time.Time  `json:"created_at"`
	Description  string     `json:"description"`
	Followed     []string   `json:"followed"`
	FollowedNum  int64      `json:"followed_num"`
	Followers    []string   `json:"followers"`
	FollowersNum int64      `json:"followers_num"`
	Id           string     `json:"id"`
	Link         *string    `json:"link,omitempty"`
	Location     *string    `json:"location,omitempty"`
	MyReferrals  *[]string  `json:"my_referrals,omitempty"`
	NodeId       string     `json:"node_id"`
	ReferredBy   *string    `json:"referred_by,omitempty"`
	Username     string     `json:"username"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string `json:"cursor"`
	Users  []User `json:"users"`
}

// AsErrorEvent returns the union data inside the Event_Data as a ErrorEvent
func (t Event_Data) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the Event_Data as the provided ErrorEvent
func (t *Event_Data) FromErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the Event_Data, using the provided ErrorEvent
func (t *Event_Data) MergeErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewTweetEvent returns the union data inside the Event_Data as a NewTweetEvent
func (t Event_Data) AsNewTweetEvent() (NewTweetEvent, error) {
	var body NewTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewTweetEvent overwrites any union data inside the Event_Data as the provided NewTweetEvent
func (t *Event_Data) FromNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewTweetEvent performs a merge with any union data inside the Event_Data, using the provided NewTweetEvent
func (t *Event_Data) MergeNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUserEvent returns the union data inside the Event_Data as a NewUserEvent
func (t Event_Data) AsNewUserEvent() (NewUserEvent, error) {
	var body NewUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUserEvent overwrites any union data inside the Event_Data as the provided NewUserEvent
func (t *Event_Data) FromNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUserEvent performs a merge with any union data inside the Event_Data, using the provided NewUserEvent
func (t *Event_Data) MergeNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewFollowEvent returns the union data inside the Event_Data as a NewFollowEvent
func (t Event_Data) AsNewFollowEvent() (NewFollowEvent, error) {
	var body NewFollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewFollowEvent overwrites any union data inside the Event_Data as the provided NewFollowEvent
func (t *Event_Data) FromNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewFollowEvent performs a merge with any union data inside the Event_Data, using the provided NewFollowEvent
func (t *Event_Data) MergeNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUnfollowEvent returns the union data inside the Event_Data as a NewUnfollowEvent
func (t Event_Data) AsNewUnfollowEvent() (NewUnfollowEvent, error) {
	var body NewUnfollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUnfollowEvent overwrites any union data inside the Event_Data as the provided NewUnfollowEvent
func (t *Event_Data) FromNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUnfollowEvent performs a merge with any union data inside the Event_Data, using the provided NewUnfollowEvent
func (t *Event_Data) MergeNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllTweetsEvent returns the union data inside the Event_Data as a GetAllTweetsEvent
func (t Event_Data) AsGetAllTweetsEvent() (GetAllTweetsEvent, error) {
	var body GetAllTweetsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllTweetsEvent overwrites any union data inside the Event_Data as the provided GetAllTweetsEvent
func (t *Event_Data) FromGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllTweetsEvent performs a merge with any union data inside the Event_Data, using the provided GetAllTweetsEvent
func (t *Event_Data) MergeGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTimelineEvent returns the union data inside the Event_Data as a GetTimelineEvent
func (t Event_Data) AsGetTimelineEvent() (GetTimelineEvent, error) {
	var body GetTimelineEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTimelineEvent overwrites any union data inside the Event_Data as the provided GetTimelineEvent
func (t *Event_Data) FromGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTimelineEvent performs a merge with any union data inside the Event_Data, using the provided GetTimelineEvent
func (t *Event_Data) MergeGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTweetEvent returns the union data inside the Event_Data as a GetTweetEvent
func (t Event_Data) AsGetTweetEvent() (GetTweetEvent, error) {
	var body GetTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTweetEvent overwrites any union data inside the Event_Data as the provided GetTweetEvent
func (t *Event_Data) FromGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTweetEvent performs a merge with any union data inside the Event_Data, using the provided GetTweetEvent
func (t *Event_Data) MergeGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetUserEvent returns the union data inside the Event_Data as a GetUserEvent
func (t Event_Data) AsGetUserEvent() (GetUserEvent, error) {
	var body GetUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetUserEvent overwrites any union data inside the Event_Data as the provided GetUserEvent
func (t *Event_Data) FromGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetUserEvent performs a merge with any union data inside the Event_Data, using the provided GetUserEvent
func (t *Event_Data) MergeGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllUsersEvent returns the union data inside the Event_Data as a GetAllUsersEvent
func (t Event_Data) AsGetAllUsersEvent() (GetAllUsersEvent, error) {
	var body GetAllUsersEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllUsersEvent overwrites any union data inside the Event_Data as the provided GetAllUsersEvent
func (t *Event_Data) FromGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllUsersEvent performs a merge with any union data inside the Event_Data, using the provided GetAllUsersEvent
func (t *Event_Data) MergeGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLoginEvent returns the union data inside the Event_Data as a LoginEvent
func (t Event_Data) AsLoginEvent() (LoginEvent, error) {
	var body LoginEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginEvent overwrites any union data inside the Event_Data as the provided LoginEvent
func (t *Event_Data) FromLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginEvent performs a merge with any union data inside the Event_Data, using the provided LoginEvent
func (t *Event_Data) MergeLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLogoutEvent returns the union data inside the Event_Data as a LogoutEvent
func (t Event_Data) AsLogoutEvent() (LogoutEvent, error) {
	var body LogoutEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLogoutEvent overwrites any union data inside the Event_Data as the provided LogoutEvent
func (t *Event_Data) FromLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLogoutEvent performs a merge with any union data inside the Event_Data, using the provided LogoutEvent
func (t *Event_Data) MergeLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetRepliesEvent returns the union data inside the Event_Data as a GetRepliesEvent
func (t Event_Data) AsGetRepliesEvent() (GetRepliesEvent, error) {
	var body GetRepliesEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetRepliesEvent overwrites any union data inside the Event_Data as the provided GetRepliesEvent
func (t *Event_Data) FromGetRepliesEvent(v GetRepliesEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetRepliesEvent performs a merge with any union data inside the Event_Data, using the provided GetRepliesEvent
func (t *Event_Data) MergeGetRepliesEvent(v GetRepliesEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewReplyEvent returns the union data inside the Event_Data as a NewReplyEvent
func (t Event_Data) AsNewReplyEvent() (NewReplyEvent, error) {
	var body NewReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewReplyEvent overwrites any union data inside the Event_Data as the provided NewReplyEvent
func (t *Event_Data) FromNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewReplyEvent performs a merge with any union data inside the Event_Data, using the provided NewReplyEvent
func (t *Event_Data) MergeNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetReplyEvent returns the union data inside the Event_Data as a GetReplyEvent
func (t Event_Data) AsGetReplyEvent() (GetReplyEvent, error) {
	var body GetReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetReplyEvent overwrites any union data inside the Event_Data as the provided GetReplyEvent
func (t *Event_Data) FromGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetReplyEvent performs a merge with any union data inside the Event_Data, using the provided GetReplyEvent
func (t *Event_Data) MergeGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYX2/bNhD/Kga3R6VNsWEPfiuKrgiQZUDgYg9FINDW2eYskerxVM8o/N0HUpL1j7Qo",
	"tUHyFMUk73734/3ld7ZRWa4kSNJs+Z3pzR4ybj/fF7R/hK8FaDL/5qhyQBJgF3Ou9VFhYr7plANbMk0o",
	"5I6dI1ZoQMkzcCyeI4bwtRAICVt+aXZGjcSnqD6k1v/ChozED3vuALFB4ARJXK5tFWbmiyWc4IaElTrA",
	"tkWVxUZtLNzgPT+TunqqyJOJUHpMiIT1wHV0Rm1jO+p8dP0FWvMdOFjbc/KZsVGSQFobMiHvQe5oz5bv",
	"HDzO4V743aUCNKJ0mmNVvFXmRiXFtYVR2/daxvjo1I+gcyW1h1D7IQgy+/ErwpYt2S9vm+B6W0XWW+vK",
	"54sWjshPltACtcIxgq5bXcmIKkhOW6ypBoQ3tvshMnIp3ci4urkH1+/uLuQfEUt+euyrpO0PQhLsAM2B",
	"rImAEdqMiGa/V/nHb1VsvAgCt/KEEzd/uTz9vWXLL9edr2XGObq+9QGOqyMABe/+rCFc9J8qTdUxXLbc",
	"TjjwCeh9mlr0OvjESmSQCgnhB8LZ+QQUzk6J3uwPBH+vdkIGb1VFOOhHyFMBOviazP7TJOn17ieTSEQG",
	"mniWzyyhzXlX/JQe5016CDwJzXhHFDQr4TVK2kJcaIcuPEw7/oKRikyQIyVF7L+bnbqpfi2EpD9+rwvM",
	"XRJWVe+uAW557RS8QsdlfEMbxFqpFLjsbDAHnDummXx2W9Dx9+ckPOcIkmI0EeDrxVApCqr69cah2Ce/",
	"mSePkUHInhl2S4PHgm6yfv2h0aoVA7Bk1u78rfEE7dFFmAdHU4UGMH6CoffiAB77wvv7GWm11ULWupzw",
	"mjr50vOsheKfKEgdQHqhjE0Y5pKHxdGKrAR4IF1ag0Zzs17Nk9fmIH/UVY3ttCmpnmAdw9L0ieiCwGV7",
	"ryF1NAeXruEa6G6L4Swy3SbJHStjamwy8YofTTU/Jr7bic9lqpYyxtVIvgqOhIHsqtKvEGCWQ2N5Ptif",
	"7aU/mCnvp3hzrf7JY1qpyvFSIdIEy9Ty47BtkQ73pm4jbI5GDSC3IRd/faUVZeXG9yKvaKk4TPBHW6od",
	"d2qlxBtVyC6ish+KjD0iKzK2vI0c7x1VI+dtGy2ZU4KmdACn75WyZkP1t6nP/SDZe4ZsOItaLXH442Q5",
	"I85KYhOvY+W7jOn5q9LssqdfGl77pP65qkNdkGuBtDdhHB7Xc3JBAnqDIieh3O1ie6q+3PHQD3r3WZ+K",
	"pQkfR2gNw6k6gnqWJtQTVHnznzx0JBSYuihL1YZ7+cpOMcIWEHk60RKpEvAnPiMSknh9Gp0vpjhpP1O0",
	"vaGzUIPrXW2f/5a/tG90NAXZV59ZGchgDE9AZTvX596XY0rZQ7zmgJBbZV/P2/HDPlxULrYKF3yRCAN1",
	"XRAki9VREAHemAq54HmeisqPIkaCUqPhH4754gHoqPDAIvYNUJeC3725fXNrkKscJM8FW7Lf7E8m/dNe",
	"s6Us0vT8fwAAAP//btT0TY0dAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
