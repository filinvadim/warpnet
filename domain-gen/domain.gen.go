// Package domain provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package domain

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for SettingNameEnum.
const (
	NodeAddresses SettingNameEnum = "node_addresses"
)

// AddSettingRequest defines model for AddSettingRequest.
type AddSettingRequest struct {
	CreatedAt *time.Time      `json:"created_at,omitempty"`
	Name      SettingNameEnum `json:"name"`
	Value     string          `json:"value"`
}

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	Data      *Event_Data `json:"data,omitempty"`
	Timestamp time.Time   `json:"timestamp"`
}

// Event_Data defines model for Event.Data.
type Event_Data struct {
	union json.RawMessage
}

// FollowRequest defines model for FollowRequest.
type FollowRequest struct {
	ReaderId string `json:"reader_id"`
	WriterId string `json:"writer_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"userId"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetRepliesEvent defines model for GetRepliesEvent.
type GetRepliesEvent struct {
	Cursor        *string `json:"cursor,omitempty"`
	Limit         *uint64 `json:"limit,omitempty"`
	ParentReplyId string  `json:"parent_reply_id"`
	RootId        string  `json:"root_id"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	ParentReplyId string `json:"parent_reply_id"`
	ReplyId       string `json:"reply_id"`
	RootId        string `json:"root_id"`
}

// GetSettingsHostsEvent defines model for GetSettingsHostsEvent.
type GetSettingsHostsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent = GetAllTweetsEvent

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"userId"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId string `json:"userId"`
}

// HostsResponse defines model for HostsResponse.
type HostsResponse struct {
	Cursor string   `json:"cursor"`
	Hosts  []string `json:"hosts"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// LoginEvent defines model for LoginEvent.
type LoginEvent struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
	User  User   `json:"user"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent = map[string]interface{}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	Request *FollowRequest `json:"request,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent struct {
	Tweet *Tweet `json:"tweet,omitempty"`
}

// NewSettingsHostsEvent defines model for NewSettingsHostsEvent.
type NewSettingsHostsEvent struct {
	Hosts []string `json:"hosts"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	Tweet *Tweet `json:"tweet,omitempty"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	Request *UnfollowRequest `json:"request,omitempty"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	User *User `json:"user,omitempty"`
}

// Node defines model for Node.
type Node struct {
	CreatedAt time.Time `json:"created_at"`

	// Host The IP address
	Host string             `json:"host"`
	Id   openapi_types.UUID `json:"id"`

	// IsActive Whether the IP address is currently active
	IsActive bool `json:"is_active"`
	IsOwned  bool `json:"is_owned"`

	// LastSeen The timestamp when this IP address was last active
	LastSeen time.Time `json:"last_seen"`

	// Latency The network latency to this IP in milliseconds
	Latency *int64 `json:"latency,omitempty"`

	// OwnerId user ID
	OwnerId string `json:"owner_id"`

	// Uptime Uptime of the node in seconds
	Uptime *int64 `json:"uptime,omitempty"`
}

// PingEvent defines model for PingEvent.
type PingEvent struct {
	DestHost  *string `json:"dest_host,omitempty"`
	Nodes     []Node  `json:"nodes"`
	OwnerInfo *User   `json:"owner_info,omitempty"`
	OwnerNode *Node   `json:"owner_node"`
}

// PongEvent defines model for PongEvent.
type PongEvent = PingEvent

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string      `json:"cursor"`
	Replies []ReplyNode `json:"replies"`
}

// ReplyNode defines model for ReplyNode.
type ReplyNode struct {
	Children []ReplyNode `json:"children"`
	Reply    Tweet       `json:"reply"`
}

// Retweet defines model for Retweet.
type Retweet struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// SettingNameEnum defines model for SettingNameEnum.
type SettingNameEnum string

// Tweet defines model for Tweet.
type Tweet struct {
	Content       string     `json:"content"`
	CreatedAt     time.Time  `json:"created_at"`
	Id            string     `json:"id"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	ParentId      string     `json:"parent_id"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	RootId        string     `json:"root_id"`
	UserId        string     `json:"user_id"`
	Username      string     `json:"username"`
}

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string  `json:"cursor"`
	Tweets []Tweet `json:"tweets"`
}

// UnfollowRequest defines model for UnfollowRequest.
type UnfollowRequest struct {
	ReaderId string `json:"reader_id"`
	WriterId string `json:"writer_id"`
}

// User defines model for User.
type User struct {
	Birthdate    *time.Time         `json:"birthdate,omitempty"`
	CreatedAt    time.Time          `json:"created_at"`
	Description  string             `json:"description"`
	Followed     []string           `json:"followed"`
	FollowedNum  int64              `json:"followed_num"`
	Followers    []string           `json:"followers"`
	FollowersNum int64              `json:"followers_num"`
	Id           string             `json:"id"`
	Link         *string            `json:"link,omitempty"`
	Location     *string            `json:"location,omitempty"`
	MyReferrals  *[]string          `json:"my_referrals,omitempty"`
	NodeId       openapi_types.UUID `json:"node_id"`
	ReferredBy   *string            `json:"referred_by,omitempty"`
	Username     string             `json:"username"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string `json:"cursor"`
	Users  []User `json:"users"`
}

// AsPingEvent returns the union data inside the Event_Data as a PingEvent
func (t Event_Data) AsPingEvent() (PingEvent, error) {
	var body PingEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPingEvent overwrites any union data inside the Event_Data as the provided PingEvent
func (t *Event_Data) FromPingEvent(v PingEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePingEvent performs a merge with any union data inside the Event_Data, using the provided PingEvent
func (t *Event_Data) MergePingEvent(v PingEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorEvent returns the union data inside the Event_Data as a ErrorEvent
func (t Event_Data) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the Event_Data as the provided ErrorEvent
func (t *Event_Data) FromErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the Event_Data, using the provided ErrorEvent
func (t *Event_Data) MergeErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewTweetEvent returns the union data inside the Event_Data as a NewTweetEvent
func (t Event_Data) AsNewTweetEvent() (NewTweetEvent, error) {
	var body NewTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewTweetEvent overwrites any union data inside the Event_Data as the provided NewTweetEvent
func (t *Event_Data) FromNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewTweetEvent performs a merge with any union data inside the Event_Data, using the provided NewTweetEvent
func (t *Event_Data) MergeNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUserEvent returns the union data inside the Event_Data as a NewUserEvent
func (t Event_Data) AsNewUserEvent() (NewUserEvent, error) {
	var body NewUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUserEvent overwrites any union data inside the Event_Data as the provided NewUserEvent
func (t *Event_Data) FromNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUserEvent performs a merge with any union data inside the Event_Data, using the provided NewUserEvent
func (t *Event_Data) MergeNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewFollowEvent returns the union data inside the Event_Data as a NewFollowEvent
func (t Event_Data) AsNewFollowEvent() (NewFollowEvent, error) {
	var body NewFollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewFollowEvent overwrites any union data inside the Event_Data as the provided NewFollowEvent
func (t *Event_Data) FromNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewFollowEvent performs a merge with any union data inside the Event_Data, using the provided NewFollowEvent
func (t *Event_Data) MergeNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUnfollowEvent returns the union data inside the Event_Data as a NewUnfollowEvent
func (t Event_Data) AsNewUnfollowEvent() (NewUnfollowEvent, error) {
	var body NewUnfollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUnfollowEvent overwrites any union data inside the Event_Data as the provided NewUnfollowEvent
func (t *Event_Data) FromNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUnfollowEvent performs a merge with any union data inside the Event_Data, using the provided NewUnfollowEvent
func (t *Event_Data) MergeNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllTweetsEvent returns the union data inside the Event_Data as a GetAllTweetsEvent
func (t Event_Data) AsGetAllTweetsEvent() (GetAllTweetsEvent, error) {
	var body GetAllTweetsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllTweetsEvent overwrites any union data inside the Event_Data as the provided GetAllTweetsEvent
func (t *Event_Data) FromGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllTweetsEvent performs a merge with any union data inside the Event_Data, using the provided GetAllTweetsEvent
func (t *Event_Data) MergeGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTimelineEvent returns the union data inside the Event_Data as a GetTimelineEvent
func (t Event_Data) AsGetTimelineEvent() (GetTimelineEvent, error) {
	var body GetTimelineEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTimelineEvent overwrites any union data inside the Event_Data as the provided GetTimelineEvent
func (t *Event_Data) FromGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTimelineEvent performs a merge with any union data inside the Event_Data, using the provided GetTimelineEvent
func (t *Event_Data) MergeGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTweetEvent returns the union data inside the Event_Data as a GetTweetEvent
func (t Event_Data) AsGetTweetEvent() (GetTweetEvent, error) {
	var body GetTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTweetEvent overwrites any union data inside the Event_Data as the provided GetTweetEvent
func (t *Event_Data) FromGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTweetEvent performs a merge with any union data inside the Event_Data, using the provided GetTweetEvent
func (t *Event_Data) MergeGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetUserEvent returns the union data inside the Event_Data as a GetUserEvent
func (t Event_Data) AsGetUserEvent() (GetUserEvent, error) {
	var body GetUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetUserEvent overwrites any union data inside the Event_Data as the provided GetUserEvent
func (t *Event_Data) FromGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetUserEvent performs a merge with any union data inside the Event_Data, using the provided GetUserEvent
func (t *Event_Data) MergeGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllUsersEvent returns the union data inside the Event_Data as a GetAllUsersEvent
func (t Event_Data) AsGetAllUsersEvent() (GetAllUsersEvent, error) {
	var body GetAllUsersEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllUsersEvent overwrites any union data inside the Event_Data as the provided GetAllUsersEvent
func (t *Event_Data) FromGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllUsersEvent performs a merge with any union data inside the Event_Data, using the provided GetAllUsersEvent
func (t *Event_Data) MergeGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLoginEvent returns the union data inside the Event_Data as a LoginEvent
func (t Event_Data) AsLoginEvent() (LoginEvent, error) {
	var body LoginEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginEvent overwrites any union data inside the Event_Data as the provided LoginEvent
func (t *Event_Data) FromLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginEvent performs a merge with any union data inside the Event_Data, using the provided LoginEvent
func (t *Event_Data) MergeLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLogoutEvent returns the union data inside the Event_Data as a LogoutEvent
func (t Event_Data) AsLogoutEvent() (LogoutEvent, error) {
	var body LogoutEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLogoutEvent overwrites any union data inside the Event_Data as the provided LogoutEvent
func (t *Event_Data) FromLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLogoutEvent performs a merge with any union data inside the Event_Data, using the provided LogoutEvent
func (t *Event_Data) MergeLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetSettingsHostsEvent returns the union data inside the Event_Data as a GetSettingsHostsEvent
func (t Event_Data) AsGetSettingsHostsEvent() (GetSettingsHostsEvent, error) {
	var body GetSettingsHostsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetSettingsHostsEvent overwrites any union data inside the Event_Data as the provided GetSettingsHostsEvent
func (t *Event_Data) FromGetSettingsHostsEvent(v GetSettingsHostsEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetSettingsHostsEvent performs a merge with any union data inside the Event_Data, using the provided GetSettingsHostsEvent
func (t *Event_Data) MergeGetSettingsHostsEvent(v GetSettingsHostsEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewSettingsHostsEvent returns the union data inside the Event_Data as a NewSettingsHostsEvent
func (t Event_Data) AsNewSettingsHostsEvent() (NewSettingsHostsEvent, error) {
	var body NewSettingsHostsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewSettingsHostsEvent overwrites any union data inside the Event_Data as the provided NewSettingsHostsEvent
func (t *Event_Data) FromNewSettingsHostsEvent(v NewSettingsHostsEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewSettingsHostsEvent performs a merge with any union data inside the Event_Data, using the provided NewSettingsHostsEvent
func (t *Event_Data) MergeNewSettingsHostsEvent(v NewSettingsHostsEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetRepliesEvent returns the union data inside the Event_Data as a GetRepliesEvent
func (t Event_Data) AsGetRepliesEvent() (GetRepliesEvent, error) {
	var body GetRepliesEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetRepliesEvent overwrites any union data inside the Event_Data as the provided GetRepliesEvent
func (t *Event_Data) FromGetRepliesEvent(v GetRepliesEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetRepliesEvent performs a merge with any union data inside the Event_Data, using the provided GetRepliesEvent
func (t *Event_Data) MergeGetRepliesEvent(v GetRepliesEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewReplyEvent returns the union data inside the Event_Data as a NewReplyEvent
func (t Event_Data) AsNewReplyEvent() (NewReplyEvent, error) {
	var body NewReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewReplyEvent overwrites any union data inside the Event_Data as the provided NewReplyEvent
func (t *Event_Data) FromNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewReplyEvent performs a merge with any union data inside the Event_Data, using the provided NewReplyEvent
func (t *Event_Data) MergeNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetReplyEvent returns the union data inside the Event_Data as a GetReplyEvent
func (t Event_Data) AsGetReplyEvent() (GetReplyEvent, error) {
	var body GetReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetReplyEvent overwrites any union data inside the Event_Data as the provided GetReplyEvent
func (t *Event_Data) FromGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetReplyEvent performs a merge with any union data inside the Event_Data, using the provided GetReplyEvent
func (t *Event_Data) MergeGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZTY/bNhP+KwLf96hNNk2Rg2+LJk0NBGmQetHDYmHQ0thiVyIVcrSOEfi/F6Sob9Km",
	"nCyyh56ysObjIWfmmRnmG0lEUQoOHBVZfCMqyaCg5s+bNP0LEBnffYYvFSjUP5ZSlCCRgRFJJFCEdE3N",
	"t62Qhf6LpBThClkBJCZ4KIEsiELJ+I4cY8JpAVr6/xK2ZEH+97ID8NJ6f2n9fqQFvONVodUeaV4ZvZHB",
	"Y0wkfKmYhJQs7mrrjfR9615s/oEEtZ2bCjPveUqq1F7I1OEnJpUC2YA/DaKVjDuLLizvpBTScasi7Tth",
	"HGEHUisUoBTdBSAwJjp5r/N3j8DxpyFwO08pUv0v5Yc/t2RxdzpVPjG+qw0d49OSvQOfE/0I+9UeAIOl",
	"bxWEm/5d5LnYh9vm2xkK7wFv8tygV8EaK1ZAzjiEK4TfznvA8Nup0Wv5QPAfxI7xYFFRhYO2HKT+ECr0",
	"Jj/C/gKt94CfocwZhHvR8odZ1hvp+2NMNDMrpEUZStqj0u70XVVdZ7eXYiXQFOSaGY4tGP8AfIcZWbxy",
	"tIq9ZBgmO0LYOekbcaGdlsuUDCupapqeAMxZwdBBlDH5erUTV/bXinF882vTQpZpWANZngLcq5A5eJla",
	"11wCfRAbIXKgfCCgFZwS8458dJ9gkO9PeeEllcBxLXUF2Dya2JRCoPvbOKus4NTsvf+YB88hg5A9Meye",
	"B88JHHT2dOHyJMuwOT3/8uz1xglY1N+W/vlyhve4NebB0XXdCYwfcFCTEZ9BlYIrmBWVTGvqLwyhUE4R",
	"+wOVkh6mk2VtujHkAveBPYDn8sM6jz74BX2nUYs7X0543dDys1cQA8UfRhQPwL1Qzq1xOgOn04MxaQ14",
	"ILVzWue5+z6aoB0TRjt6nAI3nFOc5DOctNz5dM6NYQOv+RB+/d568ZfJcM15ivMNd5dLQ9VYOResM4wX",
	"nK5T23Yf5lWe000OZIGygvgHvIbo4JilF1QiWYlMcLIgqwyi5aeIpqkEpVx6NTe1PqqqZh3HwEcTZI8w",
	"9fF3BpiBjHDgK2IqSiqp54T8EFnd2D0pij33zZE5VbhWUHPH9GztBhHtM+ARZkz1MeypirSFzn/YZeYU",
	"gScHt08OuBfyIbJCEYrWL+NRwfKcKUgET/V9w1dalDrOr3657nmvJ4XY8S6i76LpGEPfOvOi5VsX3qo0",
	"J5mo3JrfI7E1weEiBQ3Rge71m+sQeCNCaENn06+fJv3Q9U5lEi7uZ7iLT7q3mOmjDihcN8k+fRMUKQwp",
	"7uQCrKtxwnotWr4VYZXeaHBb3ed9jh8bDWznTYj/bqK+CbvqrSTARdOirPWDr8Q0bPe9+ObIxoUP/qGh",
	"/xHojOWprCnue6HZTSy82Q5fO7Rq3AFyH6Rt5890Kh4/+pta2dIq19SmE2xt+wMYDjQid+MP9w7YK/fB",
	"E8HRVuiZc1/S2D1be84eZiSz2WMcyWKsrBNR8SGipgEUjLNC38+1q1fZZwDvo4OJ0pyKqzPLmdS1rYuh",
	"+h85wrNx7trU73c2Rfp3FvceVHpb1pnWWL8wXsSAM8OxcgfDR37WugvzeOx+7m+5t3bGH4LcMImZLtXw",
	"2r2k3gcTnCOK/XfX0EWu01pbQgyYRK2KVBd5kmqGKy/H8YfhdiJz57guEuq9r+KwlrAFKWk+8ySmIwTu",
	"R7ULSNebw9kHlzlJO2aHfnYMPjRgR6Eex6OXP/0In6Ud8/8EF7GOxhhOOs0YGcY5te0pXq3QDK3Djei3",
	"1mW0FTKiUco01E2FkEarPUMEeaW7YkTLMmc2r2KCDPWeRN5OxaObT0sSk0eQqvbx6sX1i2szC5fAacnI",
	"grw2P2n2x0yRhV7/j/8GAAD//xmMc10yIQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
