// Package node provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package node

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/dWighter/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for NewEventParamsEventType.
const (
	Error            NewEventParamsEventType = "error"
	Follow           NewEventParamsEventType = "follow"
	GetSettingsHosts NewEventParamsEventType = "get_settings_hosts"
	GetTimeline      NewEventParamsEventType = "get_timeline"
	GetTweet         NewEventParamsEventType = "get_tweet"
	GetTweets        NewEventParamsEventType = "get_tweets"
	GetUser          NewEventParamsEventType = "get_user"
	GetUsers         NewEventParamsEventType = "get_users"
	Login            NewEventParamsEventType = "login"
	Logout           NewEventParamsEventType = "logout"
	NewSettingsHosts NewEventParamsEventType = "new_settings_hosts"
	NewTweet         NewEventParamsEventType = "new_tweet"
	NewUser          NewEventParamsEventType = "new_user"
	Ping             NewEventParamsEventType = "ping"
	Pong             NewEventParamsEventType = "pong"
	Unfollow         NewEventParamsEventType = "unfollow"
)

// NewEventParamsEventType defines parameters for NewEvent.
type NewEventParamsEventType string

// NewEventJSONRequestBody defines body for NewEvent for application/json ContentType.
type NewEventJSONRequestBody = externalRef0.Event

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// NewEventWithBody request with any body
	NewEventWithBody(ctx context.Context, eventType NewEventParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NewEvent(ctx context.Context, eventType NewEventParamsEventType, body NewEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) NewEventWithBody(ctx context.Context, eventType NewEventParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewEventRequestWithBody(c.Server, eventType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewEvent(ctx context.Context, eventType NewEventParamsEventType, body NewEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewEventRequest(c.Server, eventType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewNewEventRequest calls the generic NewEvent builder with application/json body
func NewNewEventRequest(server string, eventType NewEventParamsEventType, body NewEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNewEventRequestWithBody(server, eventType, "application/json", bodyReader)
}

// NewNewEventRequestWithBody generates requests for NewEvent with any type of body
func NewNewEventRequestWithBody(server string, eventType NewEventParamsEventType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "event_type", runtime.ParamLocationPath, eventType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/node/event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// NewEventWithBodyWithResponse request with any body
	NewEventWithBodyWithResponse(ctx context.Context, eventType NewEventParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NewEventResponse, error)

	NewEventWithResponse(ctx context.Context, eventType NewEventParamsEventType, body NewEventJSONRequestBody, reqEditors ...RequestEditorFn) (*NewEventResponse, error)
}

type NewEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r NewEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// NewEventWithBodyWithResponse request with arbitrary body returning *NewEventResponse
func (c *ClientWithResponses) NewEventWithBodyWithResponse(ctx context.Context, eventType NewEventParamsEventType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NewEventResponse, error) {
	rsp, err := c.NewEventWithBody(ctx, eventType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewEventResponse(rsp)
}

func (c *ClientWithResponses) NewEventWithResponse(ctx context.Context, eventType NewEventParamsEventType, body NewEventJSONRequestBody, reqEditors ...RequestEditorFn) (*NewEventResponse, error) {
	rsp, err := c.NewEvent(ctx, eventType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewEventResponse(rsp)
}

// ParseNewEventResponse parses an HTTP response from a NewEventWithResponse call
func ParseNewEventResponse(rsp *http.Response) (*NewEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NewEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new user
	// (POST /v1/node/event/{event_type})
	NewEvent(ctx echo.Context, eventType NewEventParamsEventType) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NewEvent converts echo context to params.
func (w *ServerInterfaceWrapper) NewEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "event_type" -------------
	var eventType NewEventParamsEventType

	err = runtime.BindStyledParameterWithOptions("simple", "event_type", ctx.Param("event_type"), &eventType, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter event_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewEvent(ctx, eventType)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/node/event/:event_type", wrapper.NewEvent)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
