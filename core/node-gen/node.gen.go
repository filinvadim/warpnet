// Package node provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package node

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// None defines model for None.
type None = map[string]interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXzW/iOBT/V6K3e6pCE7pVD7ltq9VupR2KRkg9VAi5yQM8TWyP/YBBFf/7yE74CCSE",
	"oDK9jHqolfh9/D5iP94hlpmSAgUZiN7BxFPMmFv2pED7n5YKIQL5+g1jgpUPicwYF6OHKSP7XmmpUBNH",
	"FxVrZITJKH83ljqzK0gYYYd4huCvExrSXExswrGW2WhmUI94slNxu6HmMcmjUTOVtGxl5YPG7zOuMYHo",
	"xZbda65U098FWyo39I+y9gWNYROsIG/KqA5NLAWhcFAyLv5HMaEpRN0KOs+RoI7CLb0NRe1OwTKsSLPH",
	"6g59BVw/Z3qNcCdZCUwlqyQdpeYrGiWFqSHVLThh5hZ/ahxDBH8EW+8HhfGDXXOvNgWZ1mzpuJ1pI3UT",
	"V8cJKHL4RWd1sAqXNCCrtUt9o1mR+BxO1tatoKY9/k0jVRTgHAWN7pnBf+aF78vo8w15XFPJnb31tf5F",
	"+jtNnZs2JVmaPo0hejlO0H6vK/+zTJjyjNPOGy4IJ6jb6eN63QYcMjbc42xt1YvQdobD61jw4UdnIjvF",
	"0xkXdHdbCf8E2Facj8f7Abdnw0FdvjSPbt4j5sSbsIG3wiu/1Cqff7sdI6WHi99mOsNMPVxczExnUJdt",
	"p7q2l+mqAqV9yMVY2nwJmlhzRVwKiKB/0/cMaWQZFxNPaUkylqnxxlJ7zEu4bel1Rph4gwUnQt1J+Rt6",
	"TKmUx8wl8YE4pbbgM9PK6yEtpH4DH+aoTV6lex1ehxaXVCiY4hDBX+6RD4rR1NEUWI8H+c7oHaTr0ORL",
	"1K7UYwIRPOUvLOZuaDNYJ6Che5ksHd3b2fYquNr+DnGSiuXJkpa+JKtqc0jpJD85pDwnOLWcv/NJzTFw",
	"E4YfA+1wxG1qszQ+5E4qO+i/waDvceMJSZ6ZKSU1YQI5iKDw8emyFja+tLKlb/1kpc6LOphpLi/xwbjf",
	"QuXNQdJabCGTFkr3ZNJa5rN4awVj5YNBbU8uR3Q57LE/v/UGD30v32LHWp1CBBSrKAjCa/cX3YZh1xFe",
	"EfyMr0bGb0j7KRZmL0OwMNVJ7uo7eImiYVF+uPoZAAD//+cHbZiOEQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
