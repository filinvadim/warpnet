// Package node provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package node

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// None defines model for None.
type None = map[string]interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXXW/aMBT9K5G3pyo0oav6kLe1mrZKG0UTUh8qhNzkAl7jj9kXGKr475OdAAkkQKKy",
	"vkw8YNm+H+fcY/vmlcSSKylAoCHRKzHxFDh1w54UYP9xqYBERD7/ghjJyieJ5JSJ0d2Uol1XWirQyMBZ",
	"xRooQjLK1sZSczsiCUXoIONA/LVDg5qJiXU41pKPZgb0iCWFiNsNNdMoD1rNVNIwlZVPNPyeMQ0JiZ5s",
	"2J3kSjH9IthSuKF/kLUfYAydQAV5U4p1aGIpEISDwpn4DmKCUxJ1K+hsU4I6Crf0HglqdwrKocLNDqsF",
	"+nK4fsb0GmHBWQlMJasoHaXmJxglhakh1Q0YAneDjxrGJCIfgq32g1z4QVHcq01AqjVdOm5n2kh9jKvD",
	"BOQ+/DyzOli5So4gq5VLfaI8d9yGk7V0K6hpjn+TSBUFMAeBo1tq4Ms8130ZfbYhs6u6HBgHg5Srloe/",
	"4L7orD7Vr4Cf09SJcZMxTdOHMYmeDvO7C3Xlv5eGU8YZFlaYQJiAblZel+vWYJ+x4Q5na6WfhbYWB6SO",
	"BZ/86UxkJ5+dMYE315XwT4Bti/P2eN/g8T1yz5ff3IObd4g58SE9wluulX8qlfd/HA+R0oPFfzG1EFMP",
	"FmcTUwvq+LYpbPoWrypQ2kkmxtL6S8DEmilkUpCI9K/6nkENlDMx8ZSWKGOZGm8stUe9hNmUnmcIiTdY",
	"METQnZS9gEeVSllMnRP7IGJqAz5Srbwe4ELqF+KTOWiTRelehpehxSUVCKoYicgnN+UTRXHqaAqsxoNs",
	"Z/RKpMvQZEPQLtR9QiLykC1YzN3QerBKAIO3Mlk6uret8UVwsf2McSUVy5NLWjpJtqrHTUo3+ckm5T7B",
	"VcvpO2v0HANXYfg20PY75GNpltqHTEllBX0bDPoeM56Q6JmZUlIjJCQDEeQ6Pr2suYzPXdnSWT+5Uu2s",
	"9nqa85d472uhQZU3F0njYguZNKh0TyaNy9yKt0YwVj4xoO3N5Ygum93359fe4K7vZVtsW6tTEhGMVRQE",
	"4aX7Rddh2HWEVxg/wrOR8QvgrouF2fEQLEy1k5v6DJ6iaJiHH67+BgAA//8DI87MzREAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
