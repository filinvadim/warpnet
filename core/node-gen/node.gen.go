// Package node provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package node

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// None defines model for None.
type None = map[string]interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
