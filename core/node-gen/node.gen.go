// Package node provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package node

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// None defines model for None.
type None = map[string]interface{}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"P5/+DQAA//9pXBzg5SoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
