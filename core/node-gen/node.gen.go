// Package node provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package node

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for EventEnum.
const (
	Error       EventEnum = "error"
	Follow      EventEnum = "follow"
	GetReplies  EventEnum = "get_replies"
	GetReply    EventEnum = "get_reply"
	GetTimeline EventEnum = "get_timeline"
	GetTweet    EventEnum = "get_tweet"
	GetTweets   EventEnum = "get_tweets"
	GetUser     EventEnum = "get_user"
	GetUsers    EventEnum = "get_users"
	NewReply    EventEnum = "new_reply"
	NewTweet    EventEnum = "new_tweet"
	NewUser     EventEnum = "new_user"
	Unfollow    EventEnum = "unfollow"
)

// Chat defines model for Chat.
type Chat struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	Id         string    `json:"id"`
	ToUserId   string    `json:"to_user_id"`
	UpdatedAt  time.Time `json:"updated_at"`
}

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	ChatId    string    `json:"chat_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
	UserId    string    `json:"user_id"`
	Username  string    `json:"username"`
}

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse struct {
	Chats  []Chat  `json:"chats"`
	Cursor string  `json:"cursor"`
	UserId *string `json:"user_id,omitempty"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// EventEnum defines model for EventEnum.
type EventEnum string

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Chats  []Chat  `json:"chats"`
	Cursor *string `json:"cursor,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
	UserId string  `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId string  `json:"chat_id"`
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor        *string `json:"cursor,omitempty"`
	Limit         *uint64 `json:"limit,omitempty"`
	ParentReplyId string  `json:"parent_reply_id"`
	RootId        string  `json:"root_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"userId"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId   string  `json:"chat_id"`
	Id       string  `json:"id"`
	UserId   string  `json:"user_id"`
	Username *string `json:"username,omitempty"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	ParentReplyId string `json:"parent_reply_id"`
	ReplyId       string `json:"reply_id"`
	RootId        string `json:"root_id"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent = GetAllTweetsEvent

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"userId"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId string `json:"userId"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	ChatId   *string       `json:"chat_id,omitempty"`
	Cursor   string        `json:"cursor"`
	Messages []ChatMessage `json:"messages"`
	UserId   *string       `json:"user_id,omitempty"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	Request *interface{} `json:"request,omitempty"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	CreatedAt *time.Time   `json:"created_at,omitempty"`
	Message   *ChatMessage `json:"message,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent struct {
	Tweet *Tweet `json:"tweet,omitempty"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	Tweet *Tweet `json:"tweet,omitempty"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	Request *interface{} `json:"request,omitempty"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	User *User `json:"user,omitempty"`
}

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string      `json:"cursor"`
	Replies []ReplyNode `json:"replies"`
	UserId  *string     `json:"user_id,omitempty"`
}

// ReplyNode defines model for ReplyNode.
type ReplyNode struct {
	Children []ReplyNode `json:"children"`
	Reply    Tweet       `json:"reply"`
}

// Retweet defines model for Retweet.
type Retweet struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	Content       string     `json:"content"`
	CreatedAt     time.Time  `json:"created_at"`
	Id            string     `json:"id"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	ParentId      string     `json:"parent_id"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	RootId        string     `json:"root_id"`
	UserId        string     `json:"user_id"`
	Username      string     `json:"username"`
}

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string  `json:"cursor"`
	Tweets []Tweet `json:"tweets"`
	UserId *string `json:"user_id,omitempty"`
}

// User defines model for User.
type User struct {
	Birthdate    *time.Time `json:"birthdate,omitempty"`
	CreatedAt    time.Time  `json:"created_at"`
	Description  string     `json:"description"`
	Followed     []string   `json:"followed"`
	FollowedNum  int64      `json:"followed_num"`
	Followers    []string   `json:"followers"`
	FollowersNum int64      `json:"followers_num"`
	Id           string     `json:"id"`
	Link         *string    `json:"link,omitempty"`
	Location     *string    `json:"location,omitempty"`
	MyReferrals  *[]string  `json:"my_referrals,omitempty"`
	NodeId       string     `json:"node_id"`
	ReferredBy   *string    `json:"referred_by,omitempty"`
	Username     string     `json:"username"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string `json:"cursor"`
	Users  []User `json:"users"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"wmQj3ULe+RHcZ9mDVf+w+ysAAP//fwFdd/YmAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
