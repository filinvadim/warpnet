// Package node provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package node

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for EventEnum.
const (
	Error       EventEnum = "error"
	Follow      EventEnum = "follow"
	GetReplies  EventEnum = "get_replies"
	GetReply    EventEnum = "get_reply"
	GetTimeline EventEnum = "get_timeline"
	GetTweet    EventEnum = "get_tweet"
	GetTweets   EventEnum = "get_tweets"
	GetUser     EventEnum = "get_user"
	GetUsers    EventEnum = "get_users"
	NewReply    EventEnum = "new_reply"
	NewTweet    EventEnum = "new_tweet"
	NewUser     EventEnum = "new_user"
	Unfollow    EventEnum = "unfollow"
)

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor string              `json:"cursor"`
	UserId *string             `json:"user_id,omitempty"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// EventEnum defines model for EventEnum.
type EventEnum string

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor *string             `json:"cursor,omitempty"`
	Limit  *int                `json:"limit,omitempty"`
	UserId string              `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId string  `json:"chat_id"`
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor        *string `json:"cursor,omitempty"`
	Limit         *uint64 `json:"limit,omitempty"`
	ParentReplyId string  `json:"parent_reply_id"`
	RootId        string  `json:"root_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"userId"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId   string  `json:"chat_id"`
	Id       string  `json:"id"`
	UserId   string  `json:"user_id"`
	Username *string `json:"username,omitempty"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	ParentReplyId string `json:"parent_reply_id"`
	ReplyId       string `json:"reply_id"`
	RootId        string `json:"root_id"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent = GetAllTweetsEvent

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"userId"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId string `json:"userId"`
}

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	ChatId   *string                    `json:"chat_id,omitempty"`
	Cursor   string                     `json:"cursor"`
	Messages []externalRef0.ChatMessage `json:"messages"`
	UserId   *string                    `json:"user_id,omitempty"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	Request *interface{} `json:"request,omitempty"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	CreatedAt *time.Time                `json:"created_at,omitempty"`
	Message   *externalRef0.ChatMessage `json:"message,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent struct {
	Tweet *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	Tweet *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	Request *interface{} `json:"request,omitempty"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	User *externalRef0.User `json:"user,omitempty"`
}

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string                   `json:"cursor"`
	Replies []externalRef0.ReplyNode `json:"replies"`
	UserId  *string                  `json:"user_id,omitempty"`
}

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string               `json:"cursor"`
	Tweets []externalRef0.Tweet `json:"tweets"`
	UserId *string              `json:"user_id,omitempty"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string              `json:"cursor"`
	Users  []externalRef0.User `json:"users"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AgAA//9+gatT4kYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
