// Package node provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package node

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for EventEnum.
const (
	Error       EventEnum = "error"
	Follow      EventEnum = "follow"
	GetReplies  EventEnum = "get_replies"
	GetReply    EventEnum = "get_reply"
	GetTimeline EventEnum = "get_timeline"
	GetTweet    EventEnum = "get_tweet"
	GetTweets   EventEnum = "get_tweets"
	GetUser     EventEnum = "get_user"
	GetUsers    EventEnum = "get_users"
	NewReply    EventEnum = "new_reply"
	NewTweet    EventEnum = "new_tweet"
	NewUser     EventEnum = "new_user"
	Unfollow    EventEnum = "unfollow"
)

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor string              `json:"cursor"`
	UserId *string             `json:"user_id,omitempty"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// EventEnum defines model for EventEnum.
type EventEnum string

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent struct {
	Chats  []externalRef0.Chat `json:"chats"`
	Cursor *string             `json:"cursor,omitempty"`
	Limit  *int                `json:"limit,omitempty"`
	UserId string              `json:"user_id"`
}

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent struct {
	ChatId string  `json:"chat_id"`
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
}

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent struct {
	Cursor        *string `json:"cursor,omitempty"`
	Limit         *uint64 `json:"limit,omitempty"`
	ParentReplyId string  `json:"parent_reply_id"`
	RootId        string  `json:"root_id"`
}

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent struct {
	Cursor *string `json:"cursor,omitempty"`
	Limit  *uint64 `json:"limit,omitempty"`
	UserId string  `json:"userId"`
}

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent struct {
	Cursor      *string `json:"cursor,omitempty"`
	IsFollowed  *bool   `json:"is_followed,omitempty"`
	IsFollowing *bool   `json:"is_following,omitempty"`
	Limit       *uint64 `json:"limit,omitempty"`
}

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent struct {
	ChatId   string  `json:"chat_id"`
	Id       string  `json:"id"`
	UserId   string  `json:"user_id"`
	Username *string `json:"username,omitempty"`
}

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent struct {
	ParentReplyId string `json:"parent_reply_id"`
	ReplyId       string `json:"reply_id"`
	RootId        string `json:"root_id"`
}

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent = GetAllTweetsEvent

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"userId"`
}

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent struct {
	UserId string `json:"userId"`
}

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse struct {
	ChatId   *string                    `json:"chat_id,omitempty"`
	Cursor   string                     `json:"cursor"`
	Messages []externalRef0.ChatMessage `json:"messages"`
	UserId   *string                    `json:"user_id,omitempty"`
}

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent struct {
	CreatedAt  time.Time `json:"created_at"`
	FromUserId string    `json:"from_user_id"`
	ToUserId   string    `json:"to_user_id"`
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	Request *interface{} `json:"request,omitempty"`
}

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent struct {
	CreatedAt *time.Time                `json:"created_at,omitempty"`
	Message   *externalRef0.ChatMessage `json:"message,omitempty"`
}

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent struct {
	Tweet *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	Tweet *externalRef0.Tweet `json:"tweet,omitempty"`
}

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	Request *interface{} `json:"request,omitempty"`
}

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	User *externalRef0.User `json:"user,omitempty"`
}

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse struct {
	Cursor  string                   `json:"cursor"`
	Replies []externalRef0.ReplyNode `json:"replies"`
	UserId  *string                  `json:"user_id,omitempty"`
}

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse struct {
	Cursor string               `json:"cursor"`
	Tweets []externalRef0.Tweet `json:"tweets"`
	UserId *string              `json:"user_id,omitempty"`
}

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	Cursor string              `json:"cursor"`
	Users  []externalRef0.User `json:"users"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
