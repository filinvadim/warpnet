// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string             `json:"token"`
	User  externalRef0.Owner `json:"user"`
}

// PostV1ApiAuthLogoutParams defines parameters for PostV1ApiAuthLogout.
type PostV1ApiAuthLogoutParams struct {
	XSESSIONTOKEN string `json:"X-SESSION-TOKEN"`
}

// PostV1ApiAuthLoginJSONRequestBody defines body for PostV1ApiAuthLogin for application/json ContentType.
type PostV1ApiAuthLoginJSONRequestBody = AuthRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve static files
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Serve static files
	// (GET /static/{file*})
	GetStaticFile(ctx echo.Context, file string) error
	// Store credentials
	// (POST /v1/api/auth/login)
	PostV1ApiAuthLogin(ctx echo.Context) error
	// Close service
	// (POST /v1/api/auth/logout)
	PostV1ApiAuthLogout(ctx echo.Context, params PostV1ApiAuthLogoutParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// GetStaticFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetStaticFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "file" -------------
	var file string

	err = runtime.BindStyledParameterWithOptions("simple", "file", ctx.Param("file"), &file, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStaticFile(ctx, file)
	return err
}

// PostV1ApiAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogin(ctx)
	return err
}

// PostV1ApiAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostV1ApiAuthLogoutParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-SESSION-TOKEN" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-SESSION-TOKEN")]; found {
		var XSESSIONTOKEN string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-SESSION-TOKEN, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "X-SESSION-TOKEN", valueList[0], &XSESSIONTOKEN, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: true})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-SESSION-TOKEN: %s", err))
		}

		params.XSESSIONTOKEN = XSESSIONTOKEN
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-SESSION-TOKEN is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogout(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.GET(baseURL+"/static/:file", wrapper.GetStaticFile)
	router.POST(baseURL+"/v1/api/auth/login", wrapper.PostV1ApiAuthLogin)
	router.POST(baseURL+"/v1/api/auth/logout", wrapper.PostV1ApiAuthLogout)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xV72/bNhD9Vwhunwa5sreuQPUtG7LBaNEUcfcDKIKAEU8WW4pU705JDcP/+3CUC8mW",
	"1ibYvhiyeLx39969016XsWljgMCki72msobGpMeLjutr+NQBsfxtMbaA7CAdtoboIaKVZ961oAtNjC5s",
	"9SHTHQEG08DM4SHTCJ86h2B18X6IzIaMN9mXS/HuA5QsGS8RI06rKKMdg7jAsAWUCw0Qme0jKkgphvg5",
	"8Ndx68I1UBsDwbQIjh8h/CsPcvA9QqUL/V0+cJ0fic5tbIwLt1cPQQo/K65PfUw0V9rJ7Sk9CIbB3pok",
	"YBWxkSdtDcOCXWJ9UrMFKtG17OJ8T25e8hAt3Lpvj0PjwmsIW651scq+IY2zOhtPyLi0ATEbtznlSJK6",
	"UEUBP+lNX35mhGC8uni7VlVEZZR1Uspdx2DVuwfHDLjw7iMo07beleYIzY69YPxlsFUBWFUYA6vKlFLm",
	"PSD1CKtny2dLYSC2EEzrdKF/Sq9k2rlOGuXys4WkkGiXMNZWF/p34HWw8FkLK/3wpRs/LpfTZq5eJfqo",
	"axqDO13oDeA9KGLDrlSV80ApIO/f5Ht59cNhBH6a7xq4w0DKhN04iXTaKK5BfUmkrEMoOeJOZ9MGNino",
	"N+d7h6NpgAFJF+/32gmO8CBipvHQVR84DAFjB9lxKc15+WaemzIGhpDaGimXx5KBF8QIphmW3Yk37lww",
	"qZVzpHNr6M2IFRKyraKuLIGo6rzfiezPl8+nzAoZKkRWVeyCfaRq96vctC43Hde5l3WUzB5pZmzeRuI/",
	"Vxetk/2dVteRUSD+JdrdV/j5QL3pB16+trnG34fDqXdFtsOTpHka9NnSnGjzBwEqC2ycp16I1VQIqV9V",
	"xnmwEvPznK3WgWX9eFWbYD2ggvQhOhONI4IqESwEdsaTjI/ZypQnEH0zp2Hs+PEiSvC8gWowFnCw0N+L",
	"zeVms756s3h39eryzf/hprO574f8v1H2q4/U28alnXlOlwSLFY6dziDIslXGWpRaMt2hFzKY2yLPfSyN",
	"ryNx8eLli5f6cHP4JwAA//9ILAGt5wgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
