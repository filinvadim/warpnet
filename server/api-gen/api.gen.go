// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ErrorMessage defines model for ErrorMessage.
type ErrorMessage struct {
	Code        int    `json:"code"`
	Message     string `json:"message"`
	MessageType string `json:"message_type"`
}

// LoginMessage defines model for LoginMessage.
type LoginMessage struct {
	MessageType string `json:"message_type"`
	Password    string `json:"password"`
	Username    string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string            `json:"token"`
	User  externalRef0.User `json:"user"`
}

// LogoutMessage defines model for LogoutMessage.
type LogoutMessage struct {
	MessageType string `json:"message_type"`
	Token       string `json:"token"`
}

// WebsocketMessage defines model for WebsocketMessage.
type WebsocketMessage struct {
	Timestamp *time.Time `json:"timestamp,omitempty"`
	union     json.RawMessage
}

// AsLoginMessage returns the union data inside the WebsocketMessage as a LoginMessage
func (t WebsocketMessage) AsLoginMessage() (LoginMessage, error) {
	var body LoginMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginMessage overwrites any union data inside the WebsocketMessage as the provided LoginMessage
func (t *WebsocketMessage) FromLoginMessage(v LoginMessage) error {
	v.MessageType = "LoginMessage"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginMessage performs a merge with any union data inside the WebsocketMessage, using the provided LoginMessage
func (t *WebsocketMessage) MergeLoginMessage(v LoginMessage) error {
	v.MessageType = "LoginMessage"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLogoutMessage returns the union data inside the WebsocketMessage as a LogoutMessage
func (t WebsocketMessage) AsLogoutMessage() (LogoutMessage, error) {
	var body LogoutMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLogoutMessage overwrites any union data inside the WebsocketMessage as the provided LogoutMessage
func (t *WebsocketMessage) FromLogoutMessage(v LogoutMessage) error {
	v.MessageType = "LogoutMessage"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLogoutMessage performs a merge with any union data inside the WebsocketMessage, using the provided LogoutMessage
func (t *WebsocketMessage) MergeLogoutMessage(v LogoutMessage) error {
	v.MessageType = "LogoutMessage"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorMessage returns the union data inside the WebsocketMessage as a ErrorMessage
func (t WebsocketMessage) AsErrorMessage() (ErrorMessage, error) {
	var body ErrorMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorMessage overwrites any union data inside the WebsocketMessage as the provided ErrorMessage
func (t *WebsocketMessage) FromErrorMessage(v ErrorMessage) error {
	v.MessageType = "ErrorMessage"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorMessage performs a merge with any union data inside the WebsocketMessage, using the provided ErrorMessage
func (t *WebsocketMessage) MergeErrorMessage(v ErrorMessage) error {
	v.MessageType = "ErrorMessage"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WebsocketMessage) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"message_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WebsocketMessage) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ErrorMessage":
		return t.AsErrorMessage()
	case "LoginMessage":
		return t.AsLoginMessage()
	case "LogoutMessage":
		return t.AsLogoutMessage()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WebsocketMessage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	if t.Timestamp != nil {
		object["timestamp"], err = json.Marshal(t.Timestamp)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'timestamp': %w", err)
		}
	}
	b, err = json.Marshal(object)
	return b, err
}

func (t *WebsocketMessage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["timestamp"]; found {
		err = json.Unmarshal(raw, &t.Timestamp)
		if err != nil {
			return fmt.Errorf("error reading 'timestamp': %w", err)
		}
	}

	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve static files
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Serve Websocket connection
	// (GET /v1/api/ws)
	WebsocketUpgrade(ctx echo.Context) error
	// Serve static files
	// (GET /{file*})
	GetStaticFile(ctx echo.Context, file string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// WebsocketUpgrade converts echo context to params.
func (w *ServerInterfaceWrapper) WebsocketUpgrade(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebsocketUpgrade(ctx)
	return err
}

// GetStaticFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetStaticFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "file" -------------
	var file string

	err = runtime.BindStyledParameterWithOptions("simple", "file", ctx.Param("file"), &file, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStaticFile(ctx, file)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.GET(baseURL+"/v1/api/ws", wrapper.WebsocketUpgrade)
	router.GET(baseURL+"/:file", wrapper.GetStaticFile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6RW32/bNhD+VwhuT4NS2VsWoHrbQzcE69ahWdGHIjBo8WTfIpLa8RTXCPS/D0c5sWTL",
	"i5O+JLJ4P7677+OdHnQZXBM8eI66eNCxXIMz6fEdUSB5aCg0QIyQXpfBgvznbQO60OgZVkC6y7SDGM1q",
	"eBiZ0K9012Wa4N8WCawuvvQh9va32aN9WP4DJUuslPyPfcBvx/B0tugPXgjywH0K8/uwQn8S8zPZM92Y",
	"GDeB7ORhG4G8cWfgfrIcRDwX/EeITfBxAj2HO/AnkcnB9wSVLvR3+V5Q+U5NuQ3OoF98EtNDvH3kXZwT",
	"yELLr+/rKegHOEZxHr2m8HyGZQzlHQwhGb/9UOniy/+3YSSQLnvWeFD2c9aj+9LdZtpiLAkdesOjW7z9",
	"M6loXK6ob0w3OohsXCM/qkDOsC60NQwXcqSzo2Z2mR6yfESTuTdsaBRuid7Q9jhWppemvFtRaL1doNu1",
	"+Bw3DJMKWCLxWsCfW02mSwLDYBdiea5PFeo6bMAulltxQgYXpxXZvzBEZjtwpLjwrRvlQ89Xl/tcg0HX",
	"+0jAV6RCv3pBKpweSXUoDWOYngo+WFiccOQNAL+k1uHwc+jfg1/xWhfzCQ42sIx4QHRL9YRgx7cfZUiK",
	"frLhAH2sYsCtoD5kbMjGWAYjIR0PE0GBvkqqtSAXtuk7qt99ZQJvavXLX9eqCqSMsijYly2DVX9vkBno",
	"osY7UKZpatxxkWlGriXHZ0ON8sCqouBZVaaUiu6BYp9h/mb2ZiYtCw1406Au9E/plewNXic55fJnBekO",
	"yGVOOa6tLvRvwNfewlctbeyXRvL4cTY7LubD76nfsXVObm6hb4DuQUU2jKWqsIaYDPL7eW4azDfxZN6n",
	"4fupWZFJG3qUfz6bH+ff2Vqp9ucpgNeehfNaRQFGCtKnzxTmp/yqDN5DmQIk7A9Sxw/dAPk4x0fglnxU",
	"xm+HlQs9TvEaVN6/zZVFgpJDmnFHXb9JRr9i3S94Mg4YKKbdg5JHyBPp9mO+6g33UmdqIdt95k0txdtp",
	"QsvgGXwqayC3PJQMfBGZwLj95+NZ4zptjFGHbgZdSURYFduyhBirtq7T+LqcXR53VpqhfGBVycY4R2pi",
	"kZju+zYhBrkuylhLEKPMBKp1odfMTZHnMvjqdYhcXL29equ72+6/AAAA//8bsiQhRgsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
