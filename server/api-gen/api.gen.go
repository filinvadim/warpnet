// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/filinvadim/warpnet/gen/event-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// BaseEvent defines model for BaseEvent.
type BaseEvent = externalRef0.BaseEvent

// BaseWSRequest defines model for BaseWSRequest.
type BaseWSRequest struct {
	Data      *Event    `json:"data,omitempty"`
	MessageId string    `json:"message_id"`
	NodeId    string    `json:"node_id"`
	Path      string    `json:"path"`
	Timestamp time.Time `json:"timestamp,omitempty"`
}

// BaseWSResponse defines model for BaseWSResponse.
type BaseWSResponse struct {
	Data      json.RawMessage `json:"data"`
	MessageId string          `json:"message_id"`
	NodeId    string          `json:"node_id"`
	Path      string          `json:"path"`
	Timestamp time.Time       `json:"timestamp"`
}

// ChatsResponse defines model for ChatsResponse.
type ChatsResponse = externalRef0.ChatsResponse

// ErrorData defines model for ErrorData.
type ErrorData struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent = externalRef0.ErrorEvent

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Data      ErrorData `json:"data"`
	MessageId string    `json:"message_id"`
	NodeId    string    `json:"node_id"`
	Path      string    `json:"path"`
	Timestamp time.Time `json:"timestamp"`
}

// Event defines model for Event.
type Event struct {
	union json.RawMessage
}

// GetAllChatsEvent defines model for GetAllChatsEvent.
type GetAllChatsEvent = externalRef0.GetAllChatsEvent

// GetAllMessagesEvent defines model for GetAllMessagesEvent.
type GetAllMessagesEvent = externalRef0.GetAllMessagesEvent

// GetAllRepliesEvent defines model for GetAllRepliesEvent.
type GetAllRepliesEvent = externalRef0.GetAllRepliesEvent

// GetAllTweetsEvent defines model for GetAllTweetsEvent.
type GetAllTweetsEvent = externalRef0.GetAllTweetsEvent

// GetAllUsersEvent defines model for GetAllUsersEvent.
type GetAllUsersEvent = externalRef0.GetAllUsersEvent

// GetChatEvent defines model for GetChatEvent.
type GetChatEvent = externalRef0.GetChatEvent

// GetMessageEvent defines model for GetMessageEvent.
type GetMessageEvent = externalRef0.GetMessageEvent

// GetReplyEvent defines model for GetReplyEvent.
type GetReplyEvent = externalRef0.GetReplyEvent

// GetTimelineEvent defines model for GetTimelineEvent.
type GetTimelineEvent = externalRef0.GetTimelineEvent

// GetTweetEvent defines model for GetTweetEvent.
type GetTweetEvent = externalRef0.GetTweetEvent

// GetUserEvent defines model for GetUserEvent.
type GetUserEvent = externalRef0.GetUserEvent

// LoginEvent defines model for LoginEvent.
type LoginEvent = externalRef0.LoginEvent

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Owner externalRef0.Owner `json:"owner"`
	Token string             `json:"token"`
}

// LogoutEvent defines model for LogoutEvent.
type LogoutEvent = externalRef0.LogoutEvent

// MessagesResponse defines model for MessagesResponse.
type MessagesResponse = externalRef0.MessagesResponse

// NewChatEvent defines model for NewChatEvent.
type NewChatEvent = externalRef0.NewChatEvent

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent = externalRef0.NewFollowEvent

// NewMessageEvent defines model for NewMessageEvent.
type NewMessageEvent = externalRef0.NewMessageEvent

// NewReplyEvent defines model for NewReplyEvent.
type NewReplyEvent = externalRef0.NewReplyEvent

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent = externalRef0.NewTweetEvent

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent = externalRef0.NewUnfollowEvent

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent = externalRef0.NewUserEvent

// RepliesTreeResponse defines model for RepliesTreeResponse.
type RepliesTreeResponse = externalRef0.RepliesTreeResponse

// TweetsResponse defines model for TweetsResponse.
type TweetsResponse = externalRef0.TweetsResponse

// UsersResponse defines model for UsersResponse.
type UsersResponse = externalRef0.UsersResponse

// AsErrorEvent returns the union data inside the Event as a ErrorEvent
func (t Event) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the Event as the provided ErrorEvent
func (t *Event) FromErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the Event, using the provided ErrorEvent
func (t *Event) MergeErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewTweetEvent returns the union data inside the Event as a NewTweetEvent
func (t Event) AsNewTweetEvent() (NewTweetEvent, error) {
	var body NewTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewTweetEvent overwrites any union data inside the Event as the provided NewTweetEvent
func (t *Event) FromNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewTweetEvent performs a merge with any union data inside the Event, using the provided NewTweetEvent
func (t *Event) MergeNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUserEvent returns the union data inside the Event as a NewUserEvent
func (t Event) AsNewUserEvent() (NewUserEvent, error) {
	var body NewUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUserEvent overwrites any union data inside the Event as the provided NewUserEvent
func (t *Event) FromNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUserEvent performs a merge with any union data inside the Event, using the provided NewUserEvent
func (t *Event) MergeNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewFollowEvent returns the union data inside the Event as a NewFollowEvent
func (t Event) AsNewFollowEvent() (NewFollowEvent, error) {
	var body NewFollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewFollowEvent overwrites any union data inside the Event as the provided NewFollowEvent
func (t *Event) FromNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewFollowEvent performs a merge with any union data inside the Event, using the provided NewFollowEvent
func (t *Event) MergeNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUnfollowEvent returns the union data inside the Event as a NewUnfollowEvent
func (t Event) AsNewUnfollowEvent() (NewUnfollowEvent, error) {
	var body NewUnfollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUnfollowEvent overwrites any union data inside the Event as the provided NewUnfollowEvent
func (t *Event) FromNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUnfollowEvent performs a merge with any union data inside the Event, using the provided NewUnfollowEvent
func (t *Event) MergeNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllTweetsEvent returns the union data inside the Event as a GetAllTweetsEvent
func (t Event) AsGetAllTweetsEvent() (GetAllTweetsEvent, error) {
	var body GetAllTweetsEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllTweetsEvent overwrites any union data inside the Event as the provided GetAllTweetsEvent
func (t *Event) FromGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllTweetsEvent performs a merge with any union data inside the Event, using the provided GetAllTweetsEvent
func (t *Event) MergeGetAllTweetsEvent(v GetAllTweetsEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTimelineEvent returns the union data inside the Event as a GetTimelineEvent
func (t Event) AsGetTimelineEvent() (GetTimelineEvent, error) {
	var body GetTimelineEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTimelineEvent overwrites any union data inside the Event as the provided GetTimelineEvent
func (t *Event) FromGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTimelineEvent performs a merge with any union data inside the Event, using the provided GetTimelineEvent
func (t *Event) MergeGetTimelineEvent(v GetTimelineEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetTweetEvent returns the union data inside the Event as a GetTweetEvent
func (t Event) AsGetTweetEvent() (GetTweetEvent, error) {
	var body GetTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetTweetEvent overwrites any union data inside the Event as the provided GetTweetEvent
func (t *Event) FromGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetTweetEvent performs a merge with any union data inside the Event, using the provided GetTweetEvent
func (t *Event) MergeGetTweetEvent(v GetTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetUserEvent returns the union data inside the Event as a GetUserEvent
func (t Event) AsGetUserEvent() (GetUserEvent, error) {
	var body GetUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetUserEvent overwrites any union data inside the Event as the provided GetUserEvent
func (t *Event) FromGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetUserEvent performs a merge with any union data inside the Event, using the provided GetUserEvent
func (t *Event) MergeGetUserEvent(v GetUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllUsersEvent returns the union data inside the Event as a GetAllUsersEvent
func (t Event) AsGetAllUsersEvent() (GetAllUsersEvent, error) {
	var body GetAllUsersEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllUsersEvent overwrites any union data inside the Event as the provided GetAllUsersEvent
func (t *Event) FromGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllUsersEvent performs a merge with any union data inside the Event, using the provided GetAllUsersEvent
func (t *Event) MergeGetAllUsersEvent(v GetAllUsersEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetAllRepliesEvent returns the union data inside the Event as a GetAllRepliesEvent
func (t Event) AsGetAllRepliesEvent() (GetAllRepliesEvent, error) {
	var body GetAllRepliesEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetAllRepliesEvent overwrites any union data inside the Event as the provided GetAllRepliesEvent
func (t *Event) FromGetAllRepliesEvent(v GetAllRepliesEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetAllRepliesEvent performs a merge with any union data inside the Event, using the provided GetAllRepliesEvent
func (t *Event) MergeGetAllRepliesEvent(v GetAllRepliesEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewReplyEvent returns the union data inside the Event as a NewReplyEvent
func (t Event) AsNewReplyEvent() (NewReplyEvent, error) {
	var body NewReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewReplyEvent overwrites any union data inside the Event as the provided NewReplyEvent
func (t *Event) FromNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewReplyEvent performs a merge with any union data inside the Event, using the provided NewReplyEvent
func (t *Event) MergeNewReplyEvent(v NewReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetReplyEvent returns the union data inside the Event as a GetReplyEvent
func (t Event) AsGetReplyEvent() (GetReplyEvent, error) {
	var body GetReplyEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetReplyEvent overwrites any union data inside the Event as the provided GetReplyEvent
func (t *Event) FromGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetReplyEvent performs a merge with any union data inside the Event, using the provided GetReplyEvent
func (t *Event) MergeGetReplyEvent(v GetReplyEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLoginEvent returns the union data inside the Event as a LoginEvent
func (t Event) AsLoginEvent() (LoginEvent, error) {
	var body LoginEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLoginEvent overwrites any union data inside the Event as the provided LoginEvent
func (t *Event) FromLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLoginEvent performs a merge with any union data inside the Event, using the provided LoginEvent
func (t *Event) MergeLoginEvent(v LoginEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLogoutEvent returns the union data inside the Event as a LogoutEvent
func (t Event) AsLogoutEvent() (LogoutEvent, error) {
	var body LogoutEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLogoutEvent overwrites any union data inside the Event as the provided LogoutEvent
func (t *Event) FromLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLogoutEvent performs a merge with any union data inside the Event, using the provided LogoutEvent
func (t *Event) MergeLogoutEvent(v LogoutEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve static files
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Serve Websocket connection
	// (GET /v1/api/ws)
	WebsocketUpgrade(ctx echo.Context) error
	// Serve static files
	// (GET /{file*})
	GetStaticFile(ctx echo.Context, file string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// WebsocketUpgrade converts echo context to params.
func (w *ServerInterfaceWrapper) WebsocketUpgrade(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebsocketUpgrade(ctx)
	return err
}

// GetStaticFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetStaticFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "file" -------------
	var file string

	err = runtime.BindStyledParameterWithOptions("simple", "file", ctx.Param("file"), &file, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStaticFile(ctx, file)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.GET(baseURL+"/v1/api/ws", wrapper.WebsocketUpgrade)
	router.GET(baseURL+"/:file", wrapper.GetStaticFile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//8lSYMmXzcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./event.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
