// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/warpnet/gen/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code      int     `json:"code"`
	Message   string  `json:"message"`
	MessageId *string `json:"message_id,omitempty"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	MessageId string `json:"message_id"`
	Token     string `json:"token"`
	User      Owner  `json:"user"`
}

// Owner defines model for Owner.
type Owner = externalRef0.User

// WebsocketMessage defines model for WebsocketMessage.
type WebsocketMessage struct {
	EventType string `json:"event_type"`
	MessageId string `json:"message_id"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve static files
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Serve Websocket connection
	// (GET /v1/api/ws)
	WebsocketUpgrade(ctx echo.Context) error
	// Serve static files
	// (GET /{file*})
	GetStaticFile(ctx echo.Context, file string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// WebsocketUpgrade converts echo context to params.
func (w *ServerInterfaceWrapper) WebsocketUpgrade(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WebsocketUpgrade(ctx)
	return err
}

// GetStaticFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetStaticFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "file" -------------
	var file string

	err = runtime.BindStyledParameterWithOptions("simple", "file", ctx.Param("file"), &file, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter file: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStaticFile(ctx, file)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.GET(baseURL+"/v1/api/ws", wrapper.WebsocketUpgrade)
	router.GET(baseURL+"/:file", wrapper.GetStaticFile)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWUY/bNgz+K4K2p8FXJ91tD37bQzcc1qFDb0UfikMgS7SjnU15FJ00OOS/D5Szxj47",
	"Q7q93ksQUCQ/kt9HWU/ahrYLCMhRF0862i20Jv19QxToPcQuYAQxdBQ6IPaQjm1wycqHDnShPTLUQPqY",
	"6RZiNPX4MDJ5rEdnG+8Wjo+ZJvir9wROF58GhHO6h+wf/1D+CZYl3dtQe7xc47+iZZrDI+DiSR+B5OBb",
	"gkoX+pv8PKX8NKL83R6l32dFDzlPGSb9LtU/5JjVbXaGTbJXgVrDutClR0MHnc1rLY19rCn06Da+Pc39",
	"mjAfFlsvPfHWGZ7mEcMN+xaWUlkCw+A24nltTBWaJuzBbcqDBHmGNi6TNBgMkTmMAilusG8neB75x9sz",
	"1kiRQ4wk/A9QHuuvgLogtSZYwz4sqw2Du6zRPQB/Ta8iPDRtoq/1+Baw5q0u1gsc7KGM/hnRPTVzup5p",
	"3Ds96GeEdu5ixK1U/ZyxMRtTGUyEtLQtH+LLsrwsy8uyXLUsH6GMwT4C/3b+HE8XB3aAvBkC/+eneuSb",
	"jfPOC5NIj1VaJwfRku8GqvWbz0yAplE//X6nqkDKKOcFr+wZnPpj75mBbhr/CMp0XeNPIsk0e24E46Oh",
	"TiGwqiggq8pYGfUOKA4I61erVytpLXSApvO60N8nU6Y7w9s0lFx+akjLKcNKGHdOF/oX4Dt08FlL68OL",
	"I0W8Xq3mzbz7Nc0o9m0rV0qh74F2oCIb9lZVvoGYHPLdOjedz/fxIu4XIj90NZn0JJrgr1frOf7J10m3",
	"PywVeIcsYmxUlMJIgbz2Fmv+gq9sQASbEqTan6SP746jyqcY74F7wqgMHsadCz2t4i2ofLDmynkCyyFd",
	"vrOp3yenn30DiSgyLTBQ1MWnJ+0FR8iTnUqLrKvB8SxPph6y08t2ScoPy4TagAyY2hrJLQ+WgW8iE5j2",
	"/GK+6jsiQ5tO6H40lUSEU7G3FmKs+qZJ9+rt6nY+WRmGwsCqkk/ZNVITj8T0MLcFMci6KOMcQYxyWVGj",
	"C71l7oo8lxu52YbIxe1q9VofH45/BwAA//8UM5bzOQwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
