// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// BroadcastMessage defines model for BroadcastMessage.
type BroadcastMessage struct {
	Key         string  `json:"key"`
	Prefixes    *string `json:"prefixes,omitempty"`
	SequenceNum *int64  `json:"sequence_num,omitempty"`
	UserId      string  `json:"userId"`
	Value       string  `json:"value"`
}

// FollowRequest defines model for FollowRequest.
type FollowRequest struct {
	FromFollowerId string `json:"from_follower_id"`
	ToFollowedId   string `json:"to_followed_id"`
}

// IPAddress defines model for IPAddress.
type IPAddress struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Ip The IP address
	Ip string `json:"ip"`

	// IsActive Whether the IP address is currently active
	IsActive bool `json:"isActive"`

	// LastSeen The timestamp when this IP address was last active
	LastSeen time.Time `json:"lastSeen"`

	// Latency The network latency to this IP in milliseconds
	Latency *int64 `json:"latency,omitempty"`

	// Uptime Uptime of the node in seconds
	Uptime *int64 `json:"uptime,omitempty"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"userId"`
}

// PingResponse defines model for PingResponse.
type PingResponse struct {
	// Ip The IP address that was pinged
	Ip string `json:"ip"`

	// IsActive Whether the node is currently active
	IsActive bool `json:"isActive"`

	// Latency The latency to the IP address in milliseconds
	Latency int64 `json:"latency"`
}

// Retweet defines model for Retweet.
type Retweet struct {
	TweetId string `json:"tweetId"`
	UserId  string `json:"userId"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	Content       string     `json:"content"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	Sequence      int64      `json:"sequence"`
	TweetId       *string    `json:"tweetId,omitempty"`
	UserId        string     `json:"userId"`
}

// UnfollowRequest defines model for UnfollowRequest.
type UnfollowRequest struct {
	FromFollowerId string `json:"from_follower_id"`
	ToFollowedId   string `json:"to_followed_id"`
}

// User defines model for User.
type User struct {
	Birthdate    *time.Time `json:"birthdate,omitempty"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Description  *string    `json:"description,omitempty"`
	Followed     *[]string  `json:"followed,omitempty"`
	FollowedNum  *int64     `json:"followed_num,omitempty"`
	Followers    *[]string  `json:"followers,omitempty"`
	FollowersNum *int64     `json:"followers_num,omitempty"`
	Link         *string    `json:"link,omitempty"`
	Location     *string    `json:"location,omitempty"`
	MyReferrals  *[]string  `json:"my_referrals,omitempty"`
	PublicKey    *string    `json:"publicKey,omitempty"`
	ReferredBy   *string    `json:"referred_by,omitempty"`
	UserId       *string    `json:"userId,omitempty"`
	Username     *string    `json:"username,omitempty"`
}

// SendNodeIPAddressesJSONBody defines parameters for SendNodeIPAddresses.
type SendNodeIPAddressesJSONBody = []IPAddress

// PingNodeParams defines parameters for PingNode.
type PingNodeParams struct {
	Ip string `form:"ip" json:"ip"`
}

// BroadcastMessageJSONRequestBody defines body for BroadcastMessage for application/json ContentType.
type BroadcastMessageJSONRequestBody = BroadcastMessage

// FollowUserJSONRequestBody defines body for FollowUser for application/json ContentType.
type FollowUserJSONRequestBody = FollowRequest

// SendNodeIPAddressesJSONRequestBody defines body for SendNodeIPAddresses for application/json ContentType.
type SendNodeIPAddressesJSONRequestBody = SendNodeIPAddressesJSONBody

// CreateTweetJSONRequestBody defines body for CreateTweet for application/json ContentType.
type CreateTweetJSONRequestBody = Tweet

// UnfollowUserJSONRequestBody defines body for UnfollowUser for application/json ContentType.
type UnfollowUserJSONRequestBody = UnfollowRequest

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Broadcast a message to friends' nodes
	// (POST /broadcast)
	BroadcastMessage(ctx echo.Context) error
	// Follow another user
	// (POST /follow)
	FollowUser(ctx echo.Context) error
	// Get list of IP addresses from other nodes
	// (GET /nodes/ip-addresses)
	GetNodeIPAddresses(ctx echo.Context) error
	// Send list of IP addresses to other nodes
	// (POST /nodes/ip-addresses)
	SendNodeIPAddresses(ctx echo.Context) error
	// Ping another node to check its status
	// (GET /ping)
	PingNode(ctx echo.Context, params PingNodeParams) error
	// Get user's tweet timeline
	// (GET /timeline/{userId})
	GetUserTimeline(ctx echo.Context, userId string) error
	// Publish a new tweet
	// (POST /tweets)
	CreateTweet(ctx echo.Context) error
	// Get user's tweets
	// (GET /tweets/{userId})
	GetUserTweets(ctx echo.Context, userId string) error
	// Unfollow a user
	// (POST /unfollow)
	UnfollowUser(ctx echo.Context) error
	// Create a new user
	// (POST /users)
	CreateUser(ctx echo.Context) error
	// Get user information
	// (GET /users/{userId})
	GetUser(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// BroadcastMessage converts echo context to params.
func (w *ServerInterfaceWrapper) BroadcastMessage(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.BroadcastMessage(ctx)
	return err
}

// FollowUser converts echo context to params.
func (w *ServerInterfaceWrapper) FollowUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FollowUser(ctx)
	return err
}

// GetNodeIPAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeIPAddresses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodeIPAddresses(ctx)
	return err
}

// SendNodeIPAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) SendNodeIPAddresses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendNodeIPAddresses(ctx)
	return err
}

// PingNode converts echo context to params.
func (w *ServerInterfaceWrapper) PingNode(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PingNodeParams
	// ------------- Required query parameter "ip" -------------

	err = runtime.BindQueryParameter("form", true, true, "ip", ctx.QueryParams(), &params.Ip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ip: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PingNode(ctx, params)
	return err
}

// GetUserTimeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserTimeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserTimeline(ctx, userId)
	return err
}

// CreateTweet converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTweet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTweet(ctx)
	return err
}

// GetUserTweets converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserTweets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserTweets(ctx, userId)
	return err
}

// UnfollowUser converts echo context to params.
func (w *ServerInterfaceWrapper) UnfollowUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UnfollowUser(ctx)
	return err
}

// CreateUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateUser(ctx)
	return err
}

// GetUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "userId", ctx.Param("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUser(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/broadcast", wrapper.BroadcastMessage)
	router.POST(baseURL+"/follow", wrapper.FollowUser)
	router.GET(baseURL+"/nodes/ip-addresses", wrapper.GetNodeIPAddresses)
	router.POST(baseURL+"/nodes/ip-addresses", wrapper.SendNodeIPAddresses)
	router.GET(baseURL+"/ping", wrapper.PingNode)
	router.GET(baseURL+"/timeline/:userId", wrapper.GetUserTimeline)
	router.POST(baseURL+"/tweets", wrapper.CreateTweet)
	router.GET(baseURL+"/tweets/:userId", wrapper.GetUserTweets)
	router.POST(baseURL+"/unfollow", wrapper.UnfollowUser)
	router.POST(baseURL+"/users", wrapper.CreateUser)
	router.GET(baseURL+"/users/:userId", wrapper.GetUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///c7bQ6Kx0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
