// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// BroadcastMessage defines model for BroadcastMessage.
type BroadcastMessage struct {
	Key         string  `json:"key"`
	Prefixes    *string `json:"prefixes,omitempty"`
	SequenceNum *int64  `json:"sequence_num,omitempty"`
	UserId      string  `json:"user_id"`
	Value       string  `json:"value"`
}

// FollowRequest defines model for FollowRequest.
type FollowRequest struct {
	FromFollowerId string `json:"from_follower__id"`
	ToFollowedId   string `json:"to_followed__id"`
}

// IPAddress defines model for IPAddress.
type IPAddress struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Ip The IP address
	Ip string `json:"ip"`

	// IsActive Whether the IP address is currently active
	IsActive bool `json:"isActive"`

	// LastSeen The timestamp when this IP address was last active
	LastSeen time.Time `json:"lastSeen"`

	// Latency The network latency to this IP in milliseconds
	Latency *int64 `json:"latency,omitempty"`

	// Uptime Uptime of the node in seconds
	Uptime *int64  `json:"uptime,omitempty"`
	UserId *string `json:"user__id,omitempty"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// PingResponse defines model for PingResponse.
type PingResponse struct {
	// Ip The IP address that was pinged
	Ip string `json:"ip"`

	// IsActive Whether the node is currently active
	IsActive bool `json:"isActive"`

	// Latency The latency to the IP address in milliseconds
	Latency int64 `json:"latency"`
}

// Retweet defines model for Retweet.
type Retweet struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	Content       string     `json:"content"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	Sequence      int64      `json:"sequence"`
	TweetId       *string    `json:"tweet_id,omitempty"`
	UserId        string     `json:"user_id"`
}

// UnfollowRequest defines model for UnfollowRequest.
type UnfollowRequest struct {
	FromFollowerId string `json:"from_follower__id"`
	ToFollowedId   string `json:"to_followed__id"`
}

// User defines model for User.
type User struct {
	Birthdate    *time.Time `json:"birthdate,omitempty"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Description  *string    `json:"description,omitempty"`
	Followed     *[]string  `json:"followed,omitempty"`
	FollowedNum  *int64     `json:"followed_num,omitempty"`
	Followers    *[]string  `json:"followers,omitempty"`
	FollowersNum *int64     `json:"followers_num,omitempty"`
	Link         *string    `json:"link,omitempty"`
	Location     *string    `json:"location,omitempty"`
	MyReferrals  *[]string  `json:"my_referrals,omitempty"`
	PublicKey    *string    `json:"publicKey,omitempty"`
	ReferredBy   *string    `json:"referred_by,omitempty"`
	UserId       string     `json:"user_id"`
	Username     string     `json:"username"`
}

// PostNodesIpAddressesJSONBody defines parameters for PostNodesIpAddresses.
type PostNodesIpAddressesJSONBody = []IPAddress

// GetPingParams defines parameters for GetPing.
type GetPingParams struct {
	Ip string `form:"ip" json:"ip"`
}

// PostBroadcastJSONRequestBody defines body for PostBroadcast for application/json ContentType.
type PostBroadcastJSONRequestBody = BroadcastMessage

// PostFollowJSONRequestBody defines body for PostFollow for application/json ContentType.
type PostFollowJSONRequestBody = FollowRequest

// PostNodesIpAddressesJSONRequestBody defines body for PostNodesIpAddresses for application/json ContentType.
type PostNodesIpAddressesJSONRequestBody = PostNodesIpAddressesJSONBody

// PostTweetsJSONRequestBody defines body for PostTweets for application/json ContentType.
type PostTweetsJSONRequestBody = Tweet

// PostUnfollowJSONRequestBody defines body for PostUnfollow for application/json ContentType.
type PostUnfollowJSONRequestBody = UnfollowRequest

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = User

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Broadcast a message to friends' nodes
	// (POST /broadcast)
	PostBroadcast(ctx echo.Context) error
	// Follow another user
	// (POST /follow)
	PostFollow(ctx echo.Context) error
	// Get list of IP addresses from other nodes
	// (GET /nodes/ip-addresses)
	GetNodesIpAddresses(ctx echo.Context) error
	// Send list of IP addresses to other nodes
	// (POST /nodes/ip-addresses)
	PostNodesIpAddresses(ctx echo.Context) error
	// Ping another node to check its status
	// (GET /ping)
	GetPing(ctx echo.Context, params GetPingParams) error
	// Get user's tweet timeline
	// (GET /timeline/{user_id})
	GetTimelineUserId(ctx echo.Context, userId string) error
	// Publish a new tweet
	// (POST /tweets)
	PostTweets(ctx echo.Context) error
	// Get user's tweets
	// (GET /tweets/{user_id})
	GetTweetsUserId(ctx echo.Context, userId string) error
	// Unfollow a user
	// (POST /unfollow)
	PostUnfollow(ctx echo.Context) error
	// Create a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Get user information
	// (GET /users/{user_id})
	GetUsersUserId(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostBroadcast converts echo context to params.
func (w *ServerInterfaceWrapper) PostBroadcast(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostBroadcast(ctx)
	return err
}

// PostFollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostFollow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFollow(ctx)
	return err
}

// GetNodesIpAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesIpAddresses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodesIpAddresses(ctx)
	return err
}

// PostNodesIpAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodesIpAddresses(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodesIpAddresses(ctx)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPingParams
	// ------------- Required query parameter "ip" -------------

	err = runtime.BindQueryParameter("form", true, true, "ip", ctx.QueryParams(), &params.Ip)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ip: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx, params)
	return err
}

// GetTimelineUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTimelineUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTimelineUserId(ctx, userId)
	return err
}

// PostTweets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTweets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTweets(ctx)
	return err
}

// GetTweetsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTweetsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTweetsUserId(ctx, userId)
	return err
}

// PostUnfollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostUnfollow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUnfollow(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// GetUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/broadcast", wrapper.PostBroadcast)
	router.POST(baseURL+"/follow", wrapper.PostFollow)
	router.GET(baseURL+"/nodes/ip-addresses", wrapper.GetNodesIpAddresses)
	router.POST(baseURL+"/nodes/ip-addresses", wrapper.PostNodesIpAddresses)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/timeline/:user_id", wrapper.GetTimelineUserId)
	router.POST(baseURL+"/tweets", wrapper.PostTweets)
	router.GET(baseURL+"/tweets/:user_id", wrapper.GetTweetsUserId)
	router.POST(baseURL+"/unfollow", wrapper.PostUnfollow)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.GET(baseURL+"/users/:user_id", wrapper.GetUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
