// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FollowRequest defines model for FollowRequest.
type FollowRequest struct {
	ReaderId string `json:"reader_id"`
	WriterId string `json:"writer_id"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Node defines model for Node.
type Node struct {
	CreatedAt *time.Time         `json:"created_at,omitempty"`
	Id        openapi_types.UUID `json:"id"`

	// Ip The IP address
	Ip string `json:"ip"`

	// IsActive Whether the IP address is currently active
	IsActive bool `json:"is_active"`

	// LastSeen The timestamp when this IP address was last active
	LastSeen time.Time `json:"last_seen"`

	// Latency The network latency to this IP in milliseconds
	Latency *int64 `json:"latency,omitempty"`

	// OwnerId user ID
	OwnerId string `json:"owner_id"`
	Port    string `json:"port"`

	// Uptime Uptime of the node in seconds
	Uptime *int64 `json:"uptime,omitempty"`
}

// PingResponse defines model for PingResponse.
type PingResponse struct {
	// Ip The IP address that was pinged
	Ip string `json:"ip"`

	// Latency The latency to the IP address in milliseconds
	Latency     int64   `json:"latency"`
	Port        string  `json:"port"`
	RequesterIp *string `json:"requester_ip,omitempty"`
}

// Retweet defines model for Retweet.
type Retweet struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// TimelineResponse defines model for TimelineResponse.
type TimelineResponse struct {
	Cursor string  `json:"cursor"`
	Tweets []Tweet `json:"tweets"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	Content       string     `json:"content"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	Sequence      *int64     `json:"sequence,omitempty"`
	TweetId       *string    `json:"tweet_id,omitempty"`
	UserId        string     `json:"user_id"`
	Username      *string    `json:"username,omitempty"`
}

// UnfollowRequest defines model for UnfollowRequest.
type UnfollowRequest struct {
	ReaderId string `json:"reader_id"`
	WriterId string `json:"writer_id"`
}

// User defines model for User.
type User struct {
	Birthdate    *time.Time         `json:"birthdate,omitempty"`
	CreatedAt    *time.Time         `json:"created_at,omitempty"`
	Description  *string            `json:"description,omitempty"`
	Followed     *[]string          `json:"followed,omitempty"`
	FollowedNum  *int64             `json:"followed_num,omitempty"`
	Followers    *[]string          `json:"followers,omitempty"`
	FollowersNum *int64             `json:"followers_num,omitempty"`
	Link         *string            `json:"link,omitempty"`
	Location     *string            `json:"location,omitempty"`
	MyReferrals  *[]string          `json:"my_referrals,omitempty"`
	NodeId       openapi_types.UUID `json:"node_id"`
	ReferredBy   *string            `json:"referred_by,omitempty"`
	UserId       *string            `json:"user_id,omitempty"`
	Username     string             `json:"username"`
}

// GetTweetsTimelineUserIdParams defines parameters for GetTweetsTimelineUserId.
type GetTweetsTimelineUserIdParams struct {
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = AuthRequest

// PostNodesJSONRequestBody defines body for PostNodes for application/json ContentType.
type PostNodesJSONRequestBody = Node

// PostTweetsJSONRequestBody defines body for PostTweets for application/json ContentType.
type PostTweetsJSONRequestBody = Tweet

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = User

// PostUsersFollowJSONRequestBody defines body for PostUsersFollow for application/json ContentType.
type PostUsersFollowJSONRequestBody = FollowRequest

// PostUsersUnfollowJSONRequestBody defines body for PostUsersUnfollow for application/json ContentType.
type PostUsersUnfollowJSONRequestBody = UnfollowRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve the main index.html page
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Store credentials
	// (POST /auth/login)
	PostAuthLogin(ctx echo.Context) error
	// Close service
	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error
	// Get node info
	// (GET /nodes)
	GetNodes(ctx echo.Context) error
	// Send node info
	// (POST /nodes)
	PostNodes(ctx echo.Context) error
	// Ping another node to check its status
	// (GET /nodes/ping)
	GetNodesPing(ctx echo.Context) error
	// Publish a new tweet
	// (POST /tweets)
	PostTweets(ctx echo.Context) error
	// Get user's tweet timeline
	// (GET /tweets/timeline/{user_id})
	GetTweetsTimelineUserId(ctx echo.Context, userId string, params GetTweetsTimelineUserIdParams) error
	// Get user's tweets
	// (GET /tweets/{user_id})
	GetTweetsUserId(ctx echo.Context, userId string) error
	// Get a certain tweet
	// (GET /tweets/{user_id}/{tweet_id})
	GetTweetsUserIdTweetId(ctx echo.Context, userId string, tweetId string) error
	// Create a new user
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// Follow another user
	// (POST /users/follow)
	PostUsersFollow(ctx echo.Context) error
	// Unfollow a user
	// (POST /users/unfollow)
	PostUsersUnfollow(ctx echo.Context) error
	// Get user information
	// (GET /users/{user_id})
	GetUsersUserId(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogin(ctx)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodes(ctx)
	return err
}

// PostNodes converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNodes(ctx)
	return err
}

// GetNodesPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNodesPing(ctx)
	return err
}

// PostTweets converts echo context to params.
func (w *ServerInterfaceWrapper) PostTweets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTweets(ctx)
	return err
}

// GetTweetsTimelineUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTweetsTimelineUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTweetsTimelineUserIdParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTweetsTimelineUserId(ctx, userId, params)
	return err
}

// GetTweetsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTweetsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTweetsUserId(ctx, userId)
	return err
}

// GetTweetsUserIdTweetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTweetsUserIdTweetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "tweet_id" -------------
	var tweetId string

	err = runtime.BindStyledParameterWithOptions("simple", "tweet_id", ctx.Param("tweet_id"), &tweetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tweet_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTweetsUserIdTweetId(ctx, userId, tweetId)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// PostUsersFollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersFollow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersFollow(ctx)
	return err
}

// PostUsersUnfollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUnfollow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUnfollow(ctx)
	return err
}

// GetUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.POST(baseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.GET(baseURL+"/nodes", wrapper.GetNodes)
	router.POST(baseURL+"/nodes", wrapper.PostNodes)
	router.GET(baseURL+"/nodes/ping", wrapper.GetNodesPing)
	router.POST(baseURL+"/tweets", wrapper.PostTweets)
	router.GET(baseURL+"/tweets/timeline/:user_id", wrapper.GetTweetsTimelineUserId)
	router.GET(baseURL+"/tweets/:user_id", wrapper.GetTweetsUserId)
	router.GET(baseURL+"/tweets/:user_id/:tweet_id", wrapper.GetTweetsUserIdTweetId)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.POST(baseURL+"/users/follow", wrapper.PostUsersFollow)
	router.POST(baseURL+"/users/unfollow", wrapper.PostUsersUnfollow)
	router.GET(baseURL+"/users/:user_id", wrapper.GetUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XwAAAP//WfeQr2QkAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
