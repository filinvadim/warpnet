// Package components provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package components

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// FollowRequest defines model for FollowRequest.
type FollowRequest struct {
	ReaderId string `json:"reader_id"`
	WriterId string `json:"writer_id"`
}

// Like defines model for Like.
type Like struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Node defines model for Node.
type Node struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Host The IP address
	Host string             `json:"host"`
	Id   openapi_types.UUID `json:"id"`

	// IsActive Whether the IP address is currently active
	IsActive bool `json:"is_active"`
	IsOwned  bool `json:"is_owned"`

	// LastSeen The timestamp when this IP address was last active
	LastSeen time.Time `json:"last_seen"`

	// Latency The network latency to this IP in milliseconds
	Latency *int64 `json:"latency,omitempty"`

	// OwnerId user ID
	OwnerId string `json:"owner_id"`

	// Uptime Uptime of the node in seconds
	Uptime *int64 `json:"uptime,omitempty"`
}

// Retweet defines model for Retweet.
type Retweet struct {
	TweetId string `json:"tweet_id"`
	UserId  string `json:"user_id"`
}

// Tweet defines model for Tweet.
type Tweet struct {
	Content       string     `json:"content"`
	CreatedAt     *time.Time `json:"created_at,omitempty"`
	Likes         *[]Like    `json:"likes,omitempty"`
	LikesCount    *int64     `json:"likes_count,omitempty"`
	Retweets      *[]Retweet `json:"retweets,omitempty"`
	RetweetsCount *int64     `json:"retweets_count,omitempty"`
	Sequence      *int64     `json:"sequence,omitempty"`
	TweetId       *string    `json:"tweet_id,omitempty"`
	UserId        string     `json:"user_id"`
	Username      *string    `json:"username,omitempty"`
}

// UnfollowRequest defines model for UnfollowRequest.
type UnfollowRequest struct {
	ReaderId string `json:"reader_id"`
	WriterId string `json:"writer_id"`
}

// User defines model for User.
type User struct {
	Birthdate    *time.Time         `json:"birthdate,omitempty"`
	CreatedAt    *time.Time         `json:"created_at,omitempty"`
	Description  *string            `json:"description,omitempty"`
	Followed     *[]string          `json:"followed,omitempty"`
	FollowedNum  *int64             `json:"followed_num,omitempty"`
	Followers    *[]string          `json:"followers,omitempty"`
	FollowersNum *int64             `json:"followers_num,omitempty"`
	Link         *string            `json:"link,omitempty"`
	Location     *string            `json:"location,omitempty"`
	MyReferrals  *[]string          `json:"my_referrals,omitempty"`
	NodeId       openapi_types.UUID `json:"node_id"`
	ReferredBy   *string            `json:"referred_by,omitempty"`
	UserId       *string            `json:"user_id,omitempty"`
	Username     string             `json:"username"`
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RW32vbQAz+V47bHt02XUcf/DbWDQpllNKyhzHMxVbiW846VyfXCyH/+zj/TuwNNzDY",
	"nnKxJX3fSZ8k72Rss9wiIDsZ7qSLU8hUdfxEZMkfcrI5EGuoHsc2Af/L2xxkKDUyrIHkPpAZOKfWw5eO",
	"SeNa7veBJHguNEEiw291iN7+e9Da2+UPiNnH+myNseUDPBfgeEyCQCVAkU78n0zjHeCaUxleBsfQgSxJ",
	"8zzbI5o9yDDIFNs7vYExSS4BeB7Hwp3EsHULeqwpel+akh0VkkAxJJGq8ruylPmTTBTDGevMV2jEM7V1",
	"NRJwMemctUUZyscUxO29UElC4NyUX321DqMoatIjMxepmPULjDG+psApkOADLKGdiAsiQDZb0fh2gZfW",
	"GlDYRLYlQjIQ5+CtUY4jB4DTd/PZcKyyXJQpoOBUuyGHUjnhI/T485JpFAPG22lMBC4tbURjJNh2uBpF",
	"po3RDmKLic83/FRZbkCGl+8WA3SNfP2+Rx60qs9FK7hDbC8pcXszxbfIq5uMXJ6q58KuquKgTcBTnGB3",
	"db2YQ+9I5F3pGvkNZTIs3eBWleCmOuEBqkb5h3v1cZpfbJEBeQa9U9ra6E0Noxmy6vCWYCVD+eaiXw8X",
	"zW64qKbdvgujiNS2ixLFtsBD6LbOmUadFZkMF1OSpLo082m0tZxg0sY6mYzziwdjOMH1LyiptkSVzdit",
	"vcxayUyp7AlX/9WCfXIw8Smy1MSpF/Z8pZ/SHQfTbjd+X6ey3i2dckdWxxptvSL0UtrNmdqNC7mTkMi9",
	"Aspo3ByubDKTk8PG6reJybYRwQqIlHklZb9EopkfDTUEJNFyOxl70GV/7KvXDvPKr6c6lq130riy4435",
	"sZtmYmVJKJFoD7QsGBLxWGpmoDM/ToXKc6ObFAeSNfs9Km/G5uLD/a0M5AuQqzEuzxfni2rX54Aq1zKU",
	"V9WjQOaKUydDLIzZ/woAAP//oOeqKQEMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
