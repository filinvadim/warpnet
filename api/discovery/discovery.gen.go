// Package discovery provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package discovery

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	externalRef0 "github.com/filinvadim/dWighter/api/components"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ErrorEventEventType.
const (
	Error ErrorEventEventType = "error"
)

// Defines values for NewFollowEventEventType.
const (
	Follow NewFollowEventEventType = "follow"
)

// Defines values for NewTweetEventEventType.
const (
	Tweet NewTweetEventEventType = "tweet"
)

// Defines values for NewUnfollowEventEventType.
const (
	Unfollow NewUnfollowEventEventType = "unfollow"
)

// Defines values for NewUserEventEventType.
const (
	User NewUserEventEventType = "user"
)

// Defines values for PingEventEventType.
const (
	Ping PingEventEventType = "ping"
)

// ErrorEvent defines model for ErrorEvent.
type ErrorEvent struct {
	Code      int                 `json:"code"`
	EventType ErrorEventEventType `json:"event_type"`
	Message   string              `json:"message"`
}

// ErrorEventEventType defines model for ErrorEvent.EventType.
type ErrorEventEventType string

// Event defines model for Event.
type Event struct {
	Data Event_Data `json:"data"`
}

// Event_Data defines model for Event.Data.
type Event_Data struct {
	union json.RawMessage
}

// NewFollowEvent defines model for NewFollowEvent.
type NewFollowEvent struct {
	EventType NewFollowEventEventType    `json:"event_type"`
	Request   externalRef0.FollowRequest `json:"request"`
}

// NewFollowEventEventType defines model for NewFollowEvent.EventType.
type NewFollowEventEventType string

// NewTweetEvent defines model for NewTweetEvent.
type NewTweetEvent struct {
	EventType NewTweetEventEventType `json:"event_type"`
	Tweet     externalRef0.Tweet     `json:"tweet"`
}

// NewTweetEventEventType defines model for NewTweetEvent.EventType.
type NewTweetEventEventType string

// NewUnfollowEvent defines model for NewUnfollowEvent.
type NewUnfollowEvent struct {
	EventType NewUnfollowEventEventType    `json:"event_type"`
	Request   externalRef0.UnfollowRequest `json:"request"`
}

// NewUnfollowEventEventType defines model for NewUnfollowEvent.EventType.
type NewUnfollowEventEventType string

// NewUserEvent defines model for NewUserEvent.
type NewUserEvent struct {
	EventType NewUserEventEventType `json:"event_type"`
	User      externalRef0.User     `json:"user"`
}

// NewUserEventEventType defines model for NewUserEvent.EventType.
type NewUserEventEventType string

// PingEvent defines model for PingEvent.
type PingEvent struct {
	CachedNodes []externalRef0.Node `json:"cached_nodes"`
	DestIp      *string             `json:"dest_ip,omitempty"`
	EventType   PingEventEventType  `json:"event_type"`
	OwnerInfo   externalRef0.User   `json:"owner_info"`
	OwnerNode   externalRef0.Node   `json:"owner_node"`
}

// PingEventEventType defines model for PingEvent.EventType.
type PingEventEventType string

// NewEventJSONRequestBody defines body for NewEvent for application/json ContentType.
type NewEventJSONRequestBody = Event

// AsPingEvent returns the union data inside the Event_Data as a PingEvent
func (t Event_Data) AsPingEvent() (PingEvent, error) {
	var body PingEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPingEvent overwrites any union data inside the Event_Data as the provided PingEvent
func (t *Event_Data) FromPingEvent(v PingEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePingEvent performs a merge with any union data inside the Event_Data, using the provided PingEvent
func (t *Event_Data) MergePingEvent(v PingEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsErrorEvent returns the union data inside the Event_Data as a ErrorEvent
func (t Event_Data) AsErrorEvent() (ErrorEvent, error) {
	var body ErrorEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromErrorEvent overwrites any union data inside the Event_Data as the provided ErrorEvent
func (t *Event_Data) FromErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeErrorEvent performs a merge with any union data inside the Event_Data, using the provided ErrorEvent
func (t *Event_Data) MergeErrorEvent(v ErrorEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewTweetEvent returns the union data inside the Event_Data as a NewTweetEvent
func (t Event_Data) AsNewTweetEvent() (NewTweetEvent, error) {
	var body NewTweetEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewTweetEvent overwrites any union data inside the Event_Data as the provided NewTweetEvent
func (t *Event_Data) FromNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewTweetEvent performs a merge with any union data inside the Event_Data, using the provided NewTweetEvent
func (t *Event_Data) MergeNewTweetEvent(v NewTweetEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUserEvent returns the union data inside the Event_Data as a NewUserEvent
func (t Event_Data) AsNewUserEvent() (NewUserEvent, error) {
	var body NewUserEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUserEvent overwrites any union data inside the Event_Data as the provided NewUserEvent
func (t *Event_Data) FromNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUserEvent performs a merge with any union data inside the Event_Data, using the provided NewUserEvent
func (t *Event_Data) MergeNewUserEvent(v NewUserEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewFollowEvent returns the union data inside the Event_Data as a NewFollowEvent
func (t Event_Data) AsNewFollowEvent() (NewFollowEvent, error) {
	var body NewFollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewFollowEvent overwrites any union data inside the Event_Data as the provided NewFollowEvent
func (t *Event_Data) FromNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewFollowEvent performs a merge with any union data inside the Event_Data, using the provided NewFollowEvent
func (t *Event_Data) MergeNewFollowEvent(v NewFollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsNewUnfollowEvent returns the union data inside the Event_Data as a NewUnfollowEvent
func (t Event_Data) AsNewUnfollowEvent() (NewUnfollowEvent, error) {
	var body NewUnfollowEvent
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNewUnfollowEvent overwrites any union data inside the Event_Data as the provided NewUnfollowEvent
func (t *Event_Data) FromNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNewUnfollowEvent performs a merge with any union data inside the Event_Data, using the provided NewUnfollowEvent
func (t *Event_Data) MergeNewUnfollowEvent(v NewUnfollowEvent) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Event_Data) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Event_Data) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// NewEventWithBody request with any body
	NewEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NewEvent(ctx context.Context, body NewEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTweetListDiscovery request
	GetTweetListDiscovery(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTweetDiscovery request
	GetTweetDiscovery(ctx context.Context, userId string, tweetId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserDiscovery request
	GetUserDiscovery(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) NewEventWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewEventRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NewEvent(ctx context.Context, body NewEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNewEventRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTweetListDiscovery(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTweetListDiscoveryRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTweetDiscovery(ctx context.Context, userId string, tweetId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTweetDiscoveryRequest(c.Server, userId, tweetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserDiscovery(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserDiscoveryRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewNewEventRequest calls the generic NewEvent builder with application/json body
func NewNewEventRequest(server string, body NewEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewNewEventRequestWithBody(server, "application/json", bodyReader)
}

// NewNewEventRequestWithBody generates requests for NewEvent with any type of body
func NewNewEventRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/discovery/event/new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTweetListDiscoveryRequest generates requests for GetTweetListDiscovery
func NewGetTweetListDiscoveryRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/discovery/tweets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTweetDiscoveryRequest generates requests for GetTweetDiscovery
func NewGetTweetDiscoveryRequest(server string, userId string, tweetId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "tweet_id", runtime.ParamLocationPath, tweetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/discovery/tweets/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserDiscoveryRequest generates requests for GetUserDiscovery
func NewGetUserDiscoveryRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "user_id", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/discovery/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// NewEventWithBodyWithResponse request with any body
	NewEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NewEventResponse, error)

	NewEventWithResponse(ctx context.Context, body NewEventJSONRequestBody, reqEditors ...RequestEditorFn) (*NewEventResponse, error)

	// GetTweetListDiscoveryWithResponse request
	GetTweetListDiscoveryWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetTweetListDiscoveryResponse, error)

	// GetTweetDiscoveryWithResponse request
	GetTweetDiscoveryWithResponse(ctx context.Context, userId string, tweetId string, reqEditors ...RequestEditorFn) (*GetTweetDiscoveryResponse, error)

	// GetUserDiscoveryWithResponse request
	GetUserDiscoveryWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserDiscoveryResponse, error)
}

type NewEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
}

// Status returns HTTPResponse.Status
func (r NewEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NewEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTweetListDiscoveryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]externalRef0.Tweet
}

// Status returns HTTPResponse.Status
func (r GetTweetListDiscoveryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTweetListDiscoveryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTweetDiscoveryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetTweetDiscoveryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTweetDiscoveryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserDiscoveryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *externalRef0.User
}

// Status returns HTTPResponse.Status
func (r GetUserDiscoveryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserDiscoveryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// NewEventWithBodyWithResponse request with arbitrary body returning *NewEventResponse
func (c *ClientWithResponses) NewEventWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NewEventResponse, error) {
	rsp, err := c.NewEventWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewEventResponse(rsp)
}

func (c *ClientWithResponses) NewEventWithResponse(ctx context.Context, body NewEventJSONRequestBody, reqEditors ...RequestEditorFn) (*NewEventResponse, error) {
	rsp, err := c.NewEvent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNewEventResponse(rsp)
}

// GetTweetListDiscoveryWithResponse request returning *GetTweetListDiscoveryResponse
func (c *ClientWithResponses) GetTweetListDiscoveryWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetTweetListDiscoveryResponse, error) {
	rsp, err := c.GetTweetListDiscovery(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTweetListDiscoveryResponse(rsp)
}

// GetTweetDiscoveryWithResponse request returning *GetTweetDiscoveryResponse
func (c *ClientWithResponses) GetTweetDiscoveryWithResponse(ctx context.Context, userId string, tweetId string, reqEditors ...RequestEditorFn) (*GetTweetDiscoveryResponse, error) {
	rsp, err := c.GetTweetDiscovery(ctx, userId, tweetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTweetDiscoveryResponse(rsp)
}

// GetUserDiscoveryWithResponse request returning *GetUserDiscoveryResponse
func (c *ClientWithResponses) GetUserDiscoveryWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserDiscoveryResponse, error) {
	rsp, err := c.GetUserDiscovery(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserDiscoveryResponse(rsp)
}

// ParseNewEventResponse parses an HTTP response from a NewEventWithResponse call
func ParseNewEventResponse(rsp *http.Response) (*NewEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NewEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTweetListDiscoveryResponse parses an HTTP response from a GetTweetListDiscoveryWithResponse call
func ParseGetTweetListDiscoveryResponse(rsp *http.Response) (*GetTweetListDiscoveryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTweetListDiscoveryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []externalRef0.Tweet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTweetDiscoveryResponse parses an HTTP response from a GetTweetDiscoveryWithResponse call
func ParseGetTweetDiscoveryResponse(rsp *http.Response) (*GetTweetDiscoveryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTweetDiscoveryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserDiscoveryResponse parses an HTTP response from a GetUserDiscoveryWithResponse call
func ParseGetUserDiscoveryResponse(rsp *http.Response) (*GetUserDiscoveryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserDiscoveryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest externalRef0.User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new user
	// (POST /v1/discovery/event/new)
	NewEvent(ctx echo.Context) error
	// Get user's tweets
	// (GET /v1/discovery/tweets/{user_id})
	GetTweetListDiscovery(ctx echo.Context, userId string) error
	// Get a certain tweet
	// (GET /v1/discovery/tweets/{user_id}/{tweet_id})
	GetTweetDiscovery(ctx echo.Context, userId string, tweetId string) error
	// Get user information
	// (GET /v1/discovery/users/{user_id})
	GetUserDiscovery(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// NewEvent converts echo context to params.
func (w *ServerInterfaceWrapper) NewEvent(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NewEvent(ctx)
	return err
}

// GetTweetListDiscovery converts echo context to params.
func (w *ServerInterfaceWrapper) GetTweetListDiscovery(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTweetListDiscovery(ctx, userId)
	return err
}

// GetTweetDiscovery converts echo context to params.
func (w *ServerInterfaceWrapper) GetTweetDiscovery(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "tweet_id" -------------
	var tweetId string

	err = runtime.BindStyledParameterWithOptions("simple", "tweet_id", ctx.Param("tweet_id"), &tweetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tweet_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTweetDiscovery(ctx, userId, tweetId)
	return err
}

// GetUserDiscovery converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserDiscovery(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserDiscovery(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/discovery/event/new", wrapper.NewEvent)
	router.GET(baseURL+"/v1/discovery/tweets/:user_id", wrapper.GetTweetListDiscovery)
	router.GET(baseURL+"/v1/discovery/tweets/:user_id/:tweet_id", wrapper.GetTweetDiscovery)
	router.GET(baseURL+"/v1/discovery/users/:user_id", wrapper.GetUserDiscovery)

}
