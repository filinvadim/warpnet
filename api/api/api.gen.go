// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/dWighter/api/components"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// TimelineResponse defines model for TimelineResponse.
type TimelineResponse struct {
	Cursor string               `json:"cursor"`
	Tweets []externalRef0.Tweet `json:"tweets"`
}

// GetV1ApiTweetsTimelineUserIdParams defines parameters for GetV1ApiTweetsTimelineUserId.
type GetV1ApiTweetsTimelineUserIdParams struct {
	Cursor *string `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit  *uint64 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostV1ApiAuthLoginJSONRequestBody defines body for PostV1ApiAuthLogin for application/json ContentType.
type PostV1ApiAuthLoginJSONRequestBody = AuthRequest

// PostV1ApiTweetsJSONRequestBody defines body for PostV1ApiTweets for application/json ContentType.
type PostV1ApiTweetsJSONRequestBody = externalRef0.Tweet

// PostV1ApiUsersJSONRequestBody defines body for PostV1ApiUsers for application/json ContentType.
type PostV1ApiUsersJSONRequestBody = externalRef0.User

// PostV1ApiUsersFollowJSONRequestBody defines body for PostV1ApiUsersFollow for application/json ContentType.
type PostV1ApiUsersFollowJSONRequestBody = externalRef0.FollowRequest

// PostV1ApiUsersUnfollowJSONRequestBody defines body for PostV1ApiUsersUnfollow for application/json ContentType.
type PostV1ApiUsersUnfollowJSONRequestBody = externalRef0.UnfollowRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Serve the main index.html page
	// (GET /)
	GetIndex(ctx echo.Context) error
	// Store credentials
	// (POST /v1/api/auth/login)
	PostV1ApiAuthLogin(ctx echo.Context) error
	// Close service
	// (POST /v1/api/auth/logout)
	PostV1ApiAuthLogout(ctx echo.Context) error
	// Publish a new tweet
	// (POST /v1/api/tweets)
	PostV1ApiTweets(ctx echo.Context) error
	// Get user's tweet timeline
	// (GET /v1/api/tweets/timeline/{user_id})
	GetV1ApiTweetsTimelineUserId(ctx echo.Context, userId string, params GetV1ApiTweetsTimelineUserIdParams) error
	// Get user's tweets
	// (GET /v1/api/tweets/{user_id})
	GetV1ApiTweetsUserId(ctx echo.Context, userId string) error
	// Get a certain tweet
	// (GET /v1/api/tweets/{user_id}/{tweet_id})
	GetV1ApiTweetsUserIdTweetId(ctx echo.Context, userId string, tweetId string) error
	// Create a new user
	// (POST /v1/api/users)
	PostV1ApiUsers(ctx echo.Context) error
	// Follow another user
	// (POST /v1/api/users/follow)
	PostV1ApiUsersFollow(ctx echo.Context) error
	// Unfollow a user
	// (POST /v1/api/users/unfollow)
	PostV1ApiUsersUnfollow(ctx echo.Context) error
	// Get user information
	// (GET /v1/api/users/{user_id})
	GetV1ApiUsersUserId(ctx echo.Context, userId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetIndex converts echo context to params.
func (w *ServerInterfaceWrapper) GetIndex(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIndex(ctx)
	return err
}

// PostV1ApiAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogin(ctx)
	return err
}

// PostV1ApiAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiAuthLogout(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiAuthLogout(ctx)
	return err
}

// PostV1ApiTweets converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiTweets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiTweets(ctx)
	return err
}

// GetV1ApiTweetsTimelineUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsTimelineUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ApiTweetsTimelineUserIdParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsTimelineUserId(ctx, userId, params)
	return err
}

// GetV1ApiTweetsUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserId(ctx, userId)
	return err
}

// GetV1ApiTweetsUserIdTweetId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiTweetsUserIdTweetId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// ------------- Path parameter "tweet_id" -------------
	var tweetId string

	err = runtime.BindStyledParameterWithOptions("simple", "tweet_id", ctx.Param("tweet_id"), &tweetId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tweet_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiTweetsUserIdTweetId(ctx, userId, tweetId)
	return err
}

// PostV1ApiUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsers(ctx)
	return err
}

// PostV1ApiUsersFollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersFollow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersFollow(ctx)
	return err
}

// PostV1ApiUsersUnfollow converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1ApiUsersUnfollow(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostV1ApiUsersUnfollow(ctx)
	return err
}

// GetV1ApiUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1ApiUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId string

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", ctx.Param("user_id"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1ApiUsersUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/", wrapper.GetIndex)
	router.POST(baseURL+"/v1/api/auth/login", wrapper.PostV1ApiAuthLogin)
	router.POST(baseURL+"/v1/api/auth/logout", wrapper.PostV1ApiAuthLogout)
	router.POST(baseURL+"/v1/api/tweets", wrapper.PostV1ApiTweets)
	router.GET(baseURL+"/v1/api/tweets/timeline/:user_id", wrapper.GetV1ApiTweetsTimelineUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id", wrapper.GetV1ApiTweetsUserId)
	router.GET(baseURL+"/v1/api/tweets/:user_id/:tweet_id", wrapper.GetV1ApiTweetsUserIdTweetId)
	router.POST(baseURL+"/v1/api/users", wrapper.PostV1ApiUsers)
	router.POST(baseURL+"/v1/api/users/follow", wrapper.PostV1ApiUsersFollow)
	router.POST(baseURL+"/v1/api/users/unfollow", wrapper.PostV1ApiUsersUnfollow)
	router.GET(baseURL+"/v1/api/users/:user_id", wrapper.GetV1ApiUsersUserId)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./components.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
