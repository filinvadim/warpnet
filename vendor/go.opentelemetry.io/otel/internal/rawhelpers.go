/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Copyright The OpenTelemetry Authors
// SPDX-License-Identifier: Apache-2.0

package internal // import "go.opentelemetry.io/otel/internal"

import (
	"math"
	"unsafe"
)

func BoolToRaw(b bool) uint64 { // nolint:revive  // b is not a control flag.
	if b {
		return 1
	}
	return 0
}

func RawToBool(r uint64) bool {
	return r != 0
}

func Int64ToRaw(i int64) uint64 {
	// Assumes original was a valid int64 (overflow not checked).
	return uint64(i) // nolint: gosec
}

func RawToInt64(r uint64) int64 {
	// Assumes original was a valid int64 (overflow not checked).
	return int64(r) // nolint: gosec
}

func Float64ToRaw(f float64) uint64 {
	return math.Float64bits(f)
}

func RawToFloat64(r uint64) float64 {
	return math.Float64frombits(r)
}

func RawPtrToFloat64Ptr(r *uint64) *float64 {
	// Assumes original was a valid *float64 (overflow not checked).
	return (*float64)(unsafe.Pointer(r)) // nolint: gosec
}

func RawPtrToInt64Ptr(r *uint64) *int64 {
	// Assumes original was a valid *int64 (overflow not checked).
	return (*int64)(unsafe.Pointer(r)) // nolint: gosec
}
