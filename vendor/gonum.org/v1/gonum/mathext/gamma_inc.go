/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Copyright ©2016 The Gonum Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package mathext

import (
	"gonum.org/v1/gonum/mathext/internal/cephes"
)

// GammaIncReg computes the regularized incomplete Gamma integral.
//
//	GammaIncReg(a,x) = (1/ Γ(a)) \int_0^x e^{-t} t^{a-1} dt
//
// The input argument a must be positive and x must be non-negative or GammaIncReg
// will panic.
//
// See http://mathworld.wolfram.com/IncompleteGammaFunction.html
// or https://en.wikipedia.org/wiki/Incomplete_gamma_function for more detailed
// information.
func GammaIncReg(a, x float64) float64 {
	return cephes.Igam(a, x)
}

// GammaIncRegComp computes the complemented regularized incomplete Gamma integral.
//
//	GammaIncRegComp(a,x) = 1 - GammaIncReg(a,x)
//	                     = (1/ Γ(a)) \int_x^\infty e^{-t} t^{a-1} dt
//
// The input argument a must be positive and x must be non-negative or
// GammaIncRegComp will panic.
func GammaIncRegComp(a, x float64) float64 {
	return cephes.IgamC(a, x)
}

// GammaIncRegInv computes the inverse of the regularized incomplete Gamma integral. That is,
// it returns the x such that:
//
//	GammaIncReg(a, x) = y
//
// The input argument a must be positive and y must be between 0 and 1
// inclusive or GammaIncRegInv will panic. GammaIncRegInv should return a positive
// number, but can return NaN if there is a failure to converge.
func GammaIncRegInv(a, y float64) float64 {
	return gammaIncRegInv(a, y)
}

// GammaIncRegCompInv computes the inverse of the complemented regularized incomplete Gamma
// integral. That is, it returns the x such that:
//
//	GammaIncRegComp(a, x) = y
//
// The input argument a must be positive and y must be between 0 and 1
// inclusive or GammaIncRegCompInv will panic. GammaIncRegCompInv should return a
// positive number, but can return 0 even with non-zero y due to underflow.
func GammaIncRegCompInv(a, y float64) float64 {
	return cephes.IgamI(a, y)
}
