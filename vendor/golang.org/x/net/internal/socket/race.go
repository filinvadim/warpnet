/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Copyright 2019 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build race

package socket

import (
	"runtime"
	"unsafe"
)

// This package reads and writes the Message buffers using a
// direct system call, which the race detector can't see.
// These functions tell the race detector what is going on during the syscall.

func (m *Message) raceRead() {
	for _, b := range m.Buffers {
		if len(b) > 0 {
			runtime.RaceReadRange(unsafe.Pointer(&b[0]), len(b))
		}
	}
	if b := m.OOB; len(b) > 0 {
		runtime.RaceReadRange(unsafe.Pointer(&b[0]), len(b))
	}
}
func (m *Message) raceWrite() {
	for _, b := range m.Buffers {
		if len(b) > 0 {
			runtime.RaceWriteRange(unsafe.Pointer(&b[0]), len(b))
		}
	}
	if b := m.OOB; len(b) > 0 {
		runtime.RaceWriteRange(unsafe.Pointer(&b[0]), len(b))
	}
}
