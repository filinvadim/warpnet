/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package watchdog

// NewAdaptivePolicy creates a policy that forces GC when the usage surpasses a
// user-configured percentage (factor) of the available memory.
//
// This policy recalculates the next target as usage+(limit-usage)*factor.
func NewAdaptivePolicy(factor float64) PolicyCtor {
	return func(limit uint64) (Policy, error) {
		return &adaptivePolicy{
			factor: factor,
			limit:  limit,
		}, nil
	}
}

type adaptivePolicy struct {
	factor float64
	limit  uint64
}

var _ Policy = (*adaptivePolicy)(nil)

func (p *adaptivePolicy) Evaluate(_ UtilizationType, used uint64) (next uint64) {
	if used >= p.limit {
		return used
	}

	available := float64(p.limit) - float64(used)
	next = used + uint64(available*p.factor)
	return next
}
