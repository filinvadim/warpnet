/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package flow

import (
	"fmt"
	"sync/atomic"
	"time"
)

// Snapshot is a rate/total snapshot.
type Snapshot struct {
	Rate       float64
	Total      uint64
	LastUpdate time.Time
}

// NewMeter returns a new Meter with the correct idle time.
//
// While zero-value Meters can be used, their "last update" time will start at
// the program start instead of when the meter was created.
func NewMeter() *Meter {
	return &Meter{
		snapshot: Snapshot{
			LastUpdate: cl.Now(),
		},
	}
}

func (s Snapshot) String() string {
	return fmt.Sprintf("%d (%f/s)", s.Total, s.Rate)
}

// Meter is a meter for monitoring a flow.
type Meter struct {
	accumulator atomic.Uint64

	// managed by the sweeper loop.
	registered bool

	// Take lock.
	snapshot Snapshot
}

// Mark updates the total.
func (m *Meter) Mark(count uint64) {
	if count > 0 && m.accumulator.Add(count) == count {
		// The accumulator is 0 so we probably need to register. We may
		// already _be_ registered however, if we are, the registration
		// loop will notice that `m.registered` is set and ignore us.
		globalSweeper.Register(m)
	}
}

// Snapshot gets a snapshot of the total and rate.
func (m *Meter) Snapshot() Snapshot {
	globalSweeper.snapshotMu.RLock()
	defer globalSweeper.snapshotMu.RUnlock()
	return m.snapshot
}

// Reset sets accumulator, total and rate to zero.
func (m *Meter) Reset() {
	globalSweeper.snapshotMu.Lock()
	m.accumulator.Store(0)
	m.snapshot.Rate = 0
	m.snapshot.Total = 0
	globalSweeper.snapshotMu.Unlock()
}

func (m *Meter) String() string {
	return m.Snapshot().String()
}
