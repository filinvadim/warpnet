/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package yamux

import "time"

type ping struct {
	id uint32
	// written to by the session on ping response
	pingResponse chan struct{}

	// closed by the Ping call that sent the ping when done.
	done chan struct{}
	// result set before done is closed.
	err      error
	duration time.Duration
}

func newPing(id uint32) *ping {
	return &ping{
		id:           id,
		pingResponse: make(chan struct{}, 1),
		done:         make(chan struct{}),
	}
}

func (p *ping) finish(val time.Duration, err error) {
	p.err = err
	p.duration = val
	close(p.done)
}

func (p *ping) wait() (time.Duration, error) {
	<-p.done
	return p.duration, p.err
}
