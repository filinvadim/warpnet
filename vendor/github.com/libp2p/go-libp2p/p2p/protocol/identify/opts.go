/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package identify

type config struct {
	protocolVersion            string
	userAgent                  string
	disableSignedPeerRecord    bool
	metricsTracer              MetricsTracer
	disableObservedAddrManager bool
}

// Option is an option function for identify.
type Option func(*config)

// ProtocolVersion sets the protocol version string that will be used to
// identify the family of protocols used by the peer.
func ProtocolVersion(s string) Option {
	return func(cfg *config) {
		cfg.protocolVersion = s
	}
}

// UserAgent sets the user agent this node will identify itself with to peers.
func UserAgent(ua string) Option {
	return func(cfg *config) {
		cfg.userAgent = ua
	}
}

// DisableSignedPeerRecord disables populating signed peer records on the outgoing Identify response
// and ONLY sends the unsigned addresses.
func DisableSignedPeerRecord() Option {
	return func(cfg *config) {
		cfg.disableSignedPeerRecord = true
	}
}

func WithMetricsTracer(tr MetricsTracer) Option {
	return func(cfg *config) {
		cfg.metricsTracer = tr
	}
}

// DisableObservedAddrManager disables the observed address manager. It also
// effectively disables the nat emitter and EvtNATDeviceTypeChanged
func DisableObservedAddrManager() Option {
	return func(cfg *config) {
		cfg.disableObservedAddrManager = true
	}
}
