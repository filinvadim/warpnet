/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package pstoreds

// cache abstracts all methods we access from ARCCache, to enable alternate
// implementations such as a no-op one.
type cache[K comparable, V any] interface {
	Get(key K) (value V, ok bool)
	Add(key K, value V)
	Remove(key K)
	Contains(key K) bool
	Peek(key K) (value V, ok bool)
	Keys() []K
}

// noopCache is a dummy implementation that's used when the cache is disabled.
type noopCache[K comparable, V any] struct {
}

var _ cache[int, int] = (*noopCache[int, int])(nil)

func (*noopCache[K, V]) Get(key K) (value V, ok bool) {
	return *new(V), false
}

func (*noopCache[K, V]) Add(key K, value V) {
}

func (*noopCache[K, V]) Remove(key K) {
}

func (*noopCache[K, V]) Contains(key K) bool {
	return false
}

func (*noopCache[K, V]) Peek(key K) (value V, ok bool) {
	return *new(V), false
}

func (*noopCache[K, V]) Keys() (keys []K) {
	return keys
}
