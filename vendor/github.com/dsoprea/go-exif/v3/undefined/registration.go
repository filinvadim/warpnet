/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package exifundefined

import (
	"github.com/dsoprea/go-logging"
)

// UndefinedTagHandle defines one undefined-type tag with a corresponding
// decoder.
type UndefinedTagHandle struct {
	IfdPath string
	TagId   uint16
}

func registerEncoder(entity EncodeableValue, encoder UndefinedValueEncoder) {
	typeName := entity.EncoderName()

	_, found := encoders[typeName]
	if found == true {
		log.Panicf("encoder already registered: %v", typeName)
	}

	encoders[typeName] = encoder
}

func registerDecoder(ifdPath string, tagId uint16, decoder UndefinedValueDecoder) {
	uth := UndefinedTagHandle{
		IfdPath: ifdPath,
		TagId:   tagId,
	}

	_, found := decoders[uth]
	if found == true {
		log.Panicf("decoder already registered: %v", uth)
	}

	decoders[uth] = decoder
}

var (
	encoders = make(map[string]UndefinedValueEncoder)
	decoders = make(map[UndefinedTagHandle]UndefinedValueDecoder)
)
