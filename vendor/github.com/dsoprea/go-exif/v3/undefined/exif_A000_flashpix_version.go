/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package exifundefined

import (
	"encoding/binary"

	"github.com/dsoprea/go-logging"

	"github.com/dsoprea/go-exif/v3/common"
)

type TagA000FlashpixVersion struct {
	FlashpixVersion string
}

func (TagA000FlashpixVersion) EncoderName() string {
	return "CodecA000FlashpixVersion"
}

func (fv TagA000FlashpixVersion) String() string {
	return fv.FlashpixVersion
}

type CodecA000FlashpixVersion struct {
}

func (CodecA000FlashpixVersion) Encode(value interface{}, byteOrder binary.ByteOrder) (encoded []byte, unitCount uint32, err error) {
	defer func() {
		if state := recover(); state != nil {
			err = log.Wrap(state.(error))
		}
	}()

	s, ok := value.(TagA000FlashpixVersion)
	if ok == false {
		log.Panicf("can only encode a TagA000FlashpixVersion")
	}

	return []byte(s.FlashpixVersion), uint32(len(s.FlashpixVersion)), nil
}

func (CodecA000FlashpixVersion) Decode(valueContext *exifcommon.ValueContext) (value EncodeableValue, err error) {
	defer func() {
		if state := recover(); state != nil {
			err = log.Wrap(state.(error))
		}
	}()

	valueContext.SetUndefinedValueType(exifcommon.TypeAsciiNoNul)

	valueString, err := valueContext.ReadAsciiNoNul()
	log.PanicIf(err)

	fv := TagA000FlashpixVersion{
		FlashpixVersion: valueString,
	}

	return fv, nil
}

func init() {
	registerEncoder(
		TagA000FlashpixVersion{},
		CodecA000FlashpixVersion{})

	registerDecoder(
		exifcommon.IfdExifStandardIfdIdentity.UnindexedString(),
		0xa000,
		CodecA000FlashpixVersion{})
}
