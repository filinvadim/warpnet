/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package exifundefined

import (
	"errors"

	"encoding/binary"

	"github.com/dsoprea/go-exif/v3/common"
)

const (
	// UnparseableUnknownTagValuePlaceholder is the string to use for an unknown
	// undefined tag.
	UnparseableUnknownTagValuePlaceholder = "!UNKNOWN"

	// UnparseableHandledTagValuePlaceholder is the string to use for a known
	// value that is not parseable.
	UnparseableHandledTagValuePlaceholder = "!MALFORMED"
)

var (
	// ErrUnparseableValue is the error for a value that we should have been
	// able to parse but were not able to.
	ErrUnparseableValue = errors.New("unparseable undefined tag")
)

// UndefinedValueEncoder knows how to encode an undefined-type tag's value to
// bytes.
type UndefinedValueEncoder interface {
	Encode(value interface{}, byteOrder binary.ByteOrder) (encoded []byte, unitCount uint32, err error)
}

// EncodeableValue wraps a value with the information that will be needed to re-
// encode it later.
type EncodeableValue interface {
	EncoderName() string
	String() string
}

// UndefinedValueDecoder knows how to decode an undefined-type tag's value from
// bytes.
type UndefinedValueDecoder interface {
	Decode(valueContext *exifcommon.ValueContext) (value EncodeableValue, err error)
}
