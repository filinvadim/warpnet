/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package rifs

import (
	"io"
)

// ReadCounter proxies read requests and maintains a counter of bytes read.
type ReadCounter struct {
	r       io.Reader
	counter int
}

// NewReadCounter returns a new `ReadCounter` struct wrapping a `Reader`.
func NewReadCounter(r io.Reader) *ReadCounter {
	return &ReadCounter{
		r: r,
	}
}

// Count returns the total number of bytes read.
func (rc *ReadCounter) Count() int {
	return rc.counter
}

// Reset resets the counter to zero.
func (rc *ReadCounter) Reset() {
	rc.counter = 0
}

// Read forwards a read to the underlying `Reader` while bumping the counter.
func (rc *ReadCounter) Read(b []byte) (n int, err error) {
	n, err = rc.r.Read(b)
	rc.counter += n

	return n, err
}
