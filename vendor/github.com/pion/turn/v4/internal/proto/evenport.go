/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// SPDX-FileCopyrightText: 2023 The Pion community <https://pion.ly>
// SPDX-License-Identifier: MIT

package proto

import "github.com/pion/stun/v3"

// EvenPort represents EVEN-PORT attribute.
//
// This attribute allows the client to request that the port in the
// relayed transport address be even, and (optionally) that the server
// reserve the next-higher port number.
//
// RFC 5766 Section 14.6
type EvenPort struct {
	// ReservePort means that the server is requested to reserve
	// the next-higher port number (on the same IP address)
	// for a subsequent allocation.
	ReservePort bool
}

func (p EvenPort) String() string {
	if p.ReservePort {
		return "reserve: true"
	}
	return "reserve: false"
}

const (
	evenPortSize = 1
	firstBitSet  = (1 << 8) - 1 // 0b100000000
)

// AddTo adds EVEN-PORT to message.
func (p EvenPort) AddTo(m *stun.Message) error {
	v := make([]byte, evenPortSize)
	if p.ReservePort {
		// Set first bit to 1.
		v[0] = firstBitSet
	}
	m.Add(stun.AttrEvenPort, v)
	return nil
}

// GetFrom decodes EVEN-PORT from message.
func (p *EvenPort) GetFrom(m *stun.Message) error {
	v, err := m.Get(stun.AttrEvenPort)
	if err != nil {
		return err
	}
	if err = stun.CheckSize(stun.AttrEvenPort, len(v), evenPortSize); err != nil {
		return err
	}
	if v[0]&firstBitSet > 0 {
		p.ReservePort = true
	}
	return nil
}
