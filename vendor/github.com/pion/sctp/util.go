/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// SPDX-FileCopyrightText: 2023 The Pion community <https://pion.ly>
// SPDX-License-Identifier: MIT

package sctp

const (
	paddingMultiple = 4
)

func getPadding(l int) int {
	return (paddingMultiple - (l % paddingMultiple)) % paddingMultiple
}

func padByte(in []byte, cnt int) []byte {
	if cnt < 0 {
		cnt = 0
	}
	padding := make([]byte, cnt)

	return append(in, padding...)
}

// Serial Number Arithmetic (RFC 1982).
func sna32LT(i1, i2 uint32) bool {
	return (i1 < i2 && i2-i1 < 1<<31) || (i1 > i2 && i1-i2 > 1<<31)
}

func sna32LTE(i1, i2 uint32) bool {
	return i1 == i2 || sna32LT(i1, i2)
}

func sna32GT(i1, i2 uint32) bool {
	return (i1 < i2 && (i2-i1) >= 1<<31) || (i1 > i2 && (i1-i2) <= 1<<31)
}

func sna32GTE(i1, i2 uint32) bool {
	return i1 == i2 || sna32GT(i1, i2)
}

func sna32EQ(i1, i2 uint32) bool {
	return i1 == i2
}

func sna16LT(i1, i2 uint16) bool {
	return (i1 < i2 && (i2-i1) < 1<<15) || (i1 > i2 && (i1-i2) > 1<<15)
}

func sna16LTE(i1, i2 uint16) bool {
	return i1 == i2 || sna16LT(i1, i2)
}

func sna16GT(i1, i2 uint16) bool {
	return (i1 < i2 && (i2-i1) >= 1<<15) || (i1 > i2 && (i1-i2) <= 1<<15)
}

func sna16GTE(i1, i2 uint16) bool {
	return i1 == i2 || sna16GT(i1, i2)
}

func sna16EQ(i1, i2 uint16) bool {
	return i1 == i2
}
