/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// SPDX-FileCopyrightText: 2023 The Pion community <https://pion.ly>
// SPDX-License-Identifier: MIT

package ice

import "strings"

// TCPType is the type of ICE TCP candidate as described in
// https://tools.ietf.org/html/rfc6544#section-4.5
type TCPType int

const (
	// TCPTypeUnspecified is the default value. For example UDP candidates do not
	// need this field.
	TCPTypeUnspecified TCPType = iota
	// TCPTypeActive is active TCP candidate, which initiates TCP connections.
	TCPTypeActive
	// TCPTypePassive is passive TCP candidate, only accepts TCP connections.
	TCPTypePassive
	// TCPTypeSimultaneousOpen is like active and passive at the same time.
	TCPTypeSimultaneousOpen
)

// NewTCPType creates a new TCPType from string.
func NewTCPType(value string) TCPType {
	switch strings.ToLower(value) {
	case "active":
		return TCPTypeActive
	case "passive":
		return TCPTypePassive
	case "so":
		return TCPTypeSimultaneousOpen
	default:
		return TCPTypeUnspecified
	}
}

func (t TCPType) String() string {
	switch t {
	case TCPTypeUnspecified:
		return ""
	case TCPTypeActive:
		return "active"
	case TCPTypePassive:
		return "passive"
	case TCPTypeSimultaneousOpen:
		return "so"
	default:
		return ErrUnknownType.Error()
	}
}
