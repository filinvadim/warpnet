/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// SPDX-FileCopyrightText: 2023 The Pion community <https://pion.ly>
// SPDX-License-Identifier: MIT

// Package closer provides signaling channel for shutdown
package closer

import (
	"context"
)

// Closer allows for each signaling a channel for shutdown.
type Closer struct {
	ctx       context.Context //nolint:containedctx
	closeFunc func()
}

// NewCloser creates a new instance of Closer.
func NewCloser() *Closer {
	ctx, closeFunc := context.WithCancel(context.Background())

	return &Closer{
		ctx:       ctx,
		closeFunc: closeFunc,
	}
}

// NewCloserWithParent creates a new instance of Closer with a parent context.
func NewCloserWithParent(ctx context.Context) *Closer {
	ctx, closeFunc := context.WithCancel(ctx)

	return &Closer{
		ctx:       ctx,
		closeFunc: closeFunc,
	}
}

// Done returns a channel signaling when it is done.
func (c *Closer) Done() <-chan struct{} {
	return c.ctx.Done()
}

// Err returns an error of the context.
func (c *Closer) Err() error {
	return c.ctx.Err()
}

// Close sends a signal to trigger the ctx done channel.
func (c *Closer) Close() {
	c.closeFunc()
}
