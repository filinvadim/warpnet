/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// SPDX-FileCopyrightText: 2023 The Pion community <https://pion.ly>
// SPDX-License-Identifier: MIT

//go:build !js
// +build !js

package webrtc

import "github.com/pion/interceptor"

// SetRTPParameters applies provided RTPParameters the RTPReceiver's tracks.
//
// This method is part of the ORTC API. It is not
// meant to be used together with the basic WebRTC API.
//
// The amount of provided codecs must match the number of tracks on the receiver.
func (r *RTPReceiver) SetRTPParameters(params RTPParameters) {
	headerExtensions := make([]interceptor.RTPHeaderExtension, 0, len(params.HeaderExtensions))
	for _, h := range params.HeaderExtensions {
		headerExtensions = append(headerExtensions, interceptor.RTPHeaderExtension{ID: h.ID, URI: h.URI})
	}

	r.mu.Lock()
	defer r.mu.Unlock()

	for ndx, codec := range params.Codecs {
		currentTrack := r.tracks[ndx].track

		r.tracks[ndx].streamInfo.RTPHeaderExtensions = headerExtensions

		currentTrack.mu.Lock()
		currentTrack.codec = codec
		currentTrack.params = params
		currentTrack.mu.Unlock()
	}
}
