/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// SPDX-FileCopyrightText: 2023 The Pion community <https://pion.ly>
// SPDX-License-Identifier: MIT

package webrtc

// ICEComponent describes if the ice transport is used for RTP
// (or RTCP multiplexing).
type ICEComponent int

const (
	// ICEComponentUnknown is the enum's zero-value.
	ICEComponentUnknown ICEComponent = iota

	// ICEComponentRTP indicates that the ICE Transport is used for RTP (or
	// RTCP multiplexing), as defined in
	// https://tools.ietf.org/html/rfc5245#section-4.1.1.1. Protocols
	// multiplexed with RTP (e.g. data channel) share its component ID. This
	// represents the component-id value 1 when encoded in candidate-attribute.
	ICEComponentRTP

	// ICEComponentRTCP indicates that the ICE Transport is used for RTCP as
	// defined by https://tools.ietf.org/html/rfc5245#section-4.1.1.1. This
	// represents the component-id value 2 when encoded in candidate-attribute.
	ICEComponentRTCP
)

// This is done this way because of a linter.
const (
	iceComponentRTPStr  = "rtp"
	iceComponentRTCPStr = "rtcp"
)

func newICEComponent(raw string) ICEComponent {
	switch raw {
	case iceComponentRTPStr:
		return ICEComponentRTP
	case iceComponentRTCPStr:
		return ICEComponentRTCP
	default:
		return ICEComponentUnknown
	}
}

func (t ICEComponent) String() string {
	switch t {
	case ICEComponentRTP:
		return iceComponentRTPStr
	case ICEComponentRTCP:
		return iceComponentRTCPStr
	default:
		return ErrUnknownType.Error()
	}
}
