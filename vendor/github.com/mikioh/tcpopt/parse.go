/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Copyright 2016 Mikio Hara. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package tcpopt

import (
	"fmt"
	"sync"
)

var parserMu sync.RWMutex

// Register registers a socket option parser.
func Register(level, name int, fn func([]byte) (Option, error)) {
	parserMu.Lock()
	parsers[int64(level)<<32|int64(name)] = fn
	parserMu.Unlock()
}

// Unregister unregisters a socket option parser.
func Unregister(level, name int) {
	parserMu.Lock()
	delete(parsers, int64(level)<<32|int64(name))
	parserMu.Unlock()
}

// Parse parses a socket option.
func Parse(level, name int, b []byte) (Option, error) {
	parserMu.RLock()
	defer parserMu.RUnlock()
	fn, ok := parsers[int64(level)<<32|int64(name)]
	if !ok {
		return nil, fmt.Errorf("parser for level=%#x name=%#x not found", level, name)
	}
	return fn(b)
}
