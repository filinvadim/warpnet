/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package ssdp

import (
	"fmt"
	"net"
)

// LocationProvider provides address for Location header which can be reached from
// "from" address network.
type LocationProvider interface {
	// Location provides an address be reachable from the network located
	// by "from" address or "ifi" interface.
	// One of "from" or "ifi" must not be nil.
	Location(from net.Addr, ifi *net.Interface) string
}

// LocationProviderFunc type is an adapter to allow the use of ordinary
// functions are location providers.
type LocationProviderFunc func(net.Addr, *net.Interface) string

func (f LocationProviderFunc) Location(from net.Addr, ifi *net.Interface) string {
	return f(from, ifi)
}

type fixedLocation string

func (s fixedLocation) Location(net.Addr, *net.Interface) string {
	return string(s)
}

func toLocationProvider(v interface{}) (LocationProvider, error) {
	switch w := v.(type) {
	case string:
		return fixedLocation(w), nil
	case LocationProvider:
		return w, nil
	default:
		return nil, fmt.Errorf("location should be a string or a ssdp.LocationProvider but got %T", w)
	}
}
