/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package atlas

import (
	"reflect"
)

func (x *BuilderCore) Transform() *BuilderTransform {
	// no checks on x.entry.Type.Kind() here -- transforms can be pretty much any<->any
	return &BuilderTransform{x.entry}
}

type BuilderTransform struct {
	entry *AtlasEntry
}

func (x *BuilderTransform) Complete() *AtlasEntry {
	return x.entry
}

func (x *BuilderTransform) TransformMarshal(trFunc MarshalTransformFunc, toType reflect.Type) *BuilderTransform {
	x.entry.MarshalTransformFunc = trFunc
	x.entry.MarshalTransformTargetType = toType
	return x
}

func (x *BuilderTransform) TransformUnmarshal(trFunc UnmarshalTransformFunc, toType reflect.Type) *BuilderTransform {
	x.entry.UnmarshalTransformFunc = trFunc
	x.entry.UnmarshalTransformTargetType = toType
	return x
}
