/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

package obj

import (
	"reflect"

	"github.com/polydawn/refmt/obj/atlas"
	. "github.com/polydawn/refmt/tok"
)

type marshalMachineTransform struct {
	trFunc   atlas.MarshalTransformFunc
	delegate MarshalMachine
	tagged   bool // Used to apply tag to first step (without forcing delegate to know).
	tag      int
	first    bool // This resets; 'tagged' persists (because it's type info).
}

func (mach *marshalMachineTransform) Reset(slab *marshalSlab, rv reflect.Value, _ reflect.Type) error {
	tr_rv, err := mach.trFunc(rv)
	if err != nil {
		return err
	}
	mach.first = true
	return mach.delegate.Reset(slab, tr_rv, tr_rv.Type())
}

func (mach *marshalMachineTransform) Step(driver *Marshaller, slab *marshalSlab, tok *Token) (done bool, err error) {
	done, err = mach.delegate.Step(driver, slab, tok)
	if mach.first && mach.tagged {
		tok.Tagged = true
		tok.Tag = mach.tag
		mach.first = false
	}
	return
}
