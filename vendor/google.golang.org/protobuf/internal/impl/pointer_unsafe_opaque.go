/* License generated by licensor(https://github.com/Marvin9/licensor).

 Warpnet - Decentralized Social Network
 Copyright (C) 2025 Vadim Filin, https://github.com/filinvadim,
 <github.com.mecdy@passmail.net>
 
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

// Copyright 2024 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package impl

import (
	"sync/atomic"
	"unsafe"
)

func (p pointer) AtomicGetPointer() pointer {
	return pointer{p: atomic.LoadPointer((*unsafe.Pointer)(p.p))}
}

func (p pointer) AtomicSetPointer(v pointer) {
	atomic.StorePointer((*unsafe.Pointer)(p.p), v.p)
}

func (p pointer) AtomicSetNilPointer() {
	atomic.StorePointer((*unsafe.Pointer)(p.p), unsafe.Pointer(nil))
}

func (p pointer) AtomicSetPointerIfNil(v pointer) pointer {
	if atomic.CompareAndSwapPointer((*unsafe.Pointer)(p.p), unsafe.Pointer(nil), v.p) {
		return v
	}
	return pointer{p: atomic.LoadPointer((*unsafe.Pointer)(p.p))}
}

type atomicV1MessageInfo struct{ p Pointer }

func (mi *atomicV1MessageInfo) Get() Pointer {
	return Pointer(atomic.LoadPointer((*unsafe.Pointer)(&mi.p)))
}

func (mi *atomicV1MessageInfo) SetIfNil(p Pointer) Pointer {
	if atomic.CompareAndSwapPointer((*unsafe.Pointer)(&mi.p), nil, unsafe.Pointer(p)) {
		return p
	}
	return mi.Get()
}
