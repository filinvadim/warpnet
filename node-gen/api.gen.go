// Package node provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package node

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/filinvadim/warpnet/domain-gen"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for NewEventParamsEventType.
const (
	Error       NewEventParamsEventType = "error"
	Follow      NewEventParamsEventType = "follow"
	GetReplies  NewEventParamsEventType = "get_replies"
	GetReply    NewEventParamsEventType = "get_reply"
	GetTimeline NewEventParamsEventType = "get_timeline"
	GetTweet    NewEventParamsEventType = "get_tweet"
	GetTweets   NewEventParamsEventType = "get_tweets"
	GetUser     NewEventParamsEventType = "get_user"
	GetUsers    NewEventParamsEventType = "get_users"
	NewReply    NewEventParamsEventType = "new_reply"
	NewTweet    NewEventParamsEventType = "new_tweet"
	NewUser     NewEventParamsEventType = "new_user"
	Unfollow    NewEventParamsEventType = "unfollow"
)

// NewEventParamsEventType defines parameters for NewEvent.
type NewEventParamsEventType string

// NewEventJSONRequestBody defines body for NewEvent for application/json ContentType.
type NewEventJSONRequestBody = externalRef0.Event

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RYS2/bRhD+K8S2Rzqy2jRAeHPb1DBqOIXh9GIIxJocSRuTu8zsUKpg6L8XsyTFpyTS",
	"TYDmYq25855vHuSLiEyaGQ2arAhehI3WkEp3jE0qlQ4/IBr8sAFN/DBDkwGSAkcSmRj4l3YZiEAoTbAC",
	"FHtfpGCtXDUvLaHSK7Hf+wLhS64QYhE8FiJq+oVf0ZunzxARy6oMGbYhliT5V+rdx6UIHl/EjwhLEYgf",
	"ZrVrs9KvWd+pvT+K4w62D1sAmsr0ycJkRX+YJDHbyZr0cjrfNdBVkjjP7FTGB5VCojRM5pscx2ugyXEs",
	"PGO2aY7dmpXSUzlMPtmhe8gSBXZqlplt9xpdFdNi7wtSKViSacaFszSYShIBVxJc8JXwzxRtzX+iXgsU",
	"38OXHOxA3SLIGDBUMf+TKn0LekVrEcx7yn2xRUXjaDuG1kqaQk4Y3a+HftPL0Roc6Gy+SFSqaKAh+uKf",
	"i5W5KJ/mStO7t0yfW8Cb+HyTLOnO2t1A+xSzlQ2L1gFNW56MSUDqFgEzDFJM83x/0pFWZXzL8GcSQVOI",
	"XB0luHoy0RgavutCrSTsi12c9XZ3xNdRBn5j6xsaTjvSHgffTdk0plHPZuK7m+HQTjTCPwg7bU4953rW",
	"fD23b9UzHPF2XENmFa9oxxWbX+s6ZWU9iQcqw9qtweOp0TKFcaFylH4t8bRFh0lfy+6RdVa4gdF3mIkj",
	"5nd7jp7qne31YDi/I5W6qjin7GzpfE1l7fX2P8a0EjYyqmeKcqxSJj2l6R4OUft/V+bDsJmR0VQG6YyV",
	"EYIkiENJYzdQXxwZcYl6LrQrgtSOTIVrgHUmJKLcHYSFkcl127Bi9PjslkrzVASX/sBLbzk6jw5qF9rJ",
	"tlaoGDC3Evlqi4/vB+ORNLXfFjBzfyrANEPnN3aRRntuIOYEMLt1/Z28dXwqm0jb1ieFtOaSGF8jr6mr",
	"GGyEKiNl9CAOmq8GB9z2qLrQrLhCzeAbAGYfjCUL2ldpQjtB1dFeop9bEnJMhkKWmEgejVe6CxGWgCiT",
	"iZ5oE8Px7sEiIQ6fdmd3nilY7dZZEw2ti8q4Tmq78W/gpZnRMwXMVim9NO6DXhOP4ndlI7MB3HlXf914",
	"S4Oe9GLFzjzlBLH3sFVEgBfcuT2ZZYkqU+MLUpRAIaJLzsKELzaAtlAzf3P55pLjaDLQMlMiED+7R9ya",
	"aO3yN9vMZxyFGfAqMHtxPyF7snfFa4qGwyXsTOBdXdxBubG4HidTIAfwxxehWC8L5+C6zIlaomhmiTAH",
	"v/w0yxrAAf1RAKLht6QVUOj2kPpoy3MxOhpnvtCwrej5WNHw2b3rlfTdM7elKqeMDX04Ounl618juwfI",
	"LfxqP/vVxLvOqtBI2uyzLYqq9nXMx9ziw1Yb2Rwz98BmRtuiof50edkH2Mc/Oe1vh65u9EYmKvaUznIq",
	"qOZ9qquc1t5SqgRipvllSFKN4rXUcQLoFbljm22ephJ3IhC/uRLxpKdh65UJIrliuIjCyQUzHHBI5Yhb",
	"wQDwroH+nt+ZGB6Yamwk9i6MFnBTwbRNc2simXgxbCAxWQqaKocYEJiIQKyJsmA24xaZrI2lYP7u/bv3",
	"Yr/Y/xsAAP//UixPPGwYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(path.Dir(pathToFile), "./domain.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
