openapi: 3.0.0
info:
  title: Distributed Twitter API
  version: 1.0.0
  description: API for a distributed Twitter-like application
servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /:
    get:
      summary: Serve the main index.html page
      description: This endpoint serves the main frontend page of the application (index.html).
      operationId: GetIndex
      responses:
        '200':
          description: The main HTML page of the application
          content:
            text/html:
              schema:
                type: string
                example: "<html><head><title>Twitter Clone</title></head><body>Welcome to Twitter Clone</body></html>"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error

  /auth/login:
    post:
      tags:
        - Auth
      summary: Store credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Auth failed
        '500':
          description: Internal server error

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Close service
      responses:
        '200':
          description: Success
        '500':
          description: Internal server error

  /nodes/ping:
    get:
      tags:
        - Node
      summary: Ping another node to check its status
      responses:
        '200':
          description: Ping response from the node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
        '404':
          description: Node not found or not responding
        '500':
          description: Internal server error

  /users:
    post:
      tags:
        - User
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input

  /users/{user_id}:
    get:
      tags:
        - User
      summary: Get user information
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /tweets:
    post:
      tags:
        - Tweet
      summary: Publish a new tweet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tweet'
      responses:
        '200':
          description: Tweet successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tweet'
        '400':
          description: Invalid input

  /tweets/{user_id}/{tweet_id}:
    get:
      tags:
        - Tweet
      summary: Get a certain tweet
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: tweet_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tweet successfully fetched
        '400':
          description: Invalid input

  /tweets/{user_id}:
    get:
      tags:
        - Tweet
      summary: Get user's tweets
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of user's tweets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tweet'
        '404':
          description: User or tweets not found

  /tweets/timeline/{user_id}:
    get:
      tags:
        - Tweet
      summary: Get user's tweet timeline
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            x-go-type: uint64
            default: 20
      responses:
        '200':
          description: User's tweet timeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineResponse'
        '404':
          description: User or timeline not found


  /users/follow:
    post:
      tags:
        - User
      summary: Follow another user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowRequest'
      responses:
        '201':
          description: Successfully followed the user
        '400':
          description: Invalid input

  /users/unfollow:
    post:
      tags:
        - User
      summary: Unfollow a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnfollowRequest'
      responses:
        '200':
          description: Successfully unfollowed the user
        '400':
          description: Invalid input

  /nodes:
    get:
      tags:
        - Node
      summary: Get node info
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        '500':
          description: Server error
        '404':
          description: Not found
    post:
      tags:
        - Node
      summary: Send node info
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/Node'
      responses:
        '200':
          description: Success
        '400':
          description: Invalid input

components:
  schemas:
    User:
      type: object
      properties:
        user_id:
          type: string
        username:
          type: string
          minLength: 1
        description:
          type: string
        followers_num:
          type: integer
          format: int64
        followed_num:
          type: integer
          format: int64
        link:
          type: string
          format: url
        location:
          type: string
        birthdate:
          type: string
          format: date-time
        followers:
          type: array
          items:
            type: string
        followed:
          type: array
          items:
            type: string
        referred_by:
          type: string
        my_referrals:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time
      required:
        - username

    Tweet:
      type: object
      properties:
        user_id:
          type: string
          minLength: 1
        username:
          type: string
        tweet_id:
          type: string
          minLength: 1
        content:
          type: string
          minLength: 1
        sequence:
          type: integer
          format: int64
          minimum: 0
        created_at:
          type: string
          format: date-time
        likes_count:
          type: integer
          format: int64
          minimum: 0
        retweets_count:
          type: integer
          format: int64
          minimum: 0
        likes:
          type: array
          items:
            $ref: '#/components/schemas/Like'
        retweets:
          type: array
          items:
            $ref: '#/components/schemas/Retweet'
      required:
        - user_id
        - content

    Like:
      type: object
      properties:
        user_id:
          type: string
          minLength: 1
        tweet_id:
          type: string
          minLength: 1
      required:
        - user_id
        - tweet_id

    Retweet:
      type: object
      properties:
        user_id:
          type: string
          minLength: 1
        tweet_id:
          type: string
          minLength: 1
      required:
        - user_id
        - tweet_id

    FollowRequest:
      type: object
      properties:
        reader_id:
          type: string
          minLength: 1
        writer_id:
          type: string
          minLength: 1
      required:
        - reader_id
        - writer_id

    UnfollowRequest:
      type: object
      properties:
        reader_id:
          type: string
          minLength: 1
        writer_id:
          type: string
          minLength: 1
      required:
        - reader_id
        - writer_id

    Node:
      type: object
      properties:
        ip:
          type: string
          format: ipv4
          description: The IP address
        port:
          type: string
          default: 6969
        is_active:
          type: boolean
          description: Whether the IP address is currently active
        latency:
          type: integer
          format: int64
          description: The network latency to this IP in milliseconds
          example: 120
        last_seen:
          type: string
          format: date-time
          description: The timestamp when this IP address was last active
        uptime:
          type: integer
          format: int64
          description: Uptime of the node in seconds
          example: 3600
        created_at:
          type: string
          format: date-time
        owner_id:
          type: string
      required:
        - ip
        - port
        - is_active
        - last_seen
        - owner_id

    PingResponse:
      type: object
      properties:
        ip:
          type: string
          format: ipv4
          description: The IP address that was pinged
        port:
          type: string
          default: 6969
        latency:
          type: integer
          format: int64
          description: The latency to the IP address in milliseconds
        requester_ip:
          type: string
      required:
        - ip
        - latency
        - port

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message

    TimelineResponse:
      type: object
      properties:
        cursor:
          type: string
        tweets:
          type: array
          items:
            $ref: '#/components/schemas/Tweet'
      required:
        - cursor
        - tweets

    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password