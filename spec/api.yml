openapi: 3.0.0
info:
  title: Distributed Twitter API
  version: 1.0.0
  description: API for a distributed Twitter-like application
servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /ping:
    get:
      summary: Ping another node to check its status
      operationId: pingNode
      parameters:
        - name: ip
          in: query
          required: true
          schema:
            type: string
            format: ipv4
            description: The IP address of the node to ping
      responses:
        '200':
          description: Ping response from the node
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
        '404':
          description: Node not found or not responding
        '500':
          description: Internal server error

  /users:
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User successfully created
        '400':
          description: Invalid input

  /users/{userId}:
    get:
      summary: Get user information
      operationId: getUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

  /tweets:
    post:
      summary: Publish a new tweet
      operationId: createTweet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tweet'
      responses:
        '201':
          description: Tweet successfully created
        '400':
          description: Invalid input

  /tweets/{userId}:
    get:
      summary: Get user's tweets
      operationId: getUserTweets
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of user's tweets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tweet'
        '404':
          description: User or tweets not found

  /timeline/{userId}:
    get:
      summary: Get user's tweet timeline
      operationId: getUserTimeline
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User's tweet timeline
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tweet'
        '404':
          description: User or timeline not found

  /broadcast:
    post:
      summary: Broadcast a message to friends' nodes
      operationId: broadcastMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastMessage'
      responses:
        '200':
          description: Message successfully broadcasted
        '400':
          description: Invalid input

  /follow:
    post:
      summary: Follow another user
      operationId: followUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowRequest'
      responses:
        '200':
          description: Successfully followed the user
        '400':
          description: Invalid input

  /unfollow:
    post:
      summary: Unfollow a user
      operationId: unfollowUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnfollowRequest'
      responses:
        '200':
          description: Successfully unfollowed the user
        '400':
          description: Invalid input

  /nodes/ip-addresses:
    get:
      summary: Get list of IP addresses from other nodes
      operationId: getNodeIPAddresses
      responses:
        '200':
          description: List of IP addresses from other nodes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IPAddress'
        '500':
          description: Server error
        '404':
          description: not found

    post:
      summary: Send list of IP addresses to other nodes
      operationId: sendNodeIPAddresses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IPAddress'
      responses:
        '200':
          description: IP addresses successfully received
        '400':
          description: Invalid input

components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
          minLength: 1
        username:
          type: string
          minLength: 1
        description:
          type: string
        publicKey:
          type: string
        followers_num:
          type: integer
          format: int64
        followed_num:
          type: integer
          format: int64
        link:
          type: string
          format: url
        location:
          type: string
        birthdate:
          type: string
          format: date-time
        followers:
          type: array
          items:
            type: string
        followed:
          type: array
          items:
            type: string
        referred_by:
          type: string
        my_referrals:
          type: array
          items:
            type: string
        created_at:
          type: string
          format: date-time

    Tweet:
      type: object
      properties:
        userId:
          type: string
          minLength: 1
        tweetId:
          type: string
          minLength: 1
        content:
          type: string
          minLength: 1
        sequence:
          type: integer
          format: int64
          minimum: 0
        created_at:
          type: string
          format: date-time
        likes_count:
          type: integer
          format: int64
          minimum: 0
        retweets_count:
          type: integer
          format: int64
          minimum: 0
        likes:
          type: array
          items:
            $ref: '#/components/schemas/Like'
        retweets:
          type: array
          items:
            $ref: '#/components/schemas/Retweet'
      required:
        - userId
        - content
        - sequence
        - timestamp

    Like:
      type: object
      properties:
        userId:
          type: string
          minLength: 1
        tweetId:
          type: string
          minLength: 1
      required:
        - userId
        - tweetId

    Retweet:
      type: object
      properties:
        userId:
          type: string
          minLength: 1
        tweetId:
          type: string
          minLength: 1
      required:
        - userId
        - tweetId


    BroadcastMessage:
      type: object
      properties:
        userId:
          type: string
          minLength: 1
        prefixes:
          type: string
          minLength: 1
        key:
          type: string
          minLength: 1
        value:
          type: string
          minLength: 1
        sequence_num:
          type: integer
          format: int64
      required:
        - userId
        - content
        - key
        - value

    FollowRequest:
      type: object
      properties:
        from_follower_id:
          type: string
          minLength: 1
        to_followed_id:
          type: string
          minLength: 1
      required:
        - from_follower_id
        - to_followed_id

    UnfollowRequest:
      type: object
      properties:
        from_follower_id:
          type: string
          minLength: 1
        to_followed_id:
          type: string
          minLength: 1
      required:
        - from_follower_id
        - to_followed_id

    IPAddress:
      type: object
      properties:
        ip:
          type: string
          format: ipv4
          description: The IP address
        isActive:
          type: boolean
          description: Whether the IP address is currently active
        latency:
          type: integer
          format: int64
          description: The network latency to this IP in milliseconds
          example: 120
        lastSeen:
          type: string
          format: date-time
          description: The timestamp when this IP address was last active
        uptime:
          type: integer
          format: int64
          description: Uptime of the node in seconds
          example: 3600
        created_at:
          type: string
          format: date-time
      required:
        - ip
        - isActive
        - lastSeen

    PingResponse:
      type: object
      properties:
        ip:
          type: string
          format: ipv4
          description: The IP address that was pinged
        latency:
          type: integer
          format: int64
          description: The latency to the IP address in milliseconds
        isActive:
          type: boolean
          description: Whether the node is currently active
      required:
        - ip
        - latency
        - isActive